diff -urN u-boot-2015.04/arch/arm/cpu/armv7/exynos/clock.c uboot_2015.04/arch/arm/cpu/armv7/exynos/clock.c
--- u-boot-2015.04/arch/arm/cpu/armv7/exynos/clock.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/arch/arm/cpu/armv7/exynos/clock.c	2017-11-29 16:39:36.000000000 -0800
@@ -783,8 +783,13 @@
 
 static unsigned long exynos4_get_mmc_clk(int dev_index)
 {
+#if 0
 	struct exynos4_clock *clk =
 		(struct exynos4_clock *)samsung_get_base_clock();
+#endif
+	struct exynos4x12_clock *clk =
+		(struct exynos4x12_clock *)samsung_get_base_clock();
+
 	unsigned long uclk, sclk;
 	unsigned int sel, ratio, pre_ratio;
 	int shift = 0;
@@ -833,8 +838,12 @@
 /* exynos4: set the mmc clock */
 static void exynos4_set_mmc_clk(int dev_index, unsigned int div)
 {
+#if 0
 	struct exynos4_clock *clk =
 		(struct exynos4_clock *)samsung_get_base_clock();
+#endif
+	struct exynos4x12_clock *clk = 
+		(struct exynos4x12_clock *)samsung_get_base_clock();
 	unsigned int addr, clear_bit, set_bit;
 
 	/*
@@ -912,8 +921,12 @@
 /* get_lcd_clk: return lcd clock frequency */
 static unsigned long exynos4_get_lcd_clk(void)
 {
-	struct exynos4_clock *clk =
+	/*
+	 * struct exynos4_clock *clk =
 		(struct exynos4_clock *)samsung_get_base_clock();
+	 */
+	struct exynos4x12_clock *clk = 
+		(struct exynos4x12_clock *)samsung_get_base_clock();
 	unsigned long pclk, sclk;
 	unsigned int sel;
 	unsigned int ratio;
@@ -943,7 +956,7 @@
 	 * CLK_DIV_LCD0
 	 * FIMD0_RATIO [3:0]
 	 */
-	ratio = readl(&clk->div_lcd0);
+	ratio = readl(&clk->div_lcd);
 	ratio = ratio & 0xf;
 
 	pclk = sclk / (ratio + 1);
@@ -1063,8 +1076,13 @@
 
 void exynos4_set_lcd_clk(void)
 {
-	struct exynos4_clock *clk =
+	/*
+	 * struct exynos4_clock *clk =
 	    (struct exynos4_clock *)samsung_get_base_clock();
+	 */
+	struct exynos4x12_clock *clk =
+	    (struct exynos4x12_clock *)samsung_get_base_clock();
+	printf("%s:%d.\n", __func__, __LINE__);
 
 	/*
 	 * CLK_GATE_BLOCK
@@ -1098,7 +1116,8 @@
 	 * CLK_PPMULCD0		[5]
 	 * Gating all clocks for FIMD0
 	 */
-	setbits_le32(&clk->gate_ip_lcd0, 1 << 0);
+	printf("gate_ip_lcd addr = 0x%p.\n", &clk->gate_ip_lcd);
+	setbits_le32(&clk->gate_ip_lcd, 1 << 0);
 
 	/*
 	 * CLK_DIV_LCD0
@@ -1110,7 +1129,7 @@
 	 * MIPI0_PRE_RATIO	[23:20]
 	 * set fimd ratio
 	 */
-	clrsetbits_le32(&clk->div_lcd0, 0xf, 0x1);
+	clrsetbits_le32(&clk->div_lcd, 0xf, 0x1);
 }
 
 void exynos5_set_lcd_clk(void)
diff -urN u-boot-2015.04/arch/arm/cpu/armv7/exynos/clock_init_exynos4.c uboot_2015.04/arch/arm/cpu/armv7/exynos/clock_init_exynos4.c
--- u-boot-2015.04/arch/arm/cpu/armv7/exynos/clock_init_exynos4.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/arch/arm/cpu/armv7/exynos/clock_init_exynos4.c	2017-11-29 17:08:58.000000000 -0800
@@ -30,7 +30,7 @@
 #include <asm/arch/clk.h>
 #include <asm/arch/clock.h>
 #include "common_setup.h"
-#include "exynos4_setup.h"
+#include "itop-4412_setup.h"
 
 /*
  * system_clock_init: Initialize core clock and bus clock.
@@ -38,57 +38,202 @@
  */
 void system_clock_init(void)
 {
-	struct exynos4_clock *clk =
-			(struct exynos4_clock *)samsung_get_base_clock();
+	unsigned int set, clr, clr_src_cpu, clr_pll_con0, clr_src_dmc, value;
+	unsigned int *addr;
+	struct exynos4x12_clock *clk = (struct exynos4x12_clock *)samsung_get_base_clock();
+
+	// src_cpu
+	writel(0, &clk->src_cpu);
+	while (readl(&clk->mux_stat_cpu) != 0x01110001)
+		continue;
+
+	set = ACP_RATIO(3) | ACP_PCLK_RATIO(1) | DPHY_RATIO(1)
+		| DMC_RATIO(1) | DMCD_RATIO(1) | DMCP_RATIO(1) 
+		| COPY2_RATIO(3) | CORE_TIMERS_RATIO(1);
+	
+	clr = ACP_RATIO(7) | ACP_PCLK_RATIO(7) | DPHY_RATIO(7)
+		| DMC_RATIO(7) | DMCD_RATIO(7) | DMCP_RATIO(7) 
+		| COPY2_RATIO(7) | CORE_TIMERS_RATIO(7);
+
+	clrsetbits_le32(&clk->div_dmc0, clr, set);
+
+	clr = C2C_ACLK_RATIO(0x7) | PWI_RATIO(0xf) | DVSEM_RATIO(0x7f) | DPM_RATIO(0x7f);
+	set = PWI_RATIO(1) | DVSEM_RATIO(1) | DPM_RATIO(1);
+	clrsetbits_le32(&clk->div_dmc1, clr, set);
+
+	writel(0, &clk->src_top0);
+	while (readl(&clk->mux_stat_top0) != 0x11111111)
+		continue;
+
+	writel(0, &clk->src_top1);
+	while (readl(&clk->mux_stat_top1) != 0x01111110)
+		continue;
+
+	writel (CLK_DIV_TOP_VAL, &clk->div_top);
+	
+	writel (0x10, &clk->src_leftbus);
+	while (readl(&clk->mux_stat_leftbus) != 0x21)
+		continue;
+	writel (CLK_DIV_LEFTBUS_VAL, &clk->div_leftbus);
+
+	writel (0x10, &clk->src_rightbus);
+	while (readl(&clk->mux_stat_rightbus) != 0x21)
+		continue;
+
+	writel (CLK_DIV_RIGHTBUS_VAL, &clk->div_rightbus);
+	
+#define APLL_LOCK_VAL	0x2F1
+#define MPLL_LOCK_VAL	0x2F1
+#define EPLL_LOCK_VAL	0x2321
+#define VPLL_LOCK_VAL	0x2321
+	writel(APLL_LOCK_VAL, &clk->apll_lock);
+	writel(MPLL_LOCK_VAL, &clk->mpll_lock);
+	writel(EPLL_LOCK_VAL, &clk->epll_lock);
+	writel(VPLL_LOCK_VAL, &clk->vpll_lock);
+
+	set = CORE_RATIO(0) | COREM0_RATIO(3) | COREM1_RATIO(7) | PERIPH_RATIO(3) | ATB_RATIO(4) | PCLK_DBG_RATIO(1) | APLL_RATIO(1) | CORE2_RATIO(0);
+	
+	clr = CORE_RATIO(7) | COREM0_RATIO(7) | COREM1_RATIO(7) | PERIPH_RATIO(7) | ATB_RATIO(7) | PCLK_DBG_RATIO(7) | APLL_RATIO(7) | CORE2_RATIO(7);
+
+	clrsetbits_le32(&clk->div_cpu0, clr, set);
+
+	/* Wait for divider ready status */
+	while (readl(&clk->div_stat_cpu0) & DIV_STAT_CPU0_CHANGING)
+		continue;
+	
+	set = COPY_RATIO(4) | HPM_RATIO(0);
+	clr = COPY_RATIO(7) | HPM_RATIO(7);
+	clrsetbits_le32(&clk->div_cpu1, clr, set);
+	while (readl(&clk->div_stat_cpu1) & DIV_STAT_CPU1_CHANGING)
+		continue;
+
+	/* Set APLL to 1000MHz */
+	writel (0x00803800, &clk->apll_con1);
+	clr_pll_con0 = SDIV(7) | PDIV(63) | MDIV(1023) | FSEL(1);
+	set = SDIV(0) | PDIV(3) | MDIV(125) | FSEL(0) | PLL_ENABLE(1);
+
+	clrsetbits_le32(&clk->apll_con0, clr_pll_con0, set);
+
+	/* Wait for PLL to be locked */
+	while (!(readl(&clk->apll_con0) & PLL_LOCKED_BIT))
+		continue;
+
+	/* Set MPLL to 800MHz */
+	writel (0x00803800, &clk->mpll_con1);
+	set = SDIV(0) | PDIV(3) | MDIV(100) | FSEL(0) | PLL_ENABLE(1);
+
+	clrsetbits_le32(&clk->mpll_con0, clr_pll_con0, set);
+
+	/* Wait for PLL to be locked */
+	while (!(readl(&clk->mpll_con0) & PLL_LOCKED_BIT))
+		continue;
+
+	// set EPLL
+	writel (0x80, &clk->epll_con2);
+	writel (0x66010000, &clk->epll_con1);
+	writel (EPLL_CON0_VAL, &clk->epll_con0);
+	while (!(readl(&clk->epll_con0) & PLL_LOCKED_BIT))
+		continue;
+
+	// set VPLL
+	writel (0x0080, &clk->vpll_con2);
+	writel (0x66010000, &clk->vpll_con1);
+	writel (VPLL_CON0_VAL, &clk->vpll_con0);
+	while (!(readl(&clk->vpll_con0) & PLL_LOCKED_BIT))
+		continue;
+
+	clr_src_cpu = MUX_APLL_SEL(1) | MUX_CORE_SEL(1) |
+		      MUX_HPM_SEL(1) | MUX_MPLL_USER_SEL_C(1);
+	set = MUX_APLL_SEL(1) | MUX_CORE_SEL(0) | MUX_HPM_SEL(0) | MUX_MPLL_USER_SEL_C(1);
+
+	clrsetbits_le32(&clk->src_cpu, clr_src_cpu, set);
+
+	/* Wait for mux change */
+	while (readl(&clk->mux_stat_cpu) & MUX_STAT_CPU_CHANGING)
+		continue;
+	
+	// set src_dmc
+	clr_src_dmc = MUX_C2C_SEL(1) | MUX_DMC_BUS_SEL(1) |
+		      MUX_DPHY_SEL(1) | MUX_MPLL_SEL(1) |
+		      MUX_PWI_SEL(15) | MUX_G2D_ACP0_SEL(1) |
+		      MUX_G2D_ACP1_SEL(1) | MUX_G2D_ACP_SEL(1);
+	
+	set = MUX_C2C_SEL(0) | MUX_DMC_BUS_SEL(0) | MUX_DPHY_SEL(0) | MUX_MPLL_SEL(1) | MUX_PWI_SEL(1) | MUX_G2D_ACP0_SEL(0) | MUX_G2D_ACP1_SEL(0) | MUX_G2D_ACP_SEL(0);
+
+	clrsetbits_le32(&clk->src_dmc, clr_src_dmc, set);
+
+	/* Wait for mux change */
+	while (readl(&clk->mux_stat_dmc) & MUX_STAT_DMC_CHANGING)
+		continue;
+
+	writel (0x0110, &clk->src_top0);
+	while (readl(&clk->mux_stat_top0) != 0x11111221)
+		continue;
+
+	writel (0x00011000, &clk->src_top1);
+	while (readl(&clk->mux_stat_top1) != 0x01122110)
+		continue;
+
+	addr = (unsigned int *)CHIP_BASE;
+	value = readl(addr);
+
+	if (((value >> 8) & 0x3) != 2)
+		return;
+	
+	addr = (unsigned int *)(ITOP4412_POWER_BASE+C2C_CTRL_OFFSET);
+	value = readl(addr);
+	if ((value & 0x1) != 0)
+		return;
+
+	addr = (unsigned int *)(APB_DMC_0_BASE+DMC_PHYCONTROL0);
+	writel (0x7F10100A, addr);
+
+	addr = (unsigned int *)(APB_DMC_0_BASE+DMC_PHYCONTROL1);
+	writel (0xE0000084, addr);
+
+	addr = (unsigned int *)(APB_DMC_0_BASE+DMC_PHYCONTROL0);
+	writel (0x7F10100B, addr);
+	while (!(readl(APB_DMC_0_BASE+DMC_PHYSTATUS) & (1<<2)))
+		continue;
+
+	addr = (unsigned int *)(APB_DMC_0_BASE+DMC_PHYCONTROL1);
+	writel (0x0000008C, addr);
+	writel (0x00000084, addr);
+	while (!(readl(APB_DMC_0_BASE+DMC_PHYSTATUS) & (1<<2)))
+		continue;
+	
+	addr = (unsigned int *)(APB_DMC_1_BASE+DMC_PHYCONTROL0);
+	writel (0x7F10100A, addr);
+
+	addr = (unsigned int *)(APB_DMC_1_BASE+DMC_PHYCONTROL1);
+	writel (0xE0000084, addr);
+
+	addr = (unsigned int *)(APB_DMC_1_BASE+DMC_PHYCONTROL0);
+	writel (0x7F10100B, addr);
+	while (!(readl(APB_DMC_1_BASE+DMC_PHYSTATUS) & (1<<2)))
+		continue;
+
+	addr = (unsigned int *)(APB_DMC_1_BASE+DMC_PHYCONTROL1);
+	writel (0x0000008C, addr);
+	writel (0x00000084, addr);
+	while (!(readl(APB_DMC_1_BASE+DMC_PHYSTATUS) & (1<<2)))
+		continue;
+
+	
+	addr = (unsigned int *)(APB_DMC_0_BASE+DMC_CONCONTROL);
+	writel (0x0FFF30FA, addr);
+
+	addr = (unsigned int *)(APB_DMC_1_BASE+DMC_CONCONTROL);
+	writel (0x0FFF30FA, addr);
+
+	addr = (unsigned int *)(APB_DMC_0_BASE+DMC_MEMCONTROL);
+	writel (0x00202533, addr);
 
-	writel(CLK_SRC_CPU_VAL, &clk->src_cpu);
+	addr = (unsigned int *)(APB_DMC_1_BASE+DMC_MEMCONTROL);
+	writel (0x00202533, addr);
 
-	sdelay(0x10000);
+	// eMMC clock configuration
+	set_mmc_clk(4, 0);
 
-	writel(CLK_SRC_TOP0_VAL, &clk->src_top0);
-	writel(CLK_SRC_TOP1_VAL, &clk->src_top1);
-	writel(CLK_SRC_DMC_VAL, &clk->src_dmc);
-	writel(CLK_SRC_LEFTBUS_VAL, &clk->src_leftbus);
-	writel(CLK_SRC_RIGHTBUS_VAL, &clk->src_rightbus);
-	writel(CLK_SRC_FSYS_VAL, &clk->src_fsys);
-	writel(CLK_SRC_PERIL0_VAL, &clk->src_peril0);
-	writel(CLK_SRC_CAM_VAL, &clk->src_cam);
-	writel(CLK_SRC_MFC_VAL, &clk->src_mfc);
-	writel(CLK_SRC_G3D_VAL, &clk->src_g3d);
-	writel(CLK_SRC_LCD0_VAL, &clk->src_lcd0);
-
-	sdelay(0x10000);
-
-	writel(CLK_DIV_CPU0_VAL, &clk->div_cpu0);
-	writel(CLK_DIV_CPU1_VAL, &clk->div_cpu1);
-	writel(CLK_DIV_DMC0_VAL, &clk->div_dmc0);
-	writel(CLK_DIV_DMC1_VAL, &clk->div_dmc1);
-	writel(CLK_DIV_LEFTBUS_VAL, &clk->div_leftbus);
-	writel(CLK_DIV_RIGHTBUS_VAL, &clk->div_rightbus);
-	writel(CLK_DIV_TOP_VAL, &clk->div_top);
-	writel(CLK_DIV_FSYS1_VAL, &clk->div_fsys1);
-	writel(CLK_DIV_FSYS2_VAL, &clk->div_fsys2);
-	writel(CLK_DIV_FSYS3_VAL, &clk->div_fsys3);
-	writel(CLK_DIV_PERIL0_VAL, &clk->div_peril0);
-	writel(CLK_DIV_CAM_VAL, &clk->div_cam);
-	writel(CLK_DIV_MFC_VAL, &clk->div_mfc);
-	writel(CLK_DIV_G3D_VAL, &clk->div_g3d);
-	writel(CLK_DIV_LCD0_VAL, &clk->div_lcd0);
-
-	/* Set PLL locktime */
-	writel(PLL_LOCKTIME, &clk->apll_lock);
-	writel(PLL_LOCKTIME, &clk->mpll_lock);
-	writel(PLL_LOCKTIME, &clk->epll_lock);
-	writel(PLL_LOCKTIME, &clk->vpll_lock);
-
-	writel(APLL_CON1_VAL, &clk->apll_con1);
-	writel(APLL_CON0_VAL, &clk->apll_con0);
-	writel(MPLL_CON1_VAL, &clk->mpll_con1);
-	writel(MPLL_CON0_VAL, &clk->mpll_con0);
-	writel(EPLL_CON1_VAL, &clk->epll_con1);
-	writel(EPLL_CON0_VAL, &clk->epll_con0);
-	writel(VPLL_CON1_VAL, &clk->vpll_con1);
-	writel(VPLL_CON0_VAL, &clk->vpll_con0);
-
-	sdelay(0x30000);
+	return;
 }
diff -urN u-boot-2015.04/arch/arm/cpu/armv7/exynos/dmc_init_exynos4.c uboot_2015.04/arch/arm/cpu/armv7/exynos/dmc_init_exynos4.c
--- u-boot-2015.04/arch/arm/cpu/armv7/exynos/dmc_init_exynos4.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/arch/arm/cpu/armv7/exynos/dmc_init_exynos4.c	2017-11-29 16:39:36.000000000 -0800
@@ -26,7 +26,7 @@
 #include <config.h>
 #include <asm/arch/dmc.h>
 #include "common_setup.h"
-#include "exynos4_setup.h"
+#include "itop-4412_setup.h"
 
 struct mem_timings mem = {
 	.direct_cmd_msr = {
@@ -77,6 +77,7 @@
 	}
 }
 
+#if 0
 static void dmc_init(struct exynos4_dmc *dmc)
 {
 	/*
@@ -164,50 +165,88 @@
 	/* turn on DREX0, DREX1 */
 	writel((mem.concontrol | AREF_EN), &dmc->concontrol);
 }
+#endif
+
+static void dmc_init(struct exynos4_dmc *dmc)
+{
+	writel (0, &dmc->phycontrol2);
+	writel (0, &dmc->phycontrol3);
+	writel (0xE3855503, &dmc->phyzqcontrol);
+	writel (0x71101008, &dmc->phycontrol0);
+	writel (0x7110100A, &dmc->phycontrol0);
+	writel (0x20000086, &dmc->phycontrol1);
+	writel (0x71101008, &dmc->phycontrol0);
+	writel (0x2000008E, &dmc->phycontrol1);
+	writel (0x20000086, &dmc->phycontrol1);
+	writel (0x2000008E, &dmc->phycontrol1);
+	writel (0x20000086, &dmc->phycontrol1);
+	writel (0x0FFF30CA, &dmc->concontrol);
+	writel (0x00302600, &dmc->memcontrol);
+	writel (0x40801333, &dmc->memconfig0);
+	
+	writel (0x80000000|0x7, &dmc->ivcontrol);
+	writel (0x64000000, &dmc->prechconfig);
+	writel (0x9C4000FF, &dmc->phycontrol0);
+
+	// timing config
+	writel (0x000000BB, &dmc->timingref);
+	writel (0x7846654F, &dmc->timingrow);
+	writel (0x46400506, &dmc->timingdata);
+	writel (0x52000A3C, &dmc->timingpower);
+
+	sdelay (0x64);
+
+	writel (0x07000000, &dmc->directcmd);
+	sdelay (0x19000);
+
+	writel (0x00020000, &dmc->directcmd);
+	sdelay (0x2700);
+
+	writel (0x00030000, &dmc->directcmd);
+	sdelay (0x3f0);
+
+	writel (0x00010000, &dmc->directcmd);
+	writel (0x00000100, &dmc->directcmd);
+	sdelay(0x3f0);
+
+	writel (0x00000420, &dmc->directcmd);
+	sdelay(0x3f0);
+
+	writel (0x0A000000, &dmc->directcmd);
+	sdelay (0x3f0);
+
+	writel (0x7110100A, &dmc->phycontrol0);
+	writel (0x20000086, &dmc->phycontrol1);
+	writel (0x7110100B, &dmc->phycontrol0);
+
+	while (!(readl(&dmc->phystatus) & (1<<2)))
+		continue;
+
+	writel (0x2000008E, &dmc->phycontrol1);
+	writel (0x20000086, &dmc->phycontrol1);
+
+	while (!(readl(&dmc->phystatus) & (1<<2)))
+		continue;
+
+	unsigned int value;
+
+	value = readl (&dmc->concontrol);
+	value |= (1<<5);
+	writel (value, &dmc->concontrol);
+
+	value = readl (&dmc->memcontrol);
+	value |= ((1<<4) | (1<<1) | (1<<0));
+	writel (value, &dmc->memcontrol);
+}
 
 void mem_ctrl_init(int reset)
 {
-	struct exynos4_dmc *dmc;
+	struct exynos4_dmc *dmc; 
 
-	/*
-	 * Async bridge configuration at CPU_core:
-	 * 1: half_sync
-	 * 0: full_sync
-	 */
-	writel(1, ASYNC_CONFIG);
-#ifdef CONFIG_ORIGEN
-	/* Interleave: 2Bit, Interleave_bit1: 0x15, Interleave_bit0: 0x7 */
-	writel(APB_SFR_INTERLEAVE_CONF_VAL, EXYNOS4_MIU_BASE +
-		APB_SFR_INTERLEAVE_CONF_OFFSET);
-	/* Update MIU Configuration */
-	writel(APB_SFR_ARBRITATION_CONF_VAL, EXYNOS4_MIU_BASE +
-		APB_SFR_ARBRITATION_CONF_OFFSET);
-#else
-	writel(APB_SFR_INTERLEAVE_CONF_VAL, EXYNOS4_MIU_BASE +
-		APB_SFR_INTERLEAVE_CONF_OFFSET);
-	writel(INTERLEAVE_ADDR_MAP_START_ADDR, EXYNOS4_MIU_BASE +
-		ABP_SFR_INTERLEAVE_ADDRMAP_START_OFFSET);
-	writel(INTERLEAVE_ADDR_MAP_END_ADDR, EXYNOS4_MIU_BASE +
-		ABP_SFR_INTERLEAVE_ADDRMAP_END_OFFSET);
-	writel(INTERLEAVE_ADDR_MAP_EN, EXYNOS4_MIU_BASE +
-		ABP_SFR_SLV_ADDRMAP_CONF_OFFSET);
-#ifdef CONFIG_MIU_LINEAR
-	writel(SLAVE0_SINGLE_ADDR_MAP_START_ADDR, EXYNOS4_MIU_BASE +
-		ABP_SFR_SLV0_SINGLE_ADDRMAP_START_OFFSET);
-	writel(SLAVE0_SINGLE_ADDR_MAP_END_ADDR, EXYNOS4_MIU_BASE +
-		ABP_SFR_SLV0_SINGLE_ADDRMAP_END_OFFSET);
-	writel(SLAVE1_SINGLE_ADDR_MAP_START_ADDR, EXYNOS4_MIU_BASE +
-		ABP_SFR_SLV1_SINGLE_ADDRMAP_START_OFFSET);
-	writel(SLAVE1_SINGLE_ADDR_MAP_END_ADDR, EXYNOS4_MIU_BASE +
-		ABP_SFR_SLV1_SINGLE_ADDRMAP_END_OFFSET);
-	writel(APB_SFR_SLV_ADDR_MAP_CONF_VAL, EXYNOS4_MIU_BASE +
-		ABP_SFR_SLV_ADDRMAP_CONF_OFFSET);
-#endif
-#endif
 	/* DREX0 */
 	dmc = (struct exynos4_dmc *)samsung_get_base_dmc_ctrl();
 	dmc_init(dmc);
-	dmc = (struct exynos4_dmc *)(samsung_get_base_dmc_ctrl()
-					+ DMC_OFFSET);
+
+	dmc = (struct exynos4_dmc *)(0x10610000);
 	dmc_init(dmc);
 }
diff -urN u-boot-2015.04/arch/arm/cpu/armv7/exynos/exynos4_setup.h uboot_2015.04/arch/arm/cpu/armv7/exynos/exynos4_setup.h
--- u-boot-2015.04/arch/arm/cpu/armv7/exynos/exynos4_setup.h	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/arch/arm/cpu/armv7/exynos/exynos4_setup.h	2017-11-29 16:39:36.000000000 -0800
@@ -43,13 +43,13 @@
 					| (MUX_APLL_SEL_MOUTMPLLFOUT << 0))
 
 /* CLK_DIV_CPU0 */
-#define APLL_RATIO		0x0
+#define APLL_RATIO			0x0
 #define PCLK_DBG_RATIO		0x1
-#define ATB_RATIO		0x3
+#define ATB_RATIO			0x3
 #define PERIPH_RATIO		0x3
 #define COREM1_RATIO		0x7
 #define COREM0_RATIO		0x3
-#define CORE_RATIO		0x0
+#define CORE_RATIO			0x0
 #define CLK_DIV_CPU0_VAL	((APLL_RATIO << 24) \
 				| (PCLK_DBG_RATIO << 20) \
 				| (ATB_RATIO << 16) \
@@ -358,12 +358,12 @@
 #define MPLL_MDIV		0xC8
 #define MPLL_PDIV		0x6
 #define MPLL_SDIV		0x1
-#define MPLL_CON0_VAL		SET_PLL(MPLL_MDIV, MPLL_PDIV, MPLL_SDIV)
+#define MPLL_CON0_VAL	SET_PLL(MPLL_MDIV, MPLL_PDIV, MPLL_SDIV)
 
 /* MPLL_CON1 */
-#define MPLL_AFC_ENB		0x0
+#define MPLL_AFC_ENB	0x0
 #define MPLL_AFC		0x1C
-#define MPLL_CON1_VAL		((MPLL_AFC_ENB << 31) | (MPLL_AFC << 0))
+#define MPLL_CON1_VAL	((MPLL_AFC_ENB << 31) | (MPLL_AFC << 0))
 
 /* EPLL_CON0 */
 #define EPLL_MDIV		0x30
diff -urN u-boot-2015.04/arch/arm/cpu/armv7/exynos/itop-4412_setup.h uboot_2015.04/arch/arm/cpu/armv7/exynos/itop-4412_setup.h
--- u-boot-2015.04/arch/arm/cpu/armv7/exynos/itop-4412_setup.h	1969-12-31 16:00:00.000000000 -0800
+++ uboot_2015.04/arch/arm/cpu/armv7/exynos/itop-4412_setup.h	2017-11-29 17:16:03.000000000 -0800
@@ -0,0 +1,768 @@
+/*
+ * Machine Specific Values for EXYNOS4012 based board
+ *
+ * Copyright (C) 2011 Samsung Electronics
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef _ITOP-4412_SETUP_H
+#define _ITOP-4412_SETUP_H
+
+#include <config.h>
+#include <asm/arch/cpu.h>
+
+#ifdef CONFIG_CLK_800_330_165
+#define DRAM_CLK_330
+#endif
+#ifdef CONFIG_CLK_1000_200_200
+#define DRAM_CLK_200
+#endif
+#ifdef CONFIG_CLK_1000_330_165
+#define DRAM_CLK_330
+#endif
+#ifdef CONFIG_CLK_1000_400_200
+#define DRAM_CLK_400
+#endif
+
+#define CHIP_BASE				0x10000000
+#define ITOP4412_POWER_BASE	0x10020000
+#define C2C_CTRL_OFFSET			0x24
+#define APB_DMC_0_BASE			0x10600000 //0x10400000 
+#define APB_DMC_1_BASE			0x10610000//0x10410000 
+
+#define DMC_CONCONTROL 			0x00
+#define DMC_MEMCONTROL 			0x04
+#define DMC_MEMCONFIG0 			0x08
+#define DMC_MEMCONFIG1 			0x0C
+#define DMC_DIRECTCMD 			0x10
+#define DMC_PRECHCONFIG 		0x14
+#define DMC_PHYCONTROL0 		0x18
+#define DMC_PHYCONTROL1 		0x1C
+#define DMC_PHYCONTROL2 		0x20
+#define DMC_PWRDNCONFIG 		0x28
+#define DMC_TIMINGAREF 			0x30
+#define DMC_TIMINGROW 			0x34
+#define DMC_TIMINGDATA 			0x38
+#define DMC_TIMINGPOWER 		0x3C
+#define DMC_PHYSTATUS 			0x40
+#define DMC_PHYZQCONTROL 		0x44
+#define DMC_CHIP0STATUS 		0x48
+#define DMC_CHIP1STATUS 		0x4C
+#define DMC_AREFSTATUS 			0x50
+#define DMC_MRSTATUS 			0x54
+#define DMC_PHYTEST0 			0x58
+#define DMC_PHYTEST1 			0x5C
+#define DMC_QOSCONTROL0 		0x60
+#define DMC_QOSCONFIG0 			0x64
+#define DMC_QOSCONTROL1 		0x68
+#define DMC_QOSCONFIG1 			0x6C
+#define DMC_QOSCONTROL2 		0x70
+#define DMC_QOSCONFIG2 			0x74
+#define DMC_QOSCONTROL3 		0x78
+#define DMC_QOSCONFIG3 			0x7C
+#define DMC_QOSCONTROL4 		0x80
+#define DMC_QOSCONFIG4 			0x84
+#define DMC_QOSCONTROL5 		0x88
+#define DMC_QOSCONFIG5 			0x8C
+#define DMC_QOSCONTROL6 		0x90
+#define DMC_QOSCONFIG6 			0x94
+#define DMC_QOSCONTROL7 		0x98
+#define DMC_QOSCONFIG7 			0x9C
+#define DMC_QOSCONTROL8 		0xA0
+#define DMC_QOSCONFIG8 			0xA4
+#define DMC_QOSCONTROL9 		0xA8
+#define DMC_QOSCONFIG9 			0xAC
+#define DMC_QOSCONTROL10 		0xB0
+#define DMC_QOSCONFIG10 		0xB4
+#define DMC_QOSCONTROL11 		0xB8
+#define DMC_QOSCONFIG11 		0xBC
+#define DMC_QOSCONTROL12 		0xC0
+#define DMC_QOSCONFIG12 		0xC4
+#define DMC_QOSCONTROL13 		0xC8
+#define DMC_QOSCONFIG13 		0xCC
+#define DMC_QOSCONTROL14 		0xD0
+#define DMC_QOSCONFIG14 		0xD4
+#define DMC_QOSCONTROL15 		0xD8
+#define DMC_QOSCONFIG15 		0xDC
+#define DMC_IVCONTROL 			0xF0
+
+
+/* Bus Configuration Register Address */
+#define ASYNC_CONFIG		0x10010350
+
+/* A/M PLL_CON0 */
+#define SDIV(x)                 ((x) & 0x7)
+#define PDIV(x)                 (((x) & 0x3f) << 8)
+#define MDIV(x)                 (((x) & 0x3ff) << 16)
+#define FSEL(x)                 (((x) & 0x1) << 27)
+#define PLL_LOCKED_BIT          (0x1 << 29)
+#define PLL_ENABLE(x)           (((x) & 0x1) << 31)
+
+/* CLK_SRC_CPU */
+#define MUX_APLL_SEL(x)         ((x) & 0x1)
+#define MUX_CORE_SEL(x)         (((x) & 0x1) << 16)
+#define MUX_HPM_SEL(x)          (((x) & 0x1) << 20)
+#define MUX_MPLL_USER_SEL_C(x)  (((x) & 0x1) << 24)
+
+#define MUX_STAT_CHANGING       0x4
+
+/* CLK_MUX_STAT_CPU */
+#define APLL_SEL(x)             ((x) & 0x7)
+#define CORE_SEL(x)             (((x) & 0x7) << 16)
+#define HPM_SEL(x)              (((x) & 0x7) << 20)
+#define MPLL_USER_SEL_C(x)      (((x) & 0x7) << 24)
+#define MUX_STAT_CPU_CHANGING   (APLL_SEL(MUX_STAT_CHANGING) | \
+				CORE_SEL(MUX_STAT_CHANGING) | \
+				HPM_SEL(MUX_STAT_CHANGING) | \
+				MPLL_USER_SEL_C(MUX_STAT_CHANGING))
+
+/* CLK_DIV_CPU0 */
+#define CORE_RATIO(x)           ((x) & 0x7)
+#define COREM0_RATIO(x)         (((x) & 0x7) << 4)
+#define COREM1_RATIO(x)         (((x) & 0x7) << 8)
+#define PERIPH_RATIO(x)         (((x) & 0x7) << 12)
+#define ATB_RATIO(x)            (((x) & 0x7) << 16)
+#define PCLK_DBG_RATIO(x)       (((x) & 0x7) << 20)
+#define APLL_RATIO(x)           (((x) & 0x7) << 24)
+#define CORE2_RATIO(x)          (((x) & 0x7) << 28)
+
+/* CLK_DIV_STAT_CPU0 */
+#define DIV_CORE(x)             ((x) & 0x1)
+#define DIV_COREM0(x)           (((x) & 0x1) << 4)
+#define DIV_COREM1(x)           (((x) & 0x1) << 8)
+#define DIV_PERIPH(x)           (((x) & 0x1) << 12)
+#define DIV_ATB(x)              (((x) & 0x1) << 16)
+#define DIV_PCLK_DBG(x)         (((x) & 0x1) << 20)
+#define DIV_APLL(x)             (((x) & 0x1) << 24)
+#define DIV_CORE2(x)            (((x) & 0x1) << 28)
+
+#define DIV_STAT_CHANGING       0x1
+#define DIV_STAT_CPU0_CHANGING  (DIV_CORE(DIV_STAT_CHANGING) | \
+				DIV_COREM0(DIV_STAT_CHANGING) | \
+				DIV_COREM1(DIV_STAT_CHANGING) | \
+				DIV_PERIPH(DIV_STAT_CHANGING) | \
+				DIV_ATB(DIV_STAT_CHANGING) | \
+				DIV_PCLK_DBG(DIV_STAT_CHANGING) | \
+				DIV_APLL(DIV_STAT_CHANGING) | \
+				DIV_CORE2(DIV_STAT_CHANGING))
+
+/* CLK_DIV_CPU1 */
+#define COPY_RATIO(x)           ((x) & 0x7)
+#define HPM_RATIO(x)            (((x) & 0x7) << 4)
+#define CORES_RATIO(x)          (((x) & 0x7) << 8)
+
+/* CLK_DIV_STAT_CPU1 */
+#define DIV_COPY(x)             ((x) & 0x7)
+#define DIV_HPM(x)              (((x) & 0x1) << 4)
+#define DIV_CORES(x)            (((x) & 0x1) << 8)
+
+#define DIV_STAT_CPU1_CHANGING	(DIV_COPY(DIV_STAT_CHANGING) | \
+				DIV_HPM(DIV_STAT_CHANGING) | \
+				DIV_CORES(DIV_STAT_CHANGING))
+
+/* CLK_SRC_DMC */
+#define MUX_C2C_SEL(x)		((x) & 0x1)
+#define MUX_DMC_BUS_SEL(x)	(((x) & 0x1) << 4)
+#define MUX_DPHY_SEL(x)		(((x) & 0x1) << 8)
+#define MUX_MPLL_SEL(x)		(((x) & 0x1) << 12)
+#define MUX_PWI_SEL(x)		(((x) & 0xf) << 16)
+#define MUX_G2D_ACP0_SEL(x)	(((x) & 0x1) << 20)
+#define MUX_G2D_ACP1_SEL(x)	(((x) & 0x1) << 24)
+#define MUX_G2D_ACP_SEL(x)	(((x) & 0x1) << 28)
+
+/* CLK_MUX_STAT_DMC */
+#define C2C_SEL(x)		(((x)) & 0x7)
+#define DMC_BUS_SEL(x)		(((x) & 0x7) << 4)
+#define DPHY_SEL(x)		(((x) & 0x7) << 8)
+#define MPLL_SEL(x)		(((x) & 0x7) << 12)
+/* #define PWI_SEL(x)		(((x) & 0xf) << 16)  - Reserved */
+#define G2D_ACP0_SEL(x)		(((x) & 0x7) << 20)
+#define G2D_ACP1_SEL(x)		(((x) & 0x7) << 24)
+#define G2D_ACP_SEL(x)		(((x) & 0x7) << 28)
+
+#define MUX_STAT_DMC_CHANGING	(C2C_SEL(MUX_STAT_CHANGING) | \
+				DMC_BUS_SEL(MUX_STAT_CHANGING) | \
+				DPHY_SEL(MUX_STAT_CHANGING) | \
+				MPLL_SEL(MUX_STAT_CHANGING) |\
+				G2D_ACP0_SEL(MUX_STAT_CHANGING) | \
+				G2D_ACP1_SEL(MUX_STAT_CHANGING) | \
+				G2D_ACP_SEL(MUX_STAT_CHANGING))
+
+/* CLK_DIV_DMC0 */
+#define ACP_RATIO(x)		((x) & 0x7)
+#define ACP_PCLK_RATIO(x)	(((x) & 0x7) << 4)
+#define DPHY_RATIO(x)		(((x) & 0x7) << 8)
+#define DMC_RATIO(x)		(((x) & 0x7) << 12)
+#define DMCD_RATIO(x)		(((x) & 0x7) << 16)
+#define DMCP_RATIO(x)		(((x) & 0x7) << 20)
+#define COPY2_RATIO(x)		(((x) & 0x7) << 24)
+#define CORE_TIMERS_RATIO(x)	(((x) & 0x7) << 28)
+
+/* CLK_DIV_STAT_DMC0 */
+#define DIV_ACP(x)		((x) & 0x1)
+#define DIV_ACP_PCLK(x)		(((x) & 0x1) << 4)
+#define DIV_DPHY(x)		(((x) & 0x1) << 8)
+#define DIV_DMC(x)		(((x) & 0x1) << 12)
+#define DIV_DMCD(x)		(((x) & 0x1) << 16)
+#define DIV_DMCP(x)		(((x) & 0x1) << 20)
+
+#define DIV_STAT_DMC0_CHANGING	(DIV_ACP(DIV_STAT_CHANGING) | \
+				DIV_ACP_PCLK(DIV_STAT_CHANGING) | \
+				DIV_DPHY(DIV_STAT_CHANGING) | \
+				DIV_DMC(DIV_STAT_CHANGING) | \
+				DIV_DMCD(DIV_STAT_CHANGING) | \
+				DIV_DMCP(DIV_STAT_CHANGING))
+
+/* CLK_DIV_DMC1 */
+#define G2D_ACP_RATIO(x)	((x) & 0xf)
+#define C2C_RATIO(x)		(((x) & 0x7) << 4)
+#define PWI_RATIO(x)		(((x) & 0xf) << 8)
+#define C2C_ACLK_RATIO(x)	(((x) & 0x7) << 12)
+#define DVSEM_RATIO(x)		(((x) & 0x7f) << 16)
+#define DPM_RATIO(x)		(((x) & 0x7f) << 24)
+
+/* CLK_DIV_STAT_DMC1 */
+#define DIV_G2D_ACP(x)		((x) & 0x1)
+#define DIV_C2C(x)		(((x) & 0x1) << 4)
+#define DIV_PWI(x)		(((x) & 0x1) << 8)
+#define DIV_C2C_ACLK(x)		(((x) & 0x1) << 12)
+#define DIV_DVSEM(x)		(((x) & 0x1) << 16)
+#define DIV_DPM(x)		(((x) & 0x1) << 24)
+
+#define DIV_STAT_DMC1_CHANGING	(DIV_G2D_ACP(DIV_STAT_CHANGING) | \
+				DIV_C2C(DIV_STAT_CHANGING) | \
+				DIV_PWI(DIV_STAT_CHANGING) | \
+				DIV_C2C_ACLK(DIV_STAT_CHANGING) | \
+				DIV_DVSEM(DIV_STAT_CHANGING) | \
+				DIV_DPM(DIV_STAT_CHANGING))
+
+/* CLK_SRC_TOP0 */
+#define MUX_ONENAND_SEL_ACLK_133	0x0
+#define MUX_ONENAND_SEL_ACLK_160	0x1
+#define MUX_ACLK_133_SEL_SCLKMPLL	0x0
+#define MUX_ACLK_133_SEL_SCLKAPLL	0x1
+#define MUX_ACLK_160_SEL_SCLKMPLL	0x0
+#define MUX_ACLK_160_SEL_SCLKAPLL	0x1
+#define MUX_ACLK_100_SEL_SCLKMPLL	0x0
+#define MUX_ACLK_100_SEL_SCLKAPLL	0x1
+#define MUX_ACLK_200_SEL_SCLKMPLL	0x0
+#define MUX_ACLK_200_SEL_SCLKAPLL	0x1
+#define MUX_VPLL_SEL_FINPLL		0x0
+#define MUX_VPLL_SEL_FOUTVPLL		0x1
+#define MUX_EPLL_SEL_FINPLL		0x0
+#define MUX_EPLL_SEL_FOUTEPLL		0x1
+#define MUX_ONENAND_1_SEL_MOUTONENAND	0x0
+#define MUX_ONENAND_1_SEL_SCLKVPLL	0x1
+#define CLK_SRC_TOP0_VAL		((MUX_ONENAND_SEL_ACLK_133 << 28) \
+					| (MUX_ACLK_133_SEL_SCLKMPLL << 24) \
+					| (MUX_ACLK_160_SEL_SCLKMPLL << 20) \
+					| (MUX_ACLK_100_SEL_SCLKMPLL << 16) \
+					| (MUX_ACLK_200_SEL_SCLKMPLL << 12) \
+					| (MUX_VPLL_SEL_FINPLL << 8) \
+					| (MUX_EPLL_SEL_FINPLL << 4)\
+					| (MUX_ONENAND_1_SEL_MOUTONENAND << 0))
+
+/* CLK_SRC_TOP1 */
+#define VPLLSRC_SEL_FINPLL	0x0
+#define VPLLSRC_SEL_SCLKHDMI24M	0x1
+#define CLK_SRC_TOP1_VAL	(VPLLSRC_SEL_FINPLL)
+
+/* CLK_DIV_TOP */
+#define ONENAND_RATIO		0x0
+#define ACLK_133_RATIO		0x5
+#define ACLK_160_RATIO		0x4
+#define ACLK_100_RATIO		0x7
+#define ACLK_200_RATIO		0x3
+#define CLK_DIV_TOP_VAL		((ONENAND_RATIO << 16)	\
+				| (ACLK_133_RATIO << 12)\
+				| (ACLK_160_RATIO << 8)	\
+				| (ACLK_100_RATIO << 4)	\
+				| (ACLK_200_RATIO << 0))
+
+/* CLK_SRC_LEFTBUS */
+#define MUX_GDL_SEL_SCLKMPLL	0x0
+#define MUX_GDL_SEL_SCLKAPLL	0x1
+#define CLK_SRC_LEFTBUS_VAL	(MUX_GDL_SEL_SCLKMPLL)
+
+/* CLK_DIV_LEFTBUS */
+#define GPL_RATIO		0x1
+#define GDL_RATIO		0x3
+#define CLK_DIV_LEFTBUS_VAL	((GPL_RATIO << 4) | (GDL_RATIO))
+
+/* CLK_SRC_RIGHTBUS */
+#define MUX_GDR_SEL_SCLKMPLL	0x0
+#define MUX_GDR_SEL_SCLKAPLL	0x1
+#define CLK_SRC_RIGHTBUS_VAL	(MUX_GDR_SEL_SCLKMPLL)
+
+/* CLK_DIV_RIGHTBUS */
+#define GPR_RATIO		0x1
+#define GDR_RATIO		0x3
+#define CLK_DIV_RIGHTBUS_VAL	((GPR_RATIO << 4) | (GDR_RATIO))
+
+/* CLK_SRS_FSYS: 6 = SCLKMPLL */
+#define SATA_SEL_SCLKMPLL	0
+#define SATA_SEL_SCLKAPLL	1
+
+#define MMC_SEL_XXTI		0
+#define MMC_SEL_XUSBXTI		1
+#define MMC_SEL_SCLK_HDMI24M	2
+#define MMC_SEL_SCLK_USBPHY0	3
+#define MMC_SEL_SCLK_USBPHY1	4
+#define MMC_SEL_SCLK_HDMIPHY	5
+#define MMC_SEL_SCLKMPLL	6
+#define MMC_SEL_SCLKEPLL	7
+#define MMC_SEL_SCLKVPLL	8
+
+#define MMCC0_SEL		MMC_SEL_SCLKMPLL
+#define MMCC1_SEL		MMC_SEL_SCLKMPLL
+#define MMCC2_SEL		MMC_SEL_SCLKMPLL
+#define MMCC3_SEL		MMC_SEL_SCLKMPLL
+#define MMCC4_SEL		MMC_SEL_SCLKMPLL
+#define CLK_SRC_FSYS_VAL	((SATA_SEL_SCLKMPLL << 24) \
+				| (MMCC4_SEL << 16) \
+				| (MMCC3_SEL << 12) \
+				| (MMCC2_SEL << 8) \
+				| (MMCC1_SEL << 4) \
+				| (MMCC0_SEL << 0))
+
+/* SCLK_MMC[0-4] = MOUTMMC[0-4]/(MMC[0-4]_RATIO + 1)/(MMC[0-4]_PRE_RATIO +1) */
+#if 0
+/* CLK_DIV_FSYS1 */
+#define MMC0_RATIO		0xF
+#define MMC0_PRE_RATIO		0x0
+#define MMC1_RATIO		0xF
+#define MMC1_PRE_RATIO		0x0
+#define CLK_DIV_FSYS1_VAL	((MMC1_PRE_RATIO << 24) \
+				| (MMC1_RATIO << 16) \
+				| (MMC0_PRE_RATIO << 8) \
+				| (MMC0_RATIO << 0))
+
+/* CLK_DIV_FSYS2 */
+#define MMC2_RATIO		0xF
+#define MMC2_PRE_RATIO		0x0
+#define MMC3_RATIO		0xF
+#define MMC3_PRE_RATIO		0x0
+#define CLK_DIV_FSYS2_VAL	((MMC3_PRE_RATIO << 24) \
+				| (MMC3_RATIO << 16) \
+				| (MMC2_PRE_RATIO << 8) \
+				| (MMC2_RATIO << 0))
+
+/* CLK_DIV_FSYS3 */
+#define MMC4_RATIO		0xF
+#define MMC4_PRE_RATIO		0x0
+#define CLK_DIV_FSYS3_VAL	((MMC4_PRE_RATIO << 8) \
+				| (MMC4_RATIO << 0))
+
+/* CLK_SRC_PERIL0 */
+#define UART_SEL_XXTI		0
+#define UART_SEL_XUSBXTI	1
+#define UART_SEL_SCLK_HDMI24M	2
+#define UART_SEL_SCLK_USBPHY0	3
+#define UART_SEL_SCLK_USBPHY1	4
+#define UART_SEL_SCLK_HDMIPHY	5
+#define UART_SEL_SCLKMPLL	6
+#define UART_SEL_SCLKEPLL	7
+#define UART_SEL_SCLKVPLL	8
+
+#define UART0_SEL		UART_SEL_SCLKMPLL
+#define UART1_SEL		UART_SEL_SCLKMPLL
+#define UART2_SEL		UART_SEL_SCLKMPLL
+#define UART3_SEL		UART_SEL_SCLKMPLL
+#define UART4_SEL		UART_SEL_SCLKMPLL
+#define CLK_SRC_PERIL0_VAL	((UART4_SEL << 16) \
+				| (UART3_SEL << 12) \
+				| (UART2_SEL << 8) \
+				| (UART1_SEL << 4) \
+				| (UART0_SEL << 0))
+
+/* SCLK_UART[0-4] = MOUTUART[0-4]/(UART[0-4]_RATIO + 1) */
+/* CLK_DIV_PERIL0 */
+#define UART0_RATIO		7
+#define UART1_RATIO		7
+#define UART2_RATIO		7
+#define UART3_RATIO		7
+#define UART4_RATIO		7
+#define CLK_DIV_PERIL0_VAL	((UART4_RATIO << 16) \
+				| (UART3_RATIO << 12) \
+				| (UART2_RATIO << 8) \
+				| (UART1_RATIO << 4) \
+				| (UART0_RATIO << 0))
+#else
+/* CLK_DIV_FSYS1 */
+#define MMC0_RATIO(x)		((x) & 0xf)
+#define MMC0_PRE_RATIO(x)	(((x) & 0xff) << 8)
+#define MMC1_RATIO(x)		(((x) & 0xf) << 16)
+#define MMC1_PRE_RATIO(x)	(((x) & 0xff) << 24)
+
+/* CLK_DIV_STAT_FSYS1 */
+#define DIV_MMC0(x)		((x) & 1)
+#define DIV_MMC0_PRE(x)		(((x) & 1) << 8)
+#define DIV_MMC1(x)		(((x) & 1) << 16)
+#define DIV_MMC1_PRE(x)		(((x) & 1) << 24)
+
+#define DIV_STAT_FSYS1_CHANGING		(DIV_MMC0(DIV_STAT_CHANGING) | \
+					DIV_MMC0_PRE(DIV_STAT_CHANGING) | \
+					DIV_MMC1(DIV_STAT_CHANGING) | \
+					DIV_MMC1_PRE(DIV_STAT_CHANGING))
+
+/* CLK_DIV_FSYS2 */
+#define MMC2_RATIO(x)		((x) & 0xf)
+#define MMC2_PRE_RATIO(x)	(((x) & 0xff) << 8)
+#define MMC3_RATIO(x)		(((x) & 0xf) << 16)
+#define MMC3_PRE_RATIO(x)	(((x) & 0xff) << 24)
+
+/* CLK_DIV_STAT_FSYS2 */
+#define DIV_MMC2(x)		((x) & 0x1)
+#define DIV_MMC2_PRE(x)		(((x) & 0x1) << 8)
+#define DIV_MMC3(x)		(((x) & 0x1) << 16)
+#define DIV_MMC3_PRE(x)		(((x) & 0x1) << 24)
+
+#define DIV_STAT_FSYS2_CHANGING		(DIV_MMC2(DIV_STAT_CHANGING) | \
+					DIV_MMC2_PRE(DIV_STAT_CHANGING) | \
+					DIV_MMC3(DIV_STAT_CHANGING) | \
+					DIV_MMC3_PRE(DIV_STAT_CHANGING))
+
+/* CLK_DIV_FSYS3 */
+#define MMC4_RATIO(x)		((x) & 0x7)
+#define MMC4_PRE_RATIO(x)	(((x) & 0xff) << 8)
+
+/* CLK_DIV_STAT_FSYS3 */
+#define DIV_MMC4(x)		((x) & 0x1)
+#define DIV_MMC4_PRE(x)		(((x) & 0x1) << 8)
+
+#define DIV_STAT_FSYS3_CHANGING		(DIV_MMC4(DIV_STAT_CHANGING) | \
+					DIV_MMC4_PRE(DIV_STAT_CHANGING))
+
+/* Set CLK_SRC_PERIL0 */
+#define UART4_SEL(x)		(((x) & 0xf) << 16)
+#define UART3_SEL(x)		(((x) & 0xf) << 12)
+#define UART2_SEL(x)		(((x) & 0xf) << 8)
+#define UART1_SEL(x)		(((x) & 0xf) << 4)
+#define UART0_SEL(x)		((x) & 0xf)
+
+/* Set CLK_DIV_PERIL0 */
+#define UART4_RATIO(x)		(((x) & 0xf) << 16)
+#define UART3_RATIO(x)		(((x) & 0xf) << 12)
+#define UART2_RATIO(x)		(((x) & 0xf) << 8)
+#define UART1_RATIO(x)		(((x) & 0xf) << 4)
+#define UART0_RATIO(x)		((x) & 0xf)
+
+/* Set CLK_DIV_STAT_PERIL0 */
+#define DIV_UART4(x)		(((x) & 0x1) << 16)
+#define DIV_UART3(x)		(((x) & 0x1) << 12)
+#define DIV_UART2(x)		(((x) & 0x1) << 8)
+#define DIV_UART1(x)		(((x) & 0x1) << 4)
+#define DIV_UART0(x)		((x) & 0x1)
+
+#define DIV_STAT_PERIL0_CHANGING	(DIV_UART4(DIV_STAT_CHANGING) | \
+					DIV_UART3(DIV_STAT_CHANGING) | \
+					DIV_UART2(DIV_STAT_CHANGING) | \
+					DIV_UART1(DIV_STAT_CHANGING) | \
+					DIV_UART0(DIV_STAT_CHANGING))
+#endif
+
+/* Clock Source CAM/FIMC */
+/* CLK_SRC_CAM */
+#define CAM0_SEL_XUSBXTI	1
+#define CAM1_SEL_XUSBXTI	1
+#define CSIS0_SEL_XUSBXTI	1
+#define CSIS1_SEL_XUSBXTI	1
+
+#define FIMC_SEL_SCLKMPLL	6
+#define FIMC0_LCLK_SEL		FIMC_SEL_SCLKMPLL
+#define FIMC1_LCLK_SEL		FIMC_SEL_SCLKMPLL
+#define FIMC2_LCLK_SEL		FIMC_SEL_SCLKMPLL
+#define FIMC3_LCLK_SEL		FIMC_SEL_SCLKMPLL
+
+#define CLK_SRC_CAM_VAL		((CSIS1_SEL_XUSBXTI << 28) \
+				| (CSIS0_SEL_XUSBXTI << 24) \
+				| (CAM1_SEL_XUSBXTI << 20) \
+				| (CAM0_SEL_XUSBXTI << 16) \
+				| (FIMC3_LCLK_SEL << 12) \
+				| (FIMC2_LCLK_SEL << 8) \
+				| (FIMC1_LCLK_SEL << 4) \
+				| (FIMC0_LCLK_SEL << 0))
+
+/* SCLK CAM */
+/* CLK_DIV_CAM */
+#define FIMC0_LCLK_RATIO	4
+#define FIMC1_LCLK_RATIO	4
+#define FIMC2_LCLK_RATIO	4
+#define FIMC3_LCLK_RATIO	4
+#define CLK_DIV_CAM_VAL		((FIMC3_LCLK_RATIO << 12) \
+				| (FIMC2_LCLK_RATIO << 8) \
+				| (FIMC1_LCLK_RATIO << 4) \
+				| (FIMC0_LCLK_RATIO << 0))
+
+/* SCLK MFC */
+/* CLK_SRC_MFC */
+#define MFC_SEL_MPLL		0
+#define MOUTMFC_0		0
+#define MFC_SEL			MOUTMFC_0
+#define MFC_0_SEL		MFC_SEL_MPLL
+#define CLK_SRC_MFC_VAL		((MFC_SEL << 8) | (MFC_0_SEL))
+
+
+/* CLK_DIV_MFC */
+#define MFC_RATIO		3
+#define CLK_DIV_MFC_VAL		(MFC_RATIO)
+
+/* SCLK G3D */
+/* CLK_SRC_G3D */
+#define G3D_SEL_MPLL		0
+#define MOUTG3D_0		0
+#define G3D_SEL			MOUTG3D_0
+#define G3D_0_SEL		G3D_SEL_MPLL
+#define CLK_SRC_G3D_VAL		((G3D_SEL << 8) | (G3D_0_SEL))
+
+/* CLK_DIV_G3D */
+#define G3D_RATIO		1
+#define CLK_DIV_G3D_VAL		(G3D_RATIO)
+
+/* SCLK LCD0 */
+/* CLK_SRC_LCD0 */
+#define FIMD_SEL_SCLKMPLL	6
+#define MDNIE0_SEL_XUSBXTI	1
+#define MDNIE_PWM0_SEL_XUSBXTI	1
+#define MIPI0_SEL_XUSBXTI	1
+#define CLK_SRC_LCD0_VAL	((MIPI0_SEL_XUSBXTI << 12) \
+				| (MDNIE_PWM0_SEL_XUSBXTI << 8) \
+				| (MDNIE0_SEL_XUSBXTI << 4) \
+				| (FIMD_SEL_SCLKMPLL << 0))
+
+/* CLK_DIV_LCD0 */
+#define FIMD0_RATIO		4
+#define CLK_DIV_LCD0_VAL	(FIMD0_RATIO)
+
+/* Required period to generate a stable clock output */
+/* PLL_LOCK_TIME */
+#define PLL_LOCKTIME		0x1C20
+
+/* PLL Values */
+#define DISABLE			0
+#define ENABLE			1
+#define SET_PLL(mdiv, pdiv, sdiv)	((ENABLE << 31)\
+					| (mdiv << 16) \
+					| (pdiv << 8) \
+					| (sdiv << 0))
+
+/* APLL_CON0 */
+#define APLL_MDIV		0xFA
+#define APLL_PDIV		0x6
+#define APLL_SDIV		0x1
+#define APLL_CON0_VAL		SET_PLL(APLL_MDIV, APLL_PDIV, APLL_SDIV)
+
+/* APLL_CON1 */
+#define APLL_AFC_ENB		0x1
+#define APLL_AFC		0xC
+#define APLL_CON1_VAL		((APLL_AFC_ENB << 31) | (APLL_AFC << 0))
+
+/* MPLL_CON0 */
+#define MPLL_MDIV		0xC8
+#define MPLL_PDIV		0x6
+#define MPLL_SDIV		0x1
+#define MPLL_CON0_VAL	SET_PLL(MPLL_MDIV, MPLL_PDIV, MPLL_SDIV)
+
+/* MPLL_CON1 */
+#define MPLL_AFC_ENB	0x0
+#define MPLL_AFC		0x1C
+#define MPLL_CON1_VAL	((MPLL_AFC_ENB << 31) | (MPLL_AFC << 0))
+
+/* EPLL_CON0 */
+#define EPLL_MDIV		0x40
+#define EPLL_PDIV		0x2
+#define EPLL_SDIV		0x3
+#define EPLL_CON0_VAL	SET_PLL(EPLL_MDIV, EPLL_PDIV, EPLL_SDIV)
+
+/* EPLL_CON1 */
+#define EPLL_K			0x0
+#define EPLL_CON1_VAL		(EPLL_K >> 0)
+
+/* VPLL_CON0 */
+#define VPLL_MDIV		0x48
+#define VPLL_PDIV		0x2
+#define VPLL_SDIV		0x3
+#define VPLL_CON0_VAL	SET_PLL(VPLL_MDIV, VPLL_PDIV, VPLL_SDIV)
+
+/* VPLL_CON1 */
+#define VPLL_SSCG_EN		DISABLE
+#define VPLL_SEL_PF_DN_SPREAD	0x0
+#define VPLL_MRR		0x11
+#define VPLL_MFR		0x0
+#define VPLL_K			0x400
+#define VPLL_CON1_VAL		((VPLL_SSCG_EN << 31)\
+				| (VPLL_SEL_PF_DN_SPREAD << 29) \
+				| (VPLL_MRR << 24) \
+				| (VPLL_MFR << 16) \
+				| (VPLL_K << 0))
+
+/* DMC */
+#define DIRECT_CMD_NOP	0x07000000
+#define DIRECT_CMD_ZQ	0x0a000000
+#define DIRECT_CMD_CHIP1_SHIFT	(1 << 20)
+#define MEM_TIMINGS_MSR_COUNT	4
+#define CTRL_START	(1 << 0)
+#define CTRL_DLL_ON	(1 << 1)
+#define AREF_EN		(1 << 5)
+#define DRV_TYPE	(1 << 6)
+
+struct mem_timings {
+	unsigned direct_cmd_msr[MEM_TIMINGS_MSR_COUNT];
+	unsigned timingref;
+	unsigned timingrow;
+	unsigned timingdata;
+	unsigned timingpower;
+	unsigned zqcontrol;
+	unsigned control0;
+	unsigned control1;
+	unsigned control2;
+	unsigned concontrol;
+	unsigned prechconfig;
+	unsigned memcontrol;
+	unsigned memconfig0;
+	unsigned memconfig1;
+	unsigned dll_resync;
+	unsigned dll_on;
+};
+
+/* MIU */
+/* MIU Config Register Offsets*/
+#define APB_SFR_INTERLEAVE_CONF_OFFSET	0x400
+#define APB_SFR_ARBRITATION_CONF_OFFSET	0xC00
+#define ABP_SFR_SLV_ADDRMAP_CONF_OFFSET	0x800
+#define ABP_SFR_INTERLEAVE_ADDRMAP_START_OFFSET	0x808
+#define ABP_SFR_INTERLEAVE_ADDRMAP_END_OFFSET	0x810
+#define ABP_SFR_SLV0_SINGLE_ADDRMAP_START_OFFSET	0x818
+#define ABP_SFR_SLV0_SINGLE_ADDRMAP_END_OFFSET	0x820
+#define ABP_SFR_SLV1_SINGLE_ADDRMAP_START_OFFSET	0x828
+#define ABP_SFR_SLV1_SINGLE_ADDRMAP_END_OFFSET	0x830
+
+#ifdef CONFIG_ITOP4412
+/* Interleave: 2Bit, Interleave_bit1: 0x15, Interleave_bit0: 0x7 */
+#define APB_SFR_INTERLEAVE_CONF_VAL	0x20001507
+#define APB_SFR_ARBRITATION_CONF_VAL	0x00000001
+#endif
+
+#define INTERLEAVE_ADDR_MAP_START_ADDR	0x40000000
+#define INTERLEAVE_ADDR_MAP_END_ADDR	0xbfffffff
+#define INTERLEAVE_ADDR_MAP_EN		0x00000001
+
+#ifdef CONFIG_MIU_1BIT_INTERLEAVED
+/* Interleave_bit0: 0xC*/
+#define APB_SFR_INTERLEAVE_CONF_VAL	0x0000000c
+#endif
+#ifdef CONFIG_MIU_2BIT_INTERLEAVED
+/* Interleave: 2Bit, Interleave_bit1: 0x15, Interleave_bit0: 0xc */
+#define APB_SFR_INTERLEAVE_CONF_VAL	0x2000150c
+#endif
+#define SLAVE0_SINGLE_ADDR_MAP_START_ADDR	0x40000000
+#define SLAVE0_SINGLE_ADDR_MAP_END_ADDR		0x7fffffff
+#define SLAVE1_SINGLE_ADDR_MAP_START_ADDR	0x80000000
+#define SLAVE1_SINGLE_ADDR_MAP_END_ADDR		0xbfffffff
+/* Enable SME0 and SME1*/
+#define APB_SFR_SLV_ADDR_MAP_CONF_VAL		0x00000006
+
+#define FORCE_DLL_RESYNC	3
+#define DLL_CONTROL_ON		1
+
+#define DIRECT_CMD1	0x00020000
+#define DIRECT_CMD2	0x00030000
+#define DIRECT_CMD3	0x00010002
+#define DIRECT_CMD4	0x00000328
+
+#define CTRL_ZQ_MODE_NOTERM	(0x1 << 0)
+#define CTRL_ZQ_START		(0x1 << 1)
+#define CTRL_ZQ_DIV		(0 << 4)
+#define CTRL_ZQ_MODE_DDS	(0x7 << 8)
+#define CTRL_ZQ_MODE_TERM	(0x2 << 11)
+#define CTRL_ZQ_FORCE_IMPN	(0x5 << 14)
+#define CTRL_ZQ_FORCE_IMPP	(0x6 << 17)
+#define CTRL_DCC		(0xE38 << 20)
+#define ZQ_CONTROL_VAL		(CTRL_ZQ_MODE_NOTERM | CTRL_ZQ_START\
+				| CTRL_ZQ_DIV | CTRL_ZQ_MODE_DDS\
+				| CTRL_ZQ_MODE_TERM | CTRL_ZQ_FORCE_IMPN\
+				| CTRL_ZQ_FORCE_IMPP | CTRL_DCC)
+
+#define ASYNC			(0 << 0)
+#define CLK_RATIO		(1 << 1)
+#define DIV_PIPE		(1 << 3)
+#define AWR_ON			(1 << 4)
+#define AREF_DISABLE		(0 << 5)
+#define DRV_TYPE_DISABLE	(0 << 6)
+#define CHIP0_NOT_EMPTY		(0 << 8)
+#define CHIP1_NOT_EMPTY		(0 << 9)
+#define DQ_SWAP_DISABLE		(0 << 10)
+#define QOS_FAST_DISABLE	(0 << 11)
+#define RD_FETCH		(0x3 << 12)
+#define TIMEOUT_LEVEL0		(0xFFF << 16)
+#define CONCONTROL_VAL		(ASYNC | CLK_RATIO | DIV_PIPE | AWR_ON\
+				| AREF_DISABLE | DRV_TYPE_DISABLE\
+				| CHIP0_NOT_EMPTY | CHIP1_NOT_EMPTY\
+				| DQ_SWAP_DISABLE | QOS_FAST_DISABLE\
+				| RD_FETCH | TIMEOUT_LEVEL0)
+
+#define CLK_STOP_DISABLE	(0 << 1)
+#define DPWRDN_DISABLE		(0 << 2)
+#define DPWRDN_TYPE		(0 << 3)
+#define TP_DISABLE		(0 << 4)
+#define DSREF_DIABLE		(0 << 5)
+#define ADD_LAT_PALL		(1 << 6)
+#define MEM_TYPE_DDR3		(0x6 << 8)
+#define MEM_WIDTH_32		(0x2 << 12)
+#define NUM_CHIP_2		(1 << 16)
+#define BL_8			(0x3 << 20)
+#define MEMCONTROL_VAL		(CLK_STOP_DISABLE | DPWRDN_DISABLE\
+				| DPWRDN_TYPE | TP_DISABLE | DSREF_DIABLE\
+				| ADD_LAT_PALL | MEM_TYPE_DDR3 | MEM_WIDTH_32\
+				| NUM_CHIP_2 | BL_8)
+
+
+#define CHIP_BANK_8		(0x3 << 0)
+#define CHIP_ROW_14		(0x2 << 4)
+#define CHIP_COL_10		(0x3 << 8)
+#define CHIP_MAP_INTERLEAVED	(1 << 12)
+#define CHIP_MASK		(0xe0 << 16)
+#ifdef CONFIG_MIU_LINEAR
+#define CHIP0_BASE		(0x40 << 24)
+#define CHIP1_BASE		(0x60 << 24)
+#else
+#define CHIP0_BASE		(0x20 << 24)
+#define CHIP1_BASE		(0x40 << 24)
+#endif
+#define MEMCONFIG0_VAL		(CHIP_BANK_8 | CHIP_ROW_14 | CHIP_COL_10\
+				| CHIP_MAP_INTERLEAVED | CHIP_MASK | CHIP0_BASE)
+#define MEMCONFIG1_VAL		(CHIP_BANK_8 | CHIP_ROW_14 | CHIP_COL_10\
+				| CHIP_MAP_INTERLEAVED | CHIP_MASK | CHIP1_BASE)
+
+#define TP_CNT			(0xff << 24)
+#define PRECHCONFIG		TP_CNT
+
+#define CTRL_OFF		(0 << 0)
+#define CTRL_DLL_OFF		(0 << 1)
+#define CTRL_HALF		(0 << 2)
+#define CTRL_DFDQS		(1 << 3)
+#define DQS_DELAY		(0 << 4)
+#define CTRL_START_POINT	(0x10 << 8)
+#define CTRL_INC		(0x10 << 16)
+#define CTRL_FORCE		(0x71 << 24)
+#define CONTROL0_VAL		(CTRL_OFF | CTRL_DLL_OFF | CTRL_HALF\
+				| CTRL_DFDQS | DQS_DELAY | CTRL_START_POINT\
+				| CTRL_INC | CTRL_FORCE)
+
+#define CTRL_SHIFTC		(0x6 << 0)
+#define CTRL_REF		(8 << 4)
+#define CTRL_SHGATE		(1 << 29)
+#define TERM_READ_EN		(1 << 30)
+#define TERM_WRITE_EN		(1 << 31)
+#define CONTROL1_VAL		(CTRL_SHIFTC | CTRL_REF | CTRL_SHGATE\
+				| TERM_READ_EN | TERM_WRITE_EN)
+
+#define CONTROL2_VAL		0x00000000
+
+#define TIMINGREF_VAL		0x000000BB
+#define TIMINGROW_VAL		0x4046654f
+#define	TIMINGDATA_VAL		0x46400506
+#define	TIMINGPOWER_VAL		0x52000A3C
+
+#endif
diff -urN u-boot-2015.04/arch/arm/cpu/armv7/exynos/Kconfig uboot_2015.04/arch/arm/cpu/armv7/exynos/Kconfig
--- u-boot-2015.04/arch/arm/cpu/armv7/exynos/Kconfig	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/arch/arm/cpu/armv7/exynos/Kconfig	2017-11-29 16:49:55.000000000 -0800
@@ -21,6 +21,10 @@
 config TARGET_TRATS2
 	bool "Exynos4412 Trat2 board"
 
+config TARGET_ITOP-4412
+	bool "Exynos4412 Ultimate board"
+	select SUPPORT_SPL
+
 config TARGET_ODROID
 	bool "Exynos4412 Odroid board"
 
@@ -69,22 +73,23 @@
 	default y
 
 config DM_SERIAL
-	default y
+	default n
 
 config DM_SPI
-	default y
+	default n
 
 config DM_SPI_FLASH
-	default y
+	default n
 
 config DM_GPIO
-	default y
+	default n
 
 source "board/samsung/smdkv310/Kconfig"
 source "board/samsung/trats/Kconfig"
 source "board/samsung/universal_c210/Kconfig"
 source "board/samsung/origen/Kconfig"
 source "board/samsung/trats2/Kconfig"
+source "board/samsung/itop-4412/Kconfig"
 source "board/samsung/odroid/Kconfig"
 source "board/samsung/arndale/Kconfig"
 source "board/samsung/smdk5250/Kconfig"
diff -urN u-boot-2015.04/arch/arm/cpu/armv7/exynos/lowlevel_init.c uboot_2015.04/arch/arm/cpu/armv7/exynos/lowlevel_init.c
--- u-boot-2015.04/arch/arm/cpu/armv7/exynos/lowlevel_init.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/arch/arm/cpu/armv7/exynos/lowlevel_init.c	2017-11-29 16:39:36.000000000 -0800
@@ -34,7 +34,7 @@
 #include <asm/arch/system.h>
 #include <asm/armv7.h>
 #include "common_setup.h"
-#include "exynos5_setup.h"
+#include "itop-4412_setup.h"
 
 /* These are the things we can do during low-level init */
 enum {
@@ -167,6 +167,37 @@
 extern void relocate_wait_code(void);
 #endif
 
+void test_uart()
+{
+	// set pinmux
+	unsigned int addr = 0x11400000;
+	writel(0x22222222, addr);
+	writel(0x222222, addr+0x20);
+
+	addr = (unsigned int *)0x1003c250;
+	writel(0x666666, addr);
+
+	addr = (unsigned int *)0x1003c550;
+	writel(0x777777, addr);
+
+	addr = (unsigned int *)0x13820000;
+#define ULCON_OFFSET		0x00
+#define UCON_OFFSET			0x04
+#define UFCON_OFFSET		0x08
+#define UBRDIV_OFFSET		0x28
+#define UDIVSLOT_OFFSET		0x2C
+#define UTXH_OFFSET			0x20
+	writel(0x111, addr+UFCON_OFFSET);
+	writel(0x3, addr+ULCON_OFFSET);
+	writel(0x3c5, addr+UCON_OFFSET);
+	writel(0x35, addr+UBRDIV_OFFSET);
+	writel(0x3, addr+UDIVSLOT_OFFSET);
+	writel(0x4f, addr+UTXH_OFFSET);
+	writel(0x4b, addr+UTXH_OFFSET);
+	
+	return;
+}
+
 int do_lowlevel_init(void)
 {
 	uint32_t reset_status;
@@ -174,6 +205,7 @@
 
 	arch_cpu_init();
 
+#if 0
 #ifndef CONFIG_SYS_L2CACHE_OFF
 	/*
 	 * Init L2 cache parameters here for use by boot and resume
@@ -188,6 +220,7 @@
 	dsb();
 	isb();
 #endif
+#endif
 
 #ifdef CONFIG_EXYNOS5420
 	relocate_wait_code();
@@ -211,13 +244,19 @@
 		actions = DO_CLOCKS | DO_MEM_RESET | DO_POWER;
 	}
 
-	if (actions & DO_POWER)
+	if (actions & DO_POWER) {
 		set_ps_hold_ctrl();
+	}
 
 	if (actions & DO_CLOCKS) {
 		system_clock_init();
+#ifdef CONFIG_DEBUG_UART
+		exynos_pinmux_config(PERIPH_ID_UART2, PINMUX_FLAG_NONE);
+		debug_uart_init();
+#endif
+		test_uart();
 		mem_ctrl_init(actions & DO_MEM_RESET);
-		tzpc_init();
+		//tzpc_init();
 	}
 
 	return actions & DO_WAKEUP;
diff -urN u-boot-2015.04/arch/arm/cpu/armv7/exynos/Makefile uboot_2015.04/arch/arm/cpu/armv7/exynos/Makefile
--- u-boot-2015.04/arch/arm/cpu/armv7/exynos/Makefile	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/arch/arm/cpu/armv7/exynos/Makefile	2017-11-29 17:15:45.000000000 -0800
@@ -12,7 +12,9 @@
 ifdef CONFIG_SPL_BUILD
 obj-$(CONFIG_EXYNOS5)	+= clock_init_exynos5.o
 obj-$(CONFIG_EXYNOS5)	+= dmc_common.o dmc_init_ddr3.o
-obj-$(CONFIG_EXYNOS4210)+= dmc_init_exynos4.o clock_init_exynos4.o
+ifneq (, $(filter y, $(CONFIG_ITOP4412)))
+obj-y 	+= dmc_init_exynos4.o clock_init_exynos4.o
 obj-y	+= spl_boot.o
 obj-y	+= lowlevel_init.o
 endif
+endif
diff -urN u-boot-2015.04/arch/arm/cpu/armv7/exynos/pinmux.c uboot_2015.04/arch/arm/cpu/armv7/exynos/pinmux.c
--- u-boot-2015.04/arch/arm/cpu/armv7/exynos/pinmux.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/arch/arm/cpu/armv7/exynos/pinmux.c	2017-11-29 16:39:36.000000000 -0800
@@ -10,6 +10,7 @@
 #include <asm/gpio.h>
 #include <asm/arch/pinmux.h>
 #include <asm/arch/sromc.h>
+#define _DEBUG	1
 
 static void exynos5_uart_config(int peripheral)
 {
diff -urN u-boot-2015.04/arch/arm/cpu/armv7/exynos/power.c uboot_2015.04/arch/arm/cpu/armv7/exynos/power.c
--- u-boot-2015.04/arch/arm/cpu/armv7/exynos/power.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/arch/arm/cpu/armv7/exynos/power.c	2017-11-29 16:39:36.000000000 -0800
@@ -173,6 +173,15 @@
 {
 	if (cpu_is_exynos5())
 		exynos5_set_ps_hold_ctrl();
+	else if (cpu_is_exynos4()) {
+		struct exynos4x12_power *power = 
+			(struct exynos4x12_power *)samsung_get_base_power();
+		unsigned int value = readl(&power->ps_hold_control);
+		value |= 0x300;
+		writel(value, &power->ps_hold_control);
+		writel(0, (unsigned int *)0x11000c08);
+		writel(0, &power->mask_wdt_reset_request);
+	}
 }
 
 
@@ -214,18 +223,15 @@
 
 static uint32_t exynos4_get_reset_status(void)
 {
-	struct exynos4_power *power =
-		(struct exynos4_power *)samsung_get_base_power();
+	struct exynos4x12_power *power = 
+		(struct exynos4x12_power *)samsung_get_base_power();
 
 	return power->inform1;
 }
 
 uint32_t get_reset_status(void)
 {
-	if (cpu_is_exynos5())
-		return exynos5_get_reset_status();
-	else
-		return  exynos4_get_reset_status();
+	return  exynos4_get_reset_status();
 }
 
 static void exynos5_power_exit_wakeup(void)
diff -urN u-boot-2015.04/arch/arm/cpu/armv7/exynos/spl_boot.c uboot_2015.04/arch/arm/cpu/armv7/exynos/spl_boot.c
--- u-boot-2015.04/arch/arm/cpu/armv7/exynos/spl_boot.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/arch/arm/cpu/armv7/exynos/spl_boot.c	2017-11-29 16:39:36.000000000 -0800
@@ -34,8 +34,7 @@
 u32 irom_ptr_table[] = {
 	[MMC_INDEX] = 0x02020030,	/* iROM Function Pointer-SDMMC boot */
 	[EMMC44_INDEX] = 0x02020044,	/* iROM Function Pointer-EMMC4.4 boot*/
-	[EMMC44_END_INDEX] = 0x02020048,/* iROM Function Pointer
-						-EMMC4.4 end boot operation */
+	[EMMC44_END_INDEX] = 0x02020048,/* iROM Function Pointer-EMMC4.4 end boot operation */
 	[SPI_INDEX] = 0x02020058,	/* iROM Function Pointer-SPI boot */
 	[USB_INDEX] = 0x02020070,	/* iROM Function Pointer-USB boot*/
 	};
@@ -227,9 +226,11 @@
 		copy_bl2 = get_irom_func(MMC_INDEX);
 		break;
 #ifdef CONFIG_SUPPORT_EMMC_BOOT
-	case BOOT_MODE_EMMC:
-		/* Set the FSYS1 clock divisor value for EMMC boot */
-		emmc_boot_clk_div_set();
+	case BOOT_MODE_EMMC_SD:
+		/* Set the FSYS3 clock divisor value for EMMC boot */
+		//emmc_boot_clk_div_set();
+		set_mmc_clk(4, 0);
+		printascii("hello.\n");
 
 		copy_bl2_from_emmc = get_irom_func(EMMC44_INDEX);
 		end_bootop_from_emmc = get_irom_func(EMMC44_END_INDEX);
@@ -254,8 +255,9 @@
 		break;
 	}
 
-	if (copy_bl2)
+	if (copy_bl2) {
 		copy_bl2(offset, size, CONFIG_SYS_TEXT_BASE);
+	}
 }
 
 void memzero(void *s, size_t n)
@@ -290,11 +292,13 @@
 
 	setup_global_data(&local_gd);
 
-	if (do_lowlevel_init())
+	if (do_lowlevel_init()) {
 		power_exit_wakeup();
-
+	}
+	
 	copy_uboot_to_ram();
 
+	printascii("copy BL2 ends.\n");
 	/* Jump to U-Boot image */
 	uboot = (void *)CONFIG_SYS_TEXT_BASE;
 	(*uboot)();
diff -urN u-boot-2015.04/arch/arm/cpu/armv7/exynos/system.c uboot_2015.04/arch/arm/cpu/armv7/exynos/system.c
--- u-boot-2015.04/arch/arm/cpu/armv7/exynos/system.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/arch/arm/cpu/armv7/exynos/system.c	2017-11-29 16:39:36.000000000 -0800
@@ -36,11 +36,13 @@
 	    (struct exynos4_sysreg *)samsung_get_base_sysreg();
 	unsigned int cfg = 0;
 
+	printf("exynos4 sysreg base = 0x%x.\n", (unsigned int *)sysreg);
 	/*
 	 * system register path set
 	 * 0: MIE/MDNIE
 	 * 1: FIMD Bypass
 	 */
+	printf("config system reg: 0x%p.\n", &sysreg->display_ctrl);
 	cfg = readl(&sysreg->display_ctrl);
 	cfg |= (1 << 1);
 	writel(cfg, &sysreg->display_ctrl);
diff -urN u-boot-2015.04/arch/arm/cpu/armv7/exynos/tzpc.c uboot_2015.04/arch/arm/cpu/armv7/exynos/tzpc.c
--- u-boot-2015.04/arch/arm/cpu/armv7/exynos/tzpc.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/arch/arm/cpu/armv7/exynos/tzpc.c	2017-11-29 16:39:36.000000000 -0800
@@ -17,6 +17,8 @@
 	unsigned int addr, start = 0, end = 0;
 
 	start = samsung_get_base_tzpc();
+	if (start == 0x10110000)
+		printascii("start tzpc config\n");
 
 	if (cpu_is_exynos5())
 		end = start + ((EXYNOS5_NR_TZPC_BANKS - 1) * TZPC_BASE_OFFSET);
diff -urN u-boot-2015.04/arch/arm/cpu/armv7/start.S uboot_2015.04/arch/arm/cpu/armv7/start.S
--- u-boot-2015.04/arch/arm/cpu/armv7/start.S	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/arch/arm/cpu/armv7/start.S	2017-11-29 16:39:36.000000000 -0800
@@ -31,6 +31,25 @@
 
 	.globl	reset
 	.globl	save_boot_params_ret
+	.globl	led_on
+#define MEM_DLLl_ON
+
+led_on:
+	push {r0, r1}
+	ldr r0, =0x11000100
+	mov r1, #1
+	str r1, [r0]
+	ldr r0, =0x11000060
+	mov r1, #0
+	str r1, [r0]
+	ldr r0, =0x11000104
+	mov r1, #1
+	str r1, [r0]
+	ldr r0, =0x11000064
+	mov r0, #0
+	//str r0, [r0]	
+	pop {r0, r1}
+	bx lr
 
 reset:
 	/* Allow the board to save important registers */
diff -urN u-boot-2015.04/arch/arm/dts/exynos4412-itop-4412.dts uboot_2015.04/arch/arm/dts/exynos4412-itop-4412.dts
--- u-boot-2015.04/arch/arm/dts/exynos4412-itop-4412.dts	1969-12-31 16:00:00.000000000 -0800
+++ uboot_2015.04/arch/arm/dts/exynos4412-itop-4412.dts	2017-11-29 16:39:36.000000000 -0800
@@ -0,0 +1,160 @@
+/*
+ * Odroid-U3/X2 board device tree source
+ *
+ * Copyright (c) 2014 Samsung Electronics Co., Ltd.
+ *		http://www.samsung.com
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+/dts-v1/;
+#include "exynos4412.dtsi"
+
+/ {
+	model = "itop-4412 based on Exynos4412";
+	compatible = "samsung,itop-4412", "samsung,exynos4412";
+
+	aliases {
+		i2c0 = "/i2c@13860000";
+		i2c1 = "/i2c@13870000";
+		i2c2 = "/i2c@13880000";
+		i2c3 = "/i2c@13890000";
+		i2c4 = "/i2c@138a0000";
+		i2c5 = "/i2c@138b0000";
+		i2c6 = "/i2c@138c0000";
+		i2c7 = "/i2c@138d0000";
+		serial0 = "/serial@13820000";
+		console = "/serial@13820000";
+		mmc2 = "sdhci@12530000";
+		mmc4 = "dwmmc@12550000";
+	};
+
+	fimd@11c00000 {
+		compatible = "samsung,exynos-fimd";
+		reg = <0x11c00000 0xa4>;
+
+		samsung,vl-freq = <60>;
+		samsung,vl-col = <480>;
+		samsung,vl-row = <272>;
+		samsung,vl-width = <480>;
+		samsung,vl-height = <272>;
+
+		samsung,vl-clkp = <0>;
+		samsung,vl-oep = <0>;
+		samsung,vl-hsp = <1>;
+		samsung,vl-vsp = <0>;
+		samsung,vl-dp = <1>;
+		samsung,vl-bpix = <4>;
+
+		samsung,vl-hspw = <32>;
+		samsung,vl-hbpd = <80>;
+		samsung,vl-hfpd = <48>;
+		samsung,vl-vspw = <2>;
+		samsung,vl-vbpd = <1>;
+		samsung,vl-vfpd = <13>;
+		samsung,vl-cmd-allow-len = <0xf>;
+
+		samsung,winid = <0>;
+		samsung,power-on-delay = <30>;
+		samsung,interface-mode = <1>;
+		samsung,mipi-enabled = <0>;
+		//samsung,dp-enabled;
+		//samsung,dual-lcd-enabled;
+
+		samsung,logo-on = <1>;
+		samsung,resolution = <0>;
+		samsung,rgb-mode = <1>;
+		samsung,pwm-out-gpio  = <&gpd0 1 1>;
+		samsung,bl-en-gpio = <&gpd0 0 1>;
+	};
+
+	mipidsi@11c80000 {
+		compatible = "samsung,exynos-mipi-dsi";
+		reg = <0x11c80000 0x5c>;
+
+		samsung,dsim-config-e-interface = <1>;
+		samsung,dsim-config-e-virtual-ch = <0>;
+		samsung,dsim-config-e-pixel-format = <7>;
+		samsung,dsim-config-e-burst-mode = <1>;
+		samsung,dsim-config-e-no-data-lane = <3>;
+		samsung,dsim-config-e-byte-clk = <0>;
+		samsung,dsim-config-hfp = <1>;
+
+		samsung,dsim-config-p = <3>;
+		samsung,dsim-config-m = <120>;
+		samsung,dsim-config-s = <1>;
+
+		samsung,dsim-config-pll-stable-time = <500>;
+		samsung,dsim-config-esc-clk = <20000000>;
+		samsung,dsim-config-stop-holding-cnt = <0x7ff>;
+		samsung,dsim-config-bta-timeout = <0xff>;
+		samsung,dsim-config-rx-timeout = <0xffff>;
+
+		samsung,dsim-device-id = <0xffffffff>;
+		samsung,dsim-device-bus-id = <0>;
+
+		samsung,dsim-device-reverse-panel = <1>;
+	};
+
+	i2c@13860000 {
+		samsung,i2c-sda-delay = <100>;
+		samsung,i2c-slave-addr = <0x10>;
+		samsung,i2c-max-bus-freq = <100000>;
+		status = "okay";
+
+		max77686_pmic@09 {
+			compatible = "maxim,max77686_pmic";
+			interrupts = <7 0>;
+			reg = <0x09 0 0>;
+			#clock-cells = <1>;
+		};
+	};
+
+	serial@13820000 {
+		status = "okay";
+	};
+
+	sdhci@12510000 {
+		status = "disabled";
+	};
+
+	sdhci@12520000 {
+		status = "disabled";
+	};
+
+	sdhci@12530000 {
+		samsung,bus-width = <4>;
+		samsung,timing = <1 2 3>;
+		cd-gpios = <&gpk2 2 0>;
+	};
+
+	sdhci@12540000 {
+		status = "disabled";
+	};
+
+	dwmmc@12550000 {
+		samsung,bus-width = <4>;
+		samsung,timing = <2 1 0>;
+		samsung,removable = <0>;
+		fifoth_val = <0x203f0040>;
+		bus_hz = <400000000>;
+		div = <0x3>;
+		index = <4>;
+	};
+
+	ehci@12580000 {
+		compatible = "samsung,exynos-ehci";
+		reg = <0x12580000 0x100>;
+		#address-cells = <1>;
+		#size-cells = <1>;
+		phy {
+			compatible = "samsung,exynos-usb-phy";
+			reg = <0x125B0000 0x100>;
+		};
+	};
+
+	emmc-reset {
+		compatible = "samsung,emmc-reset";
+		reset-gpio = <&gpk1 2 0>;
+	};
+};
diff -urN u-boot-2015.04/arch/arm/dts/Makefile uboot_2015.04/arch/arm/dts/Makefile
--- u-boot-2015.04/arch/arm/dts/Makefile	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/arch/arm/dts/Makefile	2017-11-29 16:39:36.000000000 -0800
@@ -6,6 +6,7 @@
 	exynos4210-universal_c210.dtb \
 	exynos4210-trats.dtb \
 	exynos4412-trats2.dtb \
+	exynos4412-itop-4412.dtb \
 	exynos4412-odroid.dtb
 
 dtb-$(CONFIG_EXYNOS5) += exynos5250-arndale.dtb \
diff -urN u-boot-2015.04/arch/arm/include/asm/arch-exynos/clock.h uboot_2015.04/arch/arm/include/asm/arch-exynos/clock.h
--- u-boot-2015.04/arch/arm/include/asm/arch-exynos/clock.h	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/arch/arm/include/asm/arch-exynos/clock.h	2017-11-29 16:39:36.000000000 -0800
@@ -239,278 +239,278 @@
 
 struct exynos4x12_clock {
 	unsigned char	res1[0x4200];
-	unsigned int	src_leftbus;
-	unsigned char	res2[0x1fc];
-	unsigned int	mux_stat_leftbus;
-	unsigned char	res3[0xfc];
-	unsigned int	div_leftbus;
+	unsigned int	src_leftbus;	// 0x4200
+	unsigned char	res2[0x1fc];	// 0x4204
+	unsigned int	mux_stat_leftbus;	// 0x4400
+	unsigned char	res3[0xfc];		// 0x4404
+	unsigned int	div_leftbus;	// 0x4500
 	unsigned char	res4[0xfc];
-	unsigned int	div_stat_leftbus;
+	unsigned int	div_stat_leftbus;	// 0x4600
 	unsigned char	res5[0x1fc];
-	unsigned int	gate_ip_leftbus;
-	unsigned char	res6[0x12c];
-	unsigned int	gate_ip_image;
+	unsigned int	gate_ip_leftbus;	// 0x4800
+	unsigned char	res6[0x12c];	// 0x4804
+	unsigned int	gate_ip_image;	// 0x4930
 	unsigned char	res7[0xcc];
-	unsigned int	clkout_leftbus;
-	unsigned int	clkout_leftbus_div_stat;
+	unsigned int	clkout_leftbus;		// 0x4a00
+	unsigned int	clkout_leftbus_div_stat;	// 0x4a04
 	unsigned char	res8[0x37f8];
-	unsigned int	src_rightbus;
+	unsigned int	src_rightbus;	// 0x8200
 	unsigned char	res9[0x1fc];
-	unsigned int	mux_stat_rightbus;
+	unsigned int	mux_stat_rightbus;	// 0x8400
 	unsigned char	res10[0xfc];
-	unsigned int	div_rightbus;
+	unsigned int	div_rightbus;	// 0x8500
 	unsigned char	res11[0xfc];
-	unsigned int	div_stat_rightbus;
+	unsigned int	div_stat_rightbus;	// 0x8600
 	unsigned char	res12[0x1fc];
-	unsigned int	gate_ip_rightbus;
+	unsigned int	gate_ip_rightbus;	// 0x8800
 	unsigned char	res13[0x15c];
-	unsigned int	gate_ip_perir;
+	unsigned int	gate_ip_perir;	// 0x8960
 	unsigned char	res14[0x9c];
-	unsigned int	clkout_rightbus;
+	unsigned int	clkout_rightbus;	// 0x8a00
 	unsigned int	clkout_rightbus_div_stat;
-	unsigned char	res15[0x3608];
-	unsigned int	epll_lock;
+	unsigned char	res15[0x3608];	// 0x8a08
+	unsigned int	epll_lock;	// 0xc010
 	unsigned char	res16[0xc];
-	unsigned int	vpll_lock;
+	unsigned int	vpll_lock;	// 0xc020
 	unsigned char	res17[0xec];
-	unsigned int	epll_con0;
-	unsigned int	epll_con1;
-	unsigned int	epll_con2;
+	unsigned int	epll_con0;	// 0xc110
+	unsigned int	epll_con1;	// 0xc114
+	unsigned int	epll_con2;	// 0xc118
 	unsigned char	res18[0x4];
-	unsigned int	vpll_con0;
+	unsigned int	vpll_con0;	// 0xc120
 	unsigned int	vpll_con1;
-	unsigned int	vpll_con2;
+	unsigned int	vpll_con2;	// 0xc128
 	unsigned char	res19[0xe4];
-	unsigned int	src_top0;
+	unsigned int	src_top0;	// 0xc210
 	unsigned int	src_top1;
-	unsigned char	res20[0x8];
-	unsigned int	src_cam;
+	unsigned char	res20[0x8];	// 0xc218
+	unsigned int	src_cam;	// 0xc220
 	unsigned int	src_tv;
-	unsigned int	src_mfc;
-	unsigned int	src_g3d;
+	unsigned int	src_mfc;	// 0xc228
+	unsigned int	src_g3d;	// 0xc22c
 	unsigned char	res21[0x4];
-	unsigned int	src_lcd;
-	unsigned int	src_isp;
+	unsigned int	src_lcd0;	// 0xc234
+	unsigned int	src_isp;	// 0xc238
 	unsigned int	src_maudio;
-	unsigned int	src_fsys;
+	unsigned int	src_fsys;	// 0xc240
 	unsigned char	res22[0xc];
-	unsigned int	src_peril0;
+	unsigned int	src_peril0;	// 0xc250
 	unsigned int	src_peril1;
-	unsigned int	src_cam1;
+	unsigned int	src_cam1;	// 0xc258
 	unsigned char	res23[0xb4];
-	unsigned int	src_mask_top;
+	unsigned int	src_mask_top;	// 0xc310
 	unsigned char	res24[0xc];
-	unsigned int	src_mask_cam;
-	unsigned int	src_mask_tv;
+	unsigned int	src_mask_cam;	// 0xc320
+	unsigned int	src_mask_tv;	// 0xc324
 	unsigned char	res25[0xc];
-	unsigned int	src_mask_lcd;
+	unsigned int	src_mask_lcd;	// 0xc334
 	unsigned int	src_mask_isp;
 	unsigned int	src_mask_maudio;
-	unsigned int	src_mask_fsys;
+	unsigned int	src_mask_fsys;	// 0xc340
 	unsigned char	res26[0xc];
-	unsigned int	src_mask_peril0;
-	unsigned int	src_mask_peril1;
+	unsigned int	src_mask_peril0;	// 0xc350
+	unsigned int	src_mask_peril1;	// 0xc354
 	unsigned char	res27[0xb8];
-	unsigned int	mux_stat_top0;
-	unsigned int	mux_stat_top1;
-	unsigned char	res28[0x10];
-	unsigned int	mux_stat_mfc;
-	unsigned int	mux_stat_g3d;
-	unsigned char	res29[0x28];
-	unsigned int	mux_stat_cam1;
-	unsigned char	res30[0xb4];
-	unsigned int	div_top;
-	unsigned char	res31[0xc];
-	unsigned int	div_cam;
-	unsigned int	div_tv;
-	unsigned int	div_mfc;
-	unsigned int	div_g3d;
-	unsigned char	res32[0x4];
-	unsigned int	div_lcd;
-	unsigned int	div_isp;
-	unsigned int	div_maudio;
-	unsigned int	div_fsys0;
-	unsigned int	div_fsys1;
-	unsigned int	div_fsys2;
-	unsigned int	div_fsys3;
-	unsigned int	div_peril0;
-	unsigned int	div_peril1;
-	unsigned int	div_peril2;
-	unsigned int	div_peril3;
-	unsigned int	div_peril4;
-	unsigned int	div_peril5;
-	unsigned int	div_cam1;
-	unsigned char	res33[0x14];
-	unsigned int	div2_ratio;
-	unsigned char	res34[0x8c];
-	unsigned int	div_stat_top;
-	unsigned char	res35[0xc];
-	unsigned int	div_stat_cam;
-	unsigned int	div_stat_tv;
-	unsigned int	div_stat_mfc;
-	unsigned int	div_stat_g3d;
-	unsigned char	res36[0x4];
-	unsigned int	div_stat_lcd;
-	unsigned int	div_stat_isp;
-	unsigned int	div_stat_maudio;
-	unsigned int	div_stat_fsys0;
-	unsigned int	div_stat_fsys1;
-	unsigned int	div_stat_fsys2;
-	unsigned int	div_stat_fsys3;
-	unsigned int	div_stat_peril0;
-	unsigned int	div_stat_peril1;
-	unsigned int	div_stat_peril2;
-	unsigned int	div_stat_peril3;
-	unsigned int	div_stat_peril4;
-	unsigned int	div_stat_peril5;
-	unsigned int	div_stat_cam1;
-	unsigned char	res37[0x14];
-	unsigned int	div2_stat;
-	unsigned char	res38[0x29c];
-	unsigned int	gate_ip_cam;
-	unsigned int	gate_ip_tv;
-	unsigned int	gate_ip_mfc;
-	unsigned int	gate_ip_g3d;
-	unsigned char	res39[0x4];
-	unsigned int	gate_ip_lcd;
-	unsigned int	gate_ip_isp;
-	unsigned char	res40[0x4];
-	unsigned int	gate_ip_fsys;
-	unsigned char	res41[0x8];
-	unsigned int	gate_ip_gps;
-	unsigned int	gate_ip_peril;
-	unsigned char	res42[0xc];
-	unsigned char	res43[0x4];
-	unsigned char	res44[0xc];
-	unsigned int	gate_block;
-	unsigned char	res45[0x8c];
-	unsigned int	clkout_cmu_top;
-	unsigned int	clkout_cmu_top_div_stat;
-	unsigned char	res46[0x3600];
-	unsigned int	mpll_lock;
-	unsigned char	res47[0xfc];
-	unsigned int	mpll_con0;
-	unsigned int	mpll_con1;
-	unsigned char	res48[0xf0];
-	unsigned int	src_dmc;
-	unsigned char	res49[0xfc];
-	unsigned int	src_mask_dmc;
-	unsigned char	res50[0xfc];
-	unsigned int	mux_stat_dmc;
-	unsigned char	res51[0xfc];
-	unsigned int	div_dmc0;
-	unsigned int	div_dmc1;
-	unsigned char	res52[0xf8];
-	unsigned int	div_stat_dmc0;
-	unsigned int	div_stat_dmc1;
-	unsigned char	res53[0xf8];
-	unsigned int	gate_bus_dmc0;
-	unsigned int	gate_bus_dmc1;
-	unsigned char	res54[0x1f8];
-	unsigned int	gate_ip_dmc0;
-	unsigned int	gate_ip_dmc1;
-	unsigned char	res55[0xf8];
-	unsigned int	clkout_cmu_dmc;
-	unsigned int	clkout_cmu_dmc_div_stat;
-	unsigned char	res56[0x5f8];
-	unsigned int	dcgidx_map0;
-	unsigned int	dcgidx_map1;
-	unsigned int	dcgidx_map2;
-	unsigned char	res57[0x14];
-	unsigned int	dcgperf_map0;
-	unsigned int	dcgperf_map1;
-	unsigned char	res58[0x18];
-	unsigned int	dvcidx_map;
-	unsigned char	res59[0x1c];
-	unsigned int	freq_cpu;
-	unsigned int	freq_dpm;
-	unsigned char	res60[0x18];
-	unsigned int	dvsemclk_en;
-	unsigned int	maxperf;
-	unsigned char	res61[0x8];
-	unsigned int	dmc_freq_ctrl;
-	unsigned int	dmc_pause_ctrl;
-	unsigned int	dddrphy_lock_ctrl;
-	unsigned int	c2c_state;
-	unsigned char	res62[0x2f60];
-	unsigned int	apll_lock;
-	unsigned char	res63[0x8];
-	unsigned char	res64[0xf4];
-	unsigned int	apll_con0;
-	unsigned int	apll_con1;
-	unsigned char	res65[0xf8];
-	unsigned int	src_cpu;
-	unsigned char	res66[0x1fc];
-	unsigned int	mux_stat_cpu;
-	unsigned char	res67[0xfc];
-	unsigned int	div_cpu0;
-	unsigned int	div_cpu1;
-	unsigned char	res68[0xf8];
-	unsigned int	div_stat_cpu0;
-	unsigned int	div_stat_cpu1;
-	unsigned char	res69[0x2f8];
-	unsigned int	clk_gate_ip_cpu;
-	unsigned char	res70[0xfc];
-	unsigned int	clkout_cmu_cpu;
-	unsigned int	clkout_cmu_cpu_div_stat;
-	unsigned char	res71[0x5f8];
-	unsigned int	armclk_stopctrl;
-	unsigned int	atclk_stopctrl;
-	unsigned char	res72[0x10];
-	unsigned char	res73[0x8];
-	unsigned int	pwr_ctrl;
-	unsigned int	pwr_ctrl2;
-	unsigned char	res74[0xd8];
-	unsigned int	apll_con0_l8;
-	unsigned int	apll_con0_l7;
-	unsigned int	apll_con0_l6;
-	unsigned int	apll_con0_l5;
-	unsigned int	apll_con0_l4;
-	unsigned int	apll_con0_l3;
-	unsigned int	apll_con0_l2;
-	unsigned int	apll_con0_l1;
-	unsigned int	iem_control;
-	unsigned char	res75[0xdc];
-	unsigned int	apll_con1_l8;
-	unsigned int	apll_con1_l7;
-	unsigned int	apll_con1_l6;
-	unsigned int	apll_con1_l5;
-	unsigned int	apll_con1_l4;
-	unsigned int	apll_con1_l3;
-	unsigned int	apll_con1_l2;
-	unsigned int	apll_con1_l1;
-	unsigned char	res76[0xe0];
-	unsigned int	div_iem_l8;
-	unsigned int	div_iem_l7;
-	unsigned int	div_iem_l6;
-	unsigned int	div_iem_l5;
-	unsigned int	div_iem_l4;
-	unsigned int	div_iem_l3;
-	unsigned int	div_iem_l2;
-	unsigned int	div_iem_l1;
-	unsigned char	res77[0xe0];
-	unsigned int	l2_status;
-	unsigned char	res78[0xc];
-	unsigned int	cpu_status;
-	unsigned char	res79[0xc];
-	unsigned int	ptm_status;
-	unsigned char	res80[0x2edc];
-	unsigned int	div_isp0;
-	unsigned int	div_isp1;
-	unsigned char	res81[0xf8];
-	unsigned int	div_stat_isp0;
-	unsigned int	div_stat_isp1;
-	unsigned char	res82[0x3f8];
-	unsigned int	gate_ip_isp0;
-	unsigned int	gate_ip_isp1;
-	unsigned char	res83[0x1f8];
-	unsigned int	clkout_cmu_isp;
-	unsigned int	clkout_cmu_ispd_div_stat;
-	unsigned char	res84[0xf8];
-	unsigned int	cmu_isp_spar0;
-	unsigned int	cmu_isp_spar1;
-	unsigned int	cmu_isp_spar2;
-	unsigned int	cmu_isp_spar3;
+	unsigned int	mux_stat_top0;	// 0xc410
+	unsigned int	mux_stat_top1;	// 0xc414
+	unsigned char	res28[0x10];	// 0xc418
+	unsigned int	mux_stat_mfc;	// 0xc428
+	unsigned int	mux_stat_g3d;	// 0xc42c
+	unsigned char	res29[0x28];	// 0xc430
+	unsigned int	mux_stat_cam1;	// 0xc458
+	unsigned char	res30[0xb4];	// 0xc45c
+	unsigned int	div_top;		// 0xc510
+	unsigned char	res31[0xc];		// 0xc514
+	unsigned int	div_cam;		// 0xc520
+	unsigned int	div_tv;		// 0xc524
+	unsigned int	div_mfc;	// 0xc528
+	unsigned int	div_g3d;	// 0xc52c
+	unsigned char	res32[0x4];	// 0xc530
+	unsigned int	div_lcd;	// 0xc534
+	unsigned int	div_isp;	// 0xc538
+	unsigned int	div_maudio;	// 0xc53c
+	unsigned int	div_fsys0;	// 0xc540
+	unsigned int	div_fsys1;	// 0xc544
+	unsigned int	div_fsys2;	// 0xc548
+	unsigned int	div_fsys3;	// 0xc54c
+	unsigned int	div_peril0;		// 0xc550
+	unsigned int	div_peril1;		// 0xc554
+	unsigned int	div_peril2;		// 0xc558
+	unsigned int	div_peril3;		// 0xc55c
+	unsigned int	div_peril4;		// 0xc560
+	unsigned int	div_peril5;		// 0xc564
+	unsigned int	div_cam1;		// 0xc568
+	unsigned char	res33[0x14];	// 0xc56c
+	unsigned int	div2_ratio;		// 0xc580
+	unsigned char	res34[0x8c];	// 0xc584
+	unsigned int	div_stat_top;	// 0xc610
+	unsigned char	res35[0xc];		// 0xc614
+	unsigned int	div_stat_cam;	// 0xc620
+	unsigned int	div_stat_tv;	// 0xc624
+	unsigned int	div_stat_mfc;	// 0xc628
+	unsigned int	div_stat_g3d;	// 0xc62c
+	unsigned char	res36[0x4];		// 0xc630
+	unsigned int	div_stat_lcd;	// 0xc634
+	unsigned int	div_stat_isp;	// 0xc638
+	unsigned int	div_stat_maudio;	// 0xc63c
+	unsigned int	div_stat_fsys0;		// 0xc640
+	unsigned int	div_stat_fsys1;		// 0xc644
+	unsigned int	div_stat_fsys2;		// 0xc648
+	unsigned int	div_stat_fsys3;		// 0xc64c
+	unsigned int	div_stat_peril0;	// 0xc650
+	unsigned int	div_stat_peril1;	// 0xc654
+	unsigned int	div_stat_peril2;	// 0xc658
+	unsigned int	div_stat_peril3;	// 0xc65c
+	unsigned int	div_stat_peril4;	// 0xc660
+	unsigned int	div_stat_peril5;	// 0xc664
+	unsigned int	div_stat_cam1;		// 0xc668
+	unsigned char	res37[0x14];		// 0xc66c
+	unsigned int	div2_stat;		// 0xc680
+	unsigned char	res38[0x29c];	// 0xc684
+	unsigned int	gate_ip_cam;	// 0xc920
+	unsigned int	gate_ip_tv;		// 0xc924
+	unsigned int	gate_ip_mfc;	// 0xc928
+	unsigned int	gate_ip_g3d;	// 0xc92c
+	unsigned char	res39[0x4];		// 0xc930
+	unsigned int	gate_ip_lcd;	// 0xc934
+	unsigned int	gate_ip_isp;	// 0xc938
+	unsigned char	res40[0x4];		// 0xc93c
+	unsigned int	gate_ip_fsys;	// 0xc940
+	unsigned char	res41[0x8];		// 0xc944
+	unsigned int	gate_ip_gps;	// 0xc94c
+	unsigned int	gate_ip_peril;	// 0xc950
+	unsigned char	res42[0xc];		// 0xc954
+	unsigned char	res43[0x4];		// 0xc960
+	unsigned char	res44[0xc];		// 0xc964
+	unsigned int	gate_block;		// 0xc970
+	unsigned char	res45[0x8c];	// 0xc974
+	unsigned int	clkout_cmu_top;		// 0xca00
+	unsigned int	clkout_cmu_top_div_stat;	// 0xca04
+	unsigned char	res46[0x3600];	// 0xca08
+	unsigned int	mpll_lock;		// 0x10008
+	unsigned char	res47[0xfc];	// 0x1000c
+	unsigned int	mpll_con0;		// 0x10108
+	unsigned int	mpll_con1;		// 0x1010c
+	unsigned char	res48[0xf0];	// 0x10110
+	unsigned int	src_dmc;		// 0x10200
+	unsigned char	res49[0xfc];	// 0x10204
+	unsigned int	src_mask_dmc;	// 0x10300
+	unsigned char	res50[0xfc];	// 0x10304
+	unsigned int	mux_stat_dmc;	// 0x10400
+	unsigned char	res51[0xfc];	// 0x10404
+	unsigned int	div_dmc0;		// 0x10500
+	unsigned int	div_dmc1;		// 0x10504
+	unsigned char	res52[0xf8];	// 0x10508
+	unsigned int	div_stat_dmc0;	// 0x10600
+	unsigned int	div_stat_dmc1;	// 0x10604
+	unsigned char	res53[0xf8];	// 0x10608
+	unsigned int	gate_bus_dmc0;	// 0x10700
+	unsigned int	gate_bus_dmc1;	// 0x10704
+	unsigned char	res54[0x1f8];	// 0x10708
+	unsigned int	gate_ip_dmc0;	// 0x10900
+	unsigned int	gate_ip_dmc1;	// 0x10904
+	unsigned char	res55[0xf8];	// 0x10908
+	unsigned int	clkout_cmu_dmc;	// 0x10a00
+	unsigned int	clkout_cmu_dmc_div_stat;	// 0x10a04
+	unsigned char	res56[0x5f8];	// 0x10a08
+	unsigned int	dcgidx_map0;	// 0x11000
+	unsigned int	dcgidx_map1;	// 0x11004
+	unsigned int	dcgidx_map2;	// 0x11008
+	unsigned char	res57[0x14];	// 0x1100c
+	unsigned int	dcgperf_map0;	// 0x11020
+	unsigned int	dcgperf_map1;	// 0x11024
+	unsigned char	res58[0x18];	// 0x11028
+	unsigned int	dvcidx_map;		// 0x11040
+	unsigned char	res59[0x1c];	// 0x11044
+	unsigned int	freq_cpu;	// 0x11060
+	unsigned int	freq_dpm;	// 0x11064
+	unsigned char	res60[0x18];	// 0x11068
+	unsigned int	dvsemclk_en;	// 0x11080
+	unsigned int	maxperf;		// 0x11084
+	unsigned char	res61[0x8];		// 0x11088
+	unsigned int	dmc_freq_ctrl;	// 0x11090
+	unsigned int	dmc_pause_ctrl;	// 0x11094
+	unsigned int	dddrphy_lock_ctrl;	// 0x11098
+	unsigned int	c2c_state;		// 0x1109c
+	unsigned char	res62[0x2f60];	// 0x110a0
+	unsigned int	apll_lock;		// 0x14000
+	unsigned char	res63[0x8];		// 0x14004
+	unsigned char	res64[0xf4];	// 0x1400c
+	unsigned int	apll_con0;		// 0x14100
+	unsigned int	apll_con1;		// 0x14104
+	unsigned char	res65[0xf8];	// 0x14108
+	unsigned int	src_cpu;		// 0x14200
+	unsigned char	res66[0x1fc];	// 0x14204
+	unsigned int	mux_stat_cpu;	// 0x14400
+	unsigned char	res67[0xfc];	// 0x14404
+	unsigned int	div_cpu0;		// 0x14500
+	unsigned int	div_cpu1;		// 0x14504
+	unsigned char	res68[0xf8];	// 0x14508
+	unsigned int	div_stat_cpu0;	// 0x14600
+	unsigned int	div_stat_cpu1;	// 0x14604
+	unsigned char	res69[0x2f8];	// 0x14608
+	unsigned int	clk_gate_ip_cpu;	// 0x14900
+	unsigned char	res70[0xfc];		// 0x14904
+	unsigned int	clkout_cmu_cpu;		// 0x14a00
+	unsigned int	clkout_cmu_cpu_div_stat;	// 0x14a04
+	unsigned char	res71[0x5f8];		// 0x14a08
+	unsigned int	armclk_stopctrl;	// 0x15000
+	unsigned int	atclk_stopctrl;		// 0x15004
+	unsigned char	res72[0x10];		// 0x15008
+	unsigned char	res73[0x8];		// 0x15018
+	unsigned int	pwr_ctrl;		// 0x15020
+	unsigned int	pwr_ctrl2;		// 0x15024
+	unsigned char	res74[0xd8];	// 0x15028
+	unsigned int	apll_con0_l8;	// 0x15100
+	unsigned int	apll_con0_l7;	// 0x15104
+	unsigned int	apll_con0_l6;	// 0x15108
+	unsigned int	apll_con0_l5;	// 0x1510c
+	unsigned int	apll_con0_l4;	// 0x15110
+	unsigned int	apll_con0_l3;	// 0x15114
+	unsigned int	apll_con0_l2;	// 0x15118
+	unsigned int	apll_con0_l1;	// 0x1511c
+	unsigned int	iem_control;	// 0x15120
+	unsigned char	res75[0xdc];	// 0x15124
+	unsigned int	apll_con1_l8;	// 0x15200
+	unsigned int	apll_con1_l7;	// 0x15204
+	unsigned int	apll_con1_l6;	// 0x15208
+	unsigned int	apll_con1_l5;	// 0x1520c
+	unsigned int	apll_con1_l4;	// 0x15210
+	unsigned int	apll_con1_l3;	// 0x15214
+	unsigned int	apll_con1_l2;	// 0x15218
+	unsigned int	apll_con1_l1;	// 0x1521c
+	unsigned char	res76[0xe0];	// 0x15220
+	unsigned int	div_iem_l8;		// 0x15300
+	unsigned int	div_iem_l7;		// 0x15304
+	unsigned int	div_iem_l6;		// 0x15308
+	unsigned int	div_iem_l5;		// 0x1530c
+	unsigned int	div_iem_l4;		// 0x15310
+	unsigned int	div_iem_l3;		// 0x15314
+	unsigned int	div_iem_l2;		// 0x15318
+	unsigned int	div_iem_l1;		// 0x1531c
+	unsigned char	res77[0xe0];	// 0x15320
+	unsigned int	l2_status;		// 0x15400
+	unsigned char	res78[0xc];		// 0x15404
+	unsigned int	cpu_status;		// 0x15410
+	unsigned char	res79[0xc];		// 0x15414
+	unsigned int	ptm_status;		// 0x15420
+	unsigned char	res80[0x2edc];	// 0x15424
+	unsigned int	div_isp0;		// 0x18300
+	unsigned int	div_isp1;		// 0x18304
+	unsigned char	res81[0xf8];	// 0x18308
+	unsigned int	div_stat_isp0;	// 0x18400
+	unsigned int	div_stat_isp1;	// 0x18404
+	unsigned char	res82[0x3f8];	// 0x18408
+	unsigned int	gate_ip_isp0;	// 0x18800
+	unsigned int	gate_ip_isp1;	// 0x18804
+	unsigned char	res83[0x1f8];	// 0x18808
+	unsigned int	clkout_cmu_isp;	// 0x18a00
+	unsigned int	clkout_cmu_ispd_div_stat;	// 0x18a04
+	unsigned char	res84[0xf8];	// 0x18a08
+	unsigned int	cmu_isp_spar0;	// 0x18b00
+	unsigned int	cmu_isp_spar1;	// 0x18b04
+	unsigned int	cmu_isp_spar2;	// 0x18b08
+	unsigned int	cmu_isp_spar3;	// 0x18b0c
 };
 
 struct exynos5_clock {
diff -urN u-boot-2015.04/arch/arm/include/asm/arch-exynos/dmc.h uboot_2015.04/arch/arm/include/asm/arch-exynos/dmc.h
--- u-boot-2015.04/arch/arm/include/asm/arch-exynos/dmc.h	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/arch/arm/include/asm/arch-exynos/dmc.h	2017-11-29 16:39:36.000000000 -0800
@@ -3,112 +3,112 @@
 
 #ifndef __ASSEMBLY__
 struct exynos4_dmc {
-	unsigned int concontrol;
-	unsigned int memcontrol;
-	unsigned int memconfig0;
-	unsigned int memconfig1;
-	unsigned int directcmd;
-	unsigned int prechconfig;
-	unsigned int phycontrol0;
-	unsigned int phycontrol1;
-	unsigned int phycontrol2;
-	unsigned int phycontrol3;
-	unsigned int pwrdnconfig;
-	unsigned char res1[0x4];
-	unsigned int timingref;
-	unsigned int timingrow;
-	unsigned int timingdata;
-	unsigned int timingpower;
-	unsigned int phystatus;
-	unsigned int phyzqcontrol;
-	unsigned int chip0status;
-	unsigned int chip1status;
-	unsigned int arefstatus;
-	unsigned int mrstatus;
-	unsigned int phytest0;
-	unsigned int phytest1;
-	unsigned int qoscontrol0;
-	unsigned int qosconfig0;
-	unsigned int qoscontrol1;
-	unsigned int qosconfig1;
-	unsigned int qoscontrol2;
-	unsigned int qosconfig2;
-	unsigned int qoscontrol3;
-	unsigned int qosconfig3;
-	unsigned int qoscontrol4;
-	unsigned int qosconfig4;
-	unsigned int qoscontrol5;
-	unsigned int qosconfig5;
-	unsigned int qoscontrol6;
-	unsigned int qosconfig6;
-	unsigned int qoscontrol7;
-	unsigned int qosconfig7;
-	unsigned int qoscontrol8;
-	unsigned int qosconfig8;
-	unsigned int qoscontrol9;
-	unsigned int qosconfig9;
-	unsigned int qoscontrol10;
-	unsigned int qosconfig10;
-	unsigned int qoscontrol11;
-	unsigned int qosconfig11;
-	unsigned int qoscontrol12;
-	unsigned int qosconfig12;
-	unsigned int qoscontrol13;
-	unsigned int qosconfig13;
-	unsigned int qoscontrol14;
-	unsigned int qosconfig14;
-	unsigned int qoscontrol15;
-	unsigned int qosconfig15;
-	unsigned int qostimeout0;
-	unsigned int qostimeout1;
-	unsigned char res2[0x8];
-	unsigned int ivcontrol;
-	unsigned char res3[0x8];
-	unsigned int perevconfig;
-	unsigned char res4[0xDF00];
-	unsigned int pmnc_ppc_a;
-	unsigned char res5[0xC];
-	unsigned int cntens_ppc_a;
-	unsigned char res6[0xC];
-	unsigned int cntenc_ppc_a;
-	unsigned char res7[0xC];
-	unsigned int intens_ppc_a;
-	unsigned char res8[0xC];
-	unsigned int intenc_ppc_a;
-	unsigned char res9[0xC];
-	unsigned int flag_ppc_a;
-	unsigned char res10[0xAC];
-	unsigned int ccnt_ppc_a;
-	unsigned char res11[0xC];
-	unsigned int pmcnt0_ppc_a;
-	unsigned char res12[0xC];
-	unsigned int pmcnt1_ppc_a;
-	unsigned char res13[0xC];
-	unsigned int pmcnt2_ppc_a;
-	unsigned char res14[0xC];
-	unsigned int pmcnt3_ppc_a;
-	unsigned char res15[0xEBC];
-	unsigned int pmnc_ppc_m;
-	unsigned char res16[0xC];
-	unsigned int cntens_ppc_m;
-	unsigned char res17[0xC];
-	unsigned int cntenc_ppc_m;
-	unsigned char res18[0xC];
-	unsigned int intens_ppc_m;
-	unsigned char res19[0xC];
-	unsigned int intenc_ppc_m;
-	unsigned char res20[0xC];
-	unsigned int flag_ppc_m;
-	unsigned char res21[0xAC];
-	unsigned int ccnt_ppc_m;
-	unsigned char res22[0xC];
-	unsigned int pmcnt0_ppc_m;
-	unsigned char res23[0xC];
-	unsigned int pmcnt1_ppc_m;
-	unsigned char res24[0xC];
-	unsigned int pmcnt2_ppc_m;
-	unsigned char res25[0xC];
-	unsigned int pmcnt3_ppc_m;
+	unsigned int concontrol;	// 0x0000
+	unsigned int memcontrol;	// 0x0004
+	unsigned int memconfig0;	// 0x0008
+	unsigned int memconfig1;	// 0x000c
+	unsigned int directcmd;		// 0x0010
+	unsigned int prechconfig;	// 0x0014
+	unsigned int phycontrol0;	// 0x0018
+	unsigned int phycontrol1;	// 0x001c
+	unsigned int phycontrol2;	// 0x0020
+	unsigned int phycontrol3;	// 0x0024
+	unsigned int pwrdnconfig;	// 0x0028
+	unsigned char res1[0x4];	// 0x002c
+	unsigned int timingref;		// 0x0030
+	unsigned int timingrow;		// 0x0034
+	unsigned int timingdata;	// 0x0038
+	unsigned int timingpower;	// 0x003c
+	unsigned int phystatus;		// 0x0040
+	unsigned int phyzqcontrol;	// 0x0044
+	unsigned int chip0status;	// 0x0048
+	unsigned int chip1status;	// 0x004c
+	unsigned int arefstatus;	// 0x0050
+	unsigned int mrstatus;		// 0x0054
+	unsigned int phytest0;		// 0x0058
+	unsigned int phytest1;		// 0x005c
+	unsigned int qoscontrol0;	// 0x0060
+	unsigned int qosconfig0;	// 0x0064
+	unsigned int qoscontrol1;	// 0x0068
+	unsigned int qosconfig1;	// 0x006c
+	unsigned int qoscontrol2;	// 0x0070
+	unsigned int qosconfig2;	// 0x0074
+	unsigned int qoscontrol3;	// 0x0078
+	unsigned int qosconfig3;	// 0x007c
+	unsigned int qoscontrol4;	// 0x0080
+	unsigned int qosconfig4;	// 0x0084
+	unsigned int qoscontrol5;	// 0x0088
+	unsigned int qosconfig5;	// 0x008c
+	unsigned int qoscontrol6;	// 0x0090
+	unsigned int qosconfig6;	// 0x0094
+	unsigned int qoscontrol7;	// 0x0098
+	unsigned int qosconfig7;	// 0x009c
+	unsigned int qoscontrol8;	// 0x00a0
+	unsigned int qosconfig8;	// 0x00a4
+	unsigned int qoscontrol9;	// 0x00a8
+	unsigned int qosconfig9;	// 0x00ac
+	unsigned int qoscontrol10;	// 0x00b0
+	unsigned int qosconfig10;	// 0x00b4
+	unsigned int qoscontrol11;	// 0x00b8
+	unsigned int qosconfig11;	// 0x00bc
+	unsigned int qoscontrol12;	// 0x00c0
+	unsigned int qosconfig12;	// 0x00c4
+	unsigned int qoscontrol13;	// 0x00c8
+	unsigned int qosconfig13;	// 0x00cc
+	unsigned int qoscontrol14;	// 0x00d0
+	unsigned int qosconfig14;	// 0x00d4
+	unsigned int qoscontrol15;	// 0x00d8
+	unsigned int qosconfig15;	// 0x00dc
+	unsigned int qostimeout0;	// 0x00e0
+	unsigned int qostimeout1;	// 0x00e4
+	unsigned char res2[0x8];	// 0x00e8
+	unsigned int ivcontrol;		// 0x00f0
+	unsigned char res3[0x8];	// 0x00f4
+	unsigned int perevconfig;	// 0x00fc
+	unsigned char res4[0xDF00];	// 0x0100
+	unsigned int pmnc_ppc_a;	// 0xe000
+	unsigned char res5[0xC];	// 0xe004
+	unsigned int cntens_ppc_a;	// 0xe010
+	unsigned char res6[0xC];	// 0xe014
+	unsigned int cntenc_ppc_a;	// 0xe020
+	unsigned char res7[0xC];	// 0xe024
+	unsigned int intens_ppc_a;	// 0xe030
+	unsigned char res8[0xC];	// 0xe034
+	unsigned int intenc_ppc_a;	// 0xe040
+	unsigned char res9[0xC];	// 0xe044
+	unsigned int flag_ppc_a;	// 0xe050
+	unsigned char res10[0xAC];	// 0xe054
+	unsigned int ccnt_ppc_a;	// 0xe100
+	unsigned char res11[0xC];	// 0xe104
+	unsigned int pmcnt0_ppc_a;	// 0xe110
+	unsigned char res12[0xC];	// 0xe114
+	unsigned int pmcnt1_ppc_a;	// 0xe120
+	unsigned char res13[0xC];	// 0xe124
+	unsigned int pmcnt2_ppc_a;	// 0xe130
+	unsigned char res14[0xC];	// 0xe134
+	unsigned int pmcnt3_ppc_a;	// 0xe140
+	unsigned char res15[0xEBC];	// 0xe144
+	unsigned int pmnc_ppc_m;	// 0xf000
+	unsigned char res16[0xC];	// 0xf004
+	unsigned int cntens_ppc_m;	// 0xf010
+	unsigned char res17[0xC];	// 0xf014
+	unsigned int cntenc_ppc_m;	// 0xf020
+	unsigned char res18[0xC];	// 0xf024
+	unsigned int intens_ppc_m;	// 0xf030
+	unsigned char res19[0xC];	// 0xf034
+	unsigned int intenc_ppc_m;	// 0xf040
+	unsigned char res20[0xC];	// 0xf044
+	unsigned int flag_ppc_m;	// 0xf050
+	unsigned char res21[0xAC];	// 0xf054
+	unsigned int ccnt_ppc_m;	// 0xf100
+	unsigned char res22[0xC];	// 0xf104
+	unsigned int pmcnt0_ppc_m;	// 0xf110
+	unsigned char res23[0xC];	// 0xf114
+	unsigned int pmcnt1_ppc_m;	// 0xf120
+	unsigned char res24[0xC];	// 0xf124
+	unsigned int pmcnt2_ppc_m;	// 0xf130
+	unsigned char res25[0xC];	// 0xf134
+	unsigned int pmcnt3_ppc_m;	// 0xf140
 };
 
 struct exynos5_dmc {
diff -urN u-boot-2015.04/arch/arm/include/asm/arch-exynos/fb.h uboot_2015.04/arch/arm/include/asm/arch-exynos/fb.h
--- u-boot-2015.04/arch/arm/include/asm/arch-exynos/fb.h	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/arch/arm/include/asm/arch-exynos/fb.h	2017-11-29 16:39:36.000000000 -0800
@@ -184,7 +184,7 @@
 #define EXYNOS_VIDCON0_PNRMODE_BGR_P			(1 << 17)
 #define EXYNOS_VIDCON0_PNRMODE_RGB_S			(2 << 17)
 #define EXYNOS_VIDCON0_PNRMODE_BGR_S			(3 << 17)
-#define EXYNOS_VIDCON0_PNRMODE_MASK			(3 << 17)
+#define EXYNOS_VIDCON0_PNRMODE_MASK			(1 << 17)
 #define EXYNOS_VIDCON0_PNRMODE_SHIFT			(17)
 #define EXYNOS_VIDCON0_CLKVALUP_ALWAYS			(0 << 16)
 #define EXYNOS_VIDCON0_CLKVALUP_START_FRAME		(1 << 16)
diff -urN u-boot-2015.04/arch/arm/include/asm/arch-exynos/power.h uboot_2015.04/arch/arm/include/asm/arch-exynos/power.h
--- u-boot-2015.04/arch/arm/include/asm/arch-exynos/power.h	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/arch/arm/include/asm/arch-exynos/power.h	2017-11-29 16:39:36.000000000 -0800
@@ -210,6 +210,214 @@
 	unsigned int	gps_alive_option;
 };
 
+struct exynos4x12_power {
+	unsigned int	om_stat;		// 0x00
+	unsigned char	res1[0xc];		// 0x04
+	unsigned int	rtc_clko_sel;		// 0x10
+	unsigned int	gnss_rtc_out_ctrl;	// 0x14
+	unsigned int	lpi_denial_mask0;	// 0x18
+	unsigned int	lpi_denial_mask1;	// 0x1c
+	unsigned int	lpi_denial_mask2;	// 0x20
+	unsigned int	c2c_ctrl;		// 0x24
+	unsigned char	res2[0x1d8];				// 0x28
+	unsigned int	central_seq_config;			// 0x200
+	unsigned int	res3;
+	unsigned int	central_seq_option;			// 0x208
+	unsigned char	res4[0x1f4];				// 0x20c
+	unsigned int	swreset;					// 0x400
+	unsigned int	rst_stat;					// 0x404
+	unsigned int	auto_wdt_reset_disable;		// 0x408
+	unsigned int	mask_wdt_reset_request;		// 0x40c
+	unsigned char	res5[0x1f0];				// 0x410
+	unsigned int	wakeup_stat;				// 0x600
+	unsigned int	eint_wakeup_mask;			// 0x604
+	unsigned int	wakeup_mask;				// 0x608
+	unsigned char	res6[0xf4];					// 0x60c
+	unsigned int	hdmi_phy_control;			// 0x700
+	unsigned int	usbdevice_phy_control;		// 0x704
+	unsigned int	hsic_1_phy_control;			// 0x708
+	unsigned int	hsic_2_phy_control;			// 0x70c
+	unsigned int	mipi_phy0_control;			// 0x710
+	unsigned int	mipi_phy1_control;			// 0x714
+	unsigned int	adc_phy_control;			// 0x718
+	unsigned char	res7[0x64];					// 0x71c
+	unsigned int	body_bias_con0;				// 0x780
+	unsigned int	body_bias_con1;				// 0x784
+	unsigned int	body_bias_con2;				// 0x788
+	unsigned int	body_bias_con3;				// 0x78c
+	unsigned char	res8[0x70];					// 0x790
+	unsigned int	inform0;		// 0x800
+	unsigned int	inform1;		// 0x804
+	unsigned int	inform2;
+	unsigned int	inform3;
+	unsigned int	inform4;
+	unsigned int	inform5;
+	unsigned int	inform6;
+	unsigned int	inform7;		// 0x81c
+	unsigned char	res9[0x1e0];	// 0x820
+	unsigned int	pmu_debug;		// 0xa00
+	unsigned char	res10[0x5fc];
+	unsigned int	arm_core0_sys_pwr_reg;		// 0x1000
+	unsigned char	res11[0xc];
+	unsigned int	arm_core1_sys_pwr_reg;		// 0x1010
+	unsigned char	res12[0x6c];
+	unsigned int	arm_common_sys_pwr_reg;		// 0x1080
+	unsigned char	res13[0x3c];
+	unsigned int	arm_cpu_l2_0_sys_pwr_reg;	// 0x10c0
+	unsigned int	arm_cpu_l2_1_sys_pwr_reg;	// 0x10c4
+	unsigned char	res14[0x38];
+	unsigned int	cmu_aclkstop_sys_pwr_reg;	// 0x1100
+	unsigned int	cmu_sclkstop_sys_pwr_reg;	// 0x1104
+	unsigned char	res15[0x4];
+	unsigned int	cmu_reset_sys_pwr_reg;		// 0x110c
+	unsigned char	res16[0x10];
+	unsigned int	apll_sysclk_sys_pwr_reg;	// 0x1120
+	unsigned int	mpll_sysclk_sys_pwr_reg;
+	unsigned int	vpll_sysclk_sys_pwr_reg;
+	unsigned int	epll_sysclk_sys_pwr_reg;	// 0x112c
+	unsigned char	res17[0x8];
+	unsigned int	cmu_clkstop_gps_alive_sys_pwr_reg;	// 0x1138
+	unsigned int	cmu_reset_gps_alive_sys_pwr_reg;
+	unsigned int	cmu_clkstop_cam_sys_pwr_reg;		// 0x1140
+	unsigned int	cmu_clkstop_tv_sys_pwr_reg;			// 0x1144
+	unsigned int	cmu_clkstop_mfc_sys_pwr_reg;		// 0x1148
+	unsigned int	cmu_clkstop_g3d_sys_pwr_reg;		// 0x114c
+	unsigned int	cmu_clkstop_lcd0_sys_pwr_reg;		// 0x1150
+	unsigned int	cmu_clkstop_isp_sys_pwr_reg;		// 0x1154
+	unsigned int	cmu_clkstop_maudio_sys_pwr_reg;		// 0x1158
+	unsigned int	cmu_clkstop_gps_sys_pwr_reg;		// 0x115c
+	unsigned int	cmu_reset_cam_sys_pwr_reg;			// 0x1160
+	unsigned int	cmu_reset_tv_sys_pwr_reg;			// 0x1164
+	unsigned int	cmu_reset_mfc_sys_pwr_reg;			// 0x1168
+	unsigned int	cmu_reset_g3d_sys_pwr_reg;			// 0x116c
+	unsigned int	cmu_reset_lcd0_sys_pwr_reg;			// 0x1170
+	unsigned int	cmu_reset_isp_sys_pwr_reg;			// 0x1174
+	unsigned int	cmu_reset_maudio_sys_pwr_reg;		// 0x1178
+	unsigned int	cmu_reset_gps_sys_pwr_reg;			// 0x117c
+	unsigned int	top_bus_sys_pwr_reg;				// 0x1180
+	unsigned int	top_retention_sys_pwr_reg;			// 0x1184
+	unsigned int	top_pwr_sys_pwr_reg;				// 0x1188
+	unsigned char	res18[0x14];						// 0x118c
+	unsigned int	logic_reset_sys_pwr_reg;			// 0x11a0
+	unsigned char	res19[0x1c];						// 0x11a4
+	unsigned int	onenandxl_mem_sys_pwr_reg;			// 0x11c0
+	unsigned int	hsi_mem_sys_pwr_reg;		// 0x11c4
+	unsigned char	res20[0x4];					// 0x11c8
+	unsigned int	usbotg_mem_sys_pwr_reg;		// 0x11cc
+	unsigned int	sdmmc_mem_sys_pwr_reg;		// 0x11d0
+	unsigned int	cssys_mem_sys_pwr_reg;		// 0x11d4
+	unsigned int	secss_mem_sys_pwr_reg;		// 0x11d8
+	unsigned int	potator_mem_sys_pwr_reg;	// 0x11dc
+	unsigned char	res21[0x20];				// 0x11e0
+	unsigned int	pad_retention_dram_sys_pwr_reg;		// 0x1200
+	unsigned int	pad_retention_maudio_sys_pwr_reg;
+	unsigned char	res22[0x18];		// 0x1208
+	unsigned int	pad_retention_gpio_sys_pwr_reg;		// 0x1220
+	unsigned int	pad_retention_uart_sys_pwr_reg;
+	unsigned int	pad_retention_mmca_sys_pwr_reg;		// 0x1228
+	unsigned int	pad_retention_mmcb_sys_pwr_reg;
+	unsigned int	pad_retention_ebia_sys_pwr_reg;
+	unsigned int	pad_retention_ebib_sys_pwr_reg;		// 0x1234
+	unsigned char	res23[0x8];		// 0x1238
+	unsigned int	pad_isolation_sys_pwr_reg;		// 0x1240
+	unsigned char	res24[0x1c];
+	unsigned int	pad_alv_sel_sys_pwr_reg;		// 0x1260
+	unsigned char	res25[0x1c];
+	unsigned int	xusbxti_sys_pwr_reg;		// 0x1280
+	unsigned int	xxti_sys_pwr_reg;		// 0x1284
+	unsigned char	res26[0x38];
+	unsigned int	ext_regulator_sys_pwr_reg;		// 0x12c0
+	unsigned char	res27[0x3c];
+	unsigned int	gpio_mode_sys_pwr_reg;		// 0x1300
+	unsigned char	res28[0x3c];
+	unsigned int	gpio_mode_maudio_sys_pwr_reg;	// 0x1340
+	unsigned char	res29[0x3c];
+	unsigned int	cam_sys_pwr_reg;	// 0x1380
+	unsigned int	tv_sys_pwr_reg;		// 0x1384
+	unsigned int	mfc_sys_pwr_reg;	// 0x1388
+	unsigned int	g3d_sys_pwr_reg;	// 0x138c
+	unsigned int	lcd0_sys_pwr_reg;	// 0x1390
+	unsigned int	isp_sys_pwr_reg;	// 0x1384
+	unsigned int	maudio_sys_pwr_reg;	// 0x1398
+	unsigned int	gps_sys_pwr_reg;
+	unsigned int	gps_alive_sys_pwr_reg;	// 0x13a0
+	unsigned char	res30[0xc5c];
+	unsigned int	arm_core0_configuration;	// 0x2000
+	unsigned int	arm_core0_status;	// 0x2004
+	unsigned int	arm_core0_option;	// 0x2008
+	unsigned char	res31[0x74];
+	unsigned int	arm_core1_configuration;	// 0x2080
+	unsigned int	arm_core1_status;	// 0x2084
+	unsigned int	arm_core1_option;	// 0x2088
+	unsigned char	res32[0x37c];
+	unsigned int	arm_common_option;	// 0x2408
+	unsigned char	res33[0x1f4];
+	unsigned int	arm_cpu_l2_0_configuration;		// 0x2600
+	unsigned int	arm_cpu_l2_0_status;	// 0x2604
+	unsigned char	res34[0x18];
+	unsigned int	arm_cpu_l2_1_configuration;		// 0x2620
+	unsigned int	arm_cpu_l2_1_status;	// 0x2624
+	unsigned char	res35[0xa00];
+	unsigned int	pad_retention_maudio_option;	// 0x3028
+	unsigned char	res36[0xdc];
+	unsigned int	pad_retention_gpio_option;	// 0x3108
+	unsigned char	res37[0x1c];
+	unsigned int	pad_retention_uart_option;	// 0x3128
+	unsigned char	res38[0x1c];
+	unsigned int	pad_retention_mmca_option;	// 0x3148
+	unsigned char	res39[0x1c];
+	unsigned int	pad_retention_mmcb_option;	// 0x3168
+	unsigned char	res40[0x1c];
+	unsigned int	pad_retention_ebia_option;	// 0x3188
+	unsigned char	res41[0x1c];
+	unsigned int	pad_retention_ebib_option;	// 0x31a8
+	unsigned char	res42[0x160];
+	unsigned int	ps_hold_control;	// 0x330c
+	unsigned char	res43[0xf0];
+	unsigned int	xusbxti_configuration;	// 0x3400
+	unsigned int	xusbxti_status;		// 0x3404
+	unsigned char	res44[0x14];
+	unsigned int	xusbxti_duration;	// 0x341c
+	unsigned int	xxti_configuration;	// 0x3420
+	unsigned int	xxti_status;		// 0x3424
+	unsigned char	res45[0x14];
+	unsigned int	xxti_duration;		// 0x343c
+	unsigned char	res46[0x1dc];
+	unsigned int	ext_regulator_duration;		// 0x361c
+	unsigned char	res47[0x5e0];
+	unsigned int	cam_configuration;		// 0x3c00
+	unsigned int	cam_status;		// 0x3c04
+	unsigned int	cam_option;		// 0x3c08
+	unsigned char	res48[0x14];
+	unsigned int	tv_configuration;	// 0x3c20
+	unsigned int	tv_status;		// 0x3c24
+	unsigned int	tv_option;		// 0x3c28
+	unsigned char	res49[0x14];
+	unsigned int	mfc_configuration;	// 0x3c40
+	unsigned int	mfc_status;		// 0x3c44
+	unsigned int	mfc_option;		// 0x3c48
+	unsigned char	res50[0x14];
+	unsigned int	g3d_configuration;	// 0x3c60
+	unsigned int	g3d_status;
+	unsigned int	g3d_option;		// 0x3c68
+	unsigned char	res51[0x14];
+	unsigned int	lcd0_configuration;		// 0x3c80
+	unsigned int	lcd0_status;
+	unsigned int	lcd0_option;	// 0x3c88
+	unsigned char	res52[0x14];
+	unsigned int	isp_configuration;		// 0x3ca0
+	unsigned int	isp_status;
+	unsigned int	isp_option;		// 0x3ca8
+	unsigned char	res53[0x34];
+	unsigned int	gps_configuration;	// 0x3ce0
+	unsigned int	gps_status;
+	unsigned int	gps_option;		// 0x3ce8
+	unsigned char	res54[0x14];
+	unsigned int	gps_alive_configuration;	// 0x3d00
+	unsigned int	gps_alive_status;	// 0x3d04
+	unsigned int	gps_alive_option;	// 0x3d08
+};
+
 struct exynos4412_power {
 	unsigned char	res1[0x0704];
 	unsigned int	usbhost_phy_control;
diff -urN u-boot-2015.04/arch/arm/include/asm/arch-exynos/tzpc.h uboot_2015.04/arch/arm/include/asm/arch-exynos/tzpc.h
--- u-boot-2015.04/arch/arm/include/asm/arch-exynos/tzpc.h	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/arch/arm/include/asm/arch-exynos/tzpc.h	2017-11-29 16:39:36.000000000 -0800
@@ -9,29 +9,29 @@
 
 #ifndef __ASSEMBLY__
 struct exynos_tzpc {
-	unsigned int r0size;
-	char res1[0x7FC];
-	unsigned int decprot0stat;
-	unsigned int decprot0set;
-	unsigned int decprot0clr;
-	unsigned int decprot1stat;
-	unsigned int decprot1set;
-	unsigned int decprot1clr;
-	unsigned int decprot2stat;
-	unsigned int decprot2set;
-	unsigned int decprot2clr;
-	unsigned int decprot3stat;
-	unsigned int decprot3set;
-	unsigned int decprot3clr;
-	char res2[0x7B0];
-	unsigned int periphid0;
-	unsigned int periphid1;
-	unsigned int periphid2;
-	unsigned int periphid3;
-	unsigned int pcellid0;
-	unsigned int pcellid1;
-	unsigned int pcellid2;
-	unsigned int pcellid3;
+	unsigned int r0size;		// 0x0000
+	char res1[0x7FC];			// 0x0004
+	unsigned int decprot0stat;	// 0x0800
+	unsigned int decprot0set;	// 0x0804
+	unsigned int decprot0clr;	// 0x0808
+	unsigned int decprot1stat;	// 0x080c
+	unsigned int decprot1set;	// 0x0810
+	unsigned int decprot1clr;	// 0x0814
+	unsigned int decprot2stat;	// 0x0818
+	unsigned int decprot2set;	// 0x081c
+	unsigned int decprot2clr;	// 0x0820
+	unsigned int decprot3stat;	// 0x0824
+	unsigned int decprot3set;	// 0x0828
+	unsigned int decprot3clr;	// 0x082c
+	char res2[0x7B0];			// 0x0830
+	unsigned int periphid0;		// 0x0fe0
+	unsigned int periphid1;		// 0x0fe4
+	unsigned int periphid2;		// 0x0fe8
+	unsigned int periphid3;		// 0x0fec
+	unsigned int pcellid0;		// 0x0ff0
+	unsigned int pcellid1;		// 0x0ff4
+	unsigned int pcellid2;		// 0x0ff8
+	unsigned int pcellid3;		// 0x0ffc
 };
 
 #define EXYNOS4_NR_TZPC_BANKS		6
diff -urN u-boot-2015.04/arch/arm/include/debug/8250.S uboot_2015.04/arch/arm/include/debug/8250.S
--- u-boot-2015.04/arch/arm/include/debug/8250.S	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/arch/arm/include/debug/8250.S	2017-11-29 16:39:36.000000000 -0800
@@ -31,6 +31,7 @@
 #endif
 
 #define UART_SHIFT CONFIG_DEBUG_UART_8250_SHIFT
+#define UART_TX		0x8
 
 		.macro	senduart,rd,rx
 		store	\rd, [\rx, #UART_TX << UART_SHIFT]
@@ -45,6 +46,8 @@
 
 		.macro	waituart,rd,rx
 #ifdef CONFIG_DEBUG_UART_8250_FLOW_CONTROL
+#define UART_MSR		0x4
+#define UART_MSR_CTS	0x2
 1001:		load	\rd, [\rx, #UART_MSR << UART_SHIFT]
 		tst	\rd, #UART_MSR_CTS
 		beq	1001b
diff -urN u-boot-2015.04/arch/arm/lib/bootm.c uboot_2015.04/arch/arm/lib/bootm.c
--- u-boot-2015.04/arch/arm/lib/bootm.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/arch/arm/lib/bootm.c	2017-11-29 16:39:36.000000000 -0800
@@ -28,6 +28,7 @@
 #if defined(CONFIG_ARMV7_NONSEC) || defined(CONFIG_ARMV7_VIRT)
 #include <asm/armv7.h>
 #endif
+#define _DEBUG	1
 
 DECLARE_GLOBAL_DATA_PTR;
 
diff -urN u-boot-2015.04/arch/arm/lib/crt0.S uboot_2015.04/arch/arm/lib/crt0.S
--- u-boot-2015.04/arch/arm/lib/crt0.S	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/arch/arm/lib/crt0.S	2017-11-29 16:39:36.000000000 -0800
@@ -83,7 +83,8 @@
 	str	sp, [r9, #GD_MALLOC_BASE]
 #endif
 	/* mov r0, #0 not needed due to above code */
-	bl	board_init_f
+	bl led_on
+	bl board_init_f
 
 #if ! defined(CONFIG_SPL_BUILD)
 
diff -urN u-boot-2015.04/arch/arm/lib/debug.S uboot_2015.04/arch/arm/lib/debug.S
--- u-boot-2015.04/arch/arm/lib/debug.S	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/arch/arm/lib/debug.S	2017-11-29 16:39:36.000000000 -0800
@@ -80,7 +80,7 @@
 		b	2f
 1:		waituart r2, r3
 		senduart r1, r3
-		busyuart r2, r3
+		//busyuart r2, r3
 		teq	r1, #'\n'
 		moveq	r1, #'\r'
 		beq	1b
diff -urN u-boot-2015.04/arch/arm/lib/itop-4412_setup.h uboot_2015.04/arch/arm/lib/itop-4412_setup.h
--- u-boot-2015.04/arch/arm/lib/itop-4412_setup.h	1969-12-31 16:00:00.000000000 -0800
+++ uboot_2015.04/arch/arm/lib/itop-4412_setup.h	2017-11-29 16:53:34.000000000 -0800
@@ -0,0 +1,2319 @@
+/*
+ * Machine Specific Values for EXYNOS4012 based board
+ *
+ * Copyright (C) 2011 Samsung Electronics
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef _ITOP-4412_SETUP_H
+#define _ITOP-4412_SETUP_H
+
+#include <config.h>
+#include <asm/arch/cpu.h>
+
+#define BIT0 				0x00000001
+#define BIT1 				0x00000002
+#define BIT2 				0x00000004
+#define BIT3 				0x00000008
+#define BIT4 				0x00000010
+#define BIT5 				0x00000020
+#define BIT6				0x00000040
+#define BIT7				0x00000080
+#define BIT8				0x00000100
+#define BIT9				0x00000200
+#define BIT10				0x00000400
+#define BIT11				0x00000800
+#define BIT12				0x00001000
+#define BIT13				0x00002000
+#define BIT14				0x00004000
+#define BIT15				0x00008000
+#define BIT16				0x00010000
+#define BIT17				0x00020000
+#define BIT18				0x00040000
+#define BIT19				0x00080000
+#define BIT20				0x00100000
+#define BIT21				0x00200000
+#define BIT22				0x00400000
+#define BIT23				0x00800000
+#define BIT24				0x01000000
+#define BIT25				0x02000000
+#define BIT26				0x04000000
+#define BIT27				0x08000000
+#define BIT28				0x10000000
+#define BIT29				0x20000000
+#define BIT30				0x40000000
+#define BIT31				0x80000000
+
+/****************************************
+ * S5PC210 device base addresses 
+ ****************************************/
+
+#define ELFIN_DMA_BASE			0xE0900000
+#define ELFIN_LCD_BASE			0x11c00000 // mj for 4x12 0xF8000000
+#define ELFIN_USB_HOST_BASE		0xEC200000
+
+/*-----LCD REG------*/
+#define rVIDCON0 	0x11c00000
+#define rVIDCON1 	0x11c00004
+#define rVIDCON2 	0x11c00008
+#define rVIDCON3 	0x11c0000c
+#define rVIDTCON0 	0x11c00010
+#define rVIDTCON1 	0x11c00014
+#define rVIDTCON2 	0x11c00018
+#define rVIDTCON3 	0x11c0001C
+
+#define rWINCON0 	0x11c00020
+
+#define rVIDOSD0A 	0x11c00040
+#define rVIDOSD0B 	0x11c00044
+
+#define rVIDW00ADD0B0 	0x11c000a0
+#define rVIDW00ADD1B0 	0x11c000d0
+
+#define rVIDW0ALPHA0 	0x11c0021c
+#define rVIDW0ALPHA1 	0x11c00220
+
+#define rSHADOWCON 	0x11c00034
+#define rVIDW00ADD2 	0x11c00100
+
+
+/* I2C BUS */
+#define ELFIN_I2C_BASE			(I2C0_BASE)
+#define I2C0_BASE                       0x13860000
+#define I2C1_BASE                       0x13870000
+#define I2C2_BASE                       0x13880000
+#define I2C3_BASE                       0x13890000
+#define I2C4_BASE                       0x138A0000
+#define I2C5_BASE                       0x138B0000
+#define I2C6_BASE                       0x138C0000
+#define I2C7_BASE                       0x138D0000
+#define I2C8_BASE                       0x138E0000
+
+#define ELFIN_I2S_BASE			0xE2100000
+#define ELFIN_ADC_BASE			0x126C0000//zd:ly: 0x13910000--> 0x12150000-->0x126C0000
+#define ELFIN_ADC1_BASE			0x13911000
+
+#define ELFIN_SPI_BASE			0xE1300000
+
+
+#define ELFIN_HSMMC_0_BASE		0x12510000
+#define ELFIN_HSMMC_1_BASE		0x12520000
+#define ELFIN_HSMMC_2_BASE		0x12530000
+#define ELFIN_HSMMC_3_BASE		0x12540000
+#define ELFIN_HSMMC_4_BASE		0x12550000
+
+#define POWER_BASE		        0x10020000
+#define OMR_OFFSET			0x0
+#define CMU_BASE		        0x10030000
+
+#define ELFIN_CLOCK_POWER_BASE		0x10030000
+
+#define SFR_BASE                        0x10000000
+#define SYSREG_CON_BASE                 0x10010000
+#define SYSC_PMU_BASE                   0x10020000
+#define SYSC_CMU_TOP_BASE               0x10030000
+#define SYSC_CMU_CORE_BASE              0x10040000
+
+
+#define C2C_CTRL_OFFSET 0x24
+
+
+#define L2C_BASE                        0x10502000
+#define L2C_POWERCON_OFFSET             0xF80
+#define L2C_DYNAMIC_CLK_GATING          (1 << 1)
+#define L2C_STANDBY_MODE                (1 << 0)
+#define SCU_BASE                        0x10500000
+#define IC_STANDBY                      (1 << 6)
+#define SCU_STANDBY                     (1 << 5)
+#define SCU_ENABLE                      (1 << 0)
+
+#define ELFIN_TZPC0_BASE		0x10110000
+#define ELFIN_TZPC1_BASE		0x10120000
+#define ELFIN_TZPC2_BASE		0x10130000
+#define ELFIN_TZPC3_BASE		0x10140000
+#define ELFIN_TZPC4_BASE		0x10150000
+#define ELFIN_TZPC5_BASE		0x10160000
+
+
+#define IO_RET_REL			((1 << 31) | (1 << 29) | (1 << 28)) 
+
+/* Clock Controller for s5pc210*/
+#define MPLL_CON_OFFSET			0x108
+#define EPLL_CON_OFFSET			0x110
+#define VPLL_CON_OFFSET			0x120
+
+#define CLK_SRC_LEFTBUS_OFFSET		0x04200
+#define CLK_DIV_LEFTBUS_OFFSET		0x04500
+
+#define CLK_SRC_RIGHTBUS_OFFSET		0x08200
+#define CLK_DIV_RIGHTBUS_OFFSET		0x08500
+
+#define EPLL_LOCK_OFFSET		0x0C010
+#define VPLL_LOCK_OFFSET		0x0C020
+#define EPLL_CON0_OFFSET		0x0C110
+#define EPLL_CON1_OFFSET		0x0C114
+#define EPLL_CON2_OFFSET		0x0C118
+#define VPLL_CON2_OFFSET		0x0C128
+#define VPLL_CON0_OFFSET		0x0C120
+#define VPLL_CON1_OFFSET		0x0C124
+
+#define CLK_SRC_TOP0_OFFSET		0x0C210
+#define CLK_SRC_TOP1_OFFSET		0x0C214
+#define CLK_SRC_FSYS_OFFSET		0x0C240
+#define CLK_SRC_PERIL0_OFFSET		0x0C250
+#define CLK_DIV_TOP_OFFSET		0x0C510
+#define CLK_DIV_FSYS1_OFFSET		0x0C544
+#define CLK_DIV_FSYS2_OFFSET		0x0C548
+#define CLK_DIV_FSYS3_OFFSET		0x0C54c
+#define CLK_DIV_PERIL0_OFFSET		0x0C550
+
+#define CLK_SRC_DMC_OFFSET		0x10200
+#define CLK_DIV_DMC0_OFFSET		0x10500
+#define CLK_DIV_DMC1_OFFSET		0x10504
+
+#define APLL_LOCK_OFFSET		0x14000
+#define MPLL_LOCK_OFFSET		0x10008 //mj 0x14008 ->0x10008
+#define APLL_CON0_OFFSET		0x14100
+#define APLL_CON1_OFFSET		0x14104
+#define MPLL_CON0_OFFSET		0x10108
+#define MPLL_CON1_OFFSET		0x1010C
+
+#define CLK_SRC_CPU_OFFSET		0x14200
+#define CLK_DIV_CPU0_OFFSET		0x14500
+#define CLK_DIV_CPU1_OFFSET		0x14504
+
+#define CLK_DIV_CPU0            __REG(ELFIN_CLOCK_POWER_BASE+CLK_DIV_CPU0_OFFSET)//mj
+#define CLK_SRC_FSYS            __REG(ELFIN_CLOCK_POWER_BASE+CLK_SRC_FSYS_OFFSET)
+#define CLK_DIV_FSYS1           __REG(ELFIN_CLOCK_POWER_BASE+CLK_DIV_FSYS1_OFFSET)
+#define CLK_DIV_FSYS2           __REG(ELFIN_CLOCK_POWER_BASE+CLK_DIV_FSYS2_OFFSET)
+#define CLK_DIV_FSYS3           __REG(ELFIN_CLOCK_POWER_BASE+CLK_DIV_FSYS3_OFFSET)
+#define APLL_CON0_REG           __REG(ELFIN_CLOCK_POWER_BASE+APLL_CON0_OFFSET)
+#define MPLL_CON0_REG           __REG(ELFIN_CLOCK_POWER_BASE+MPLL_CON0_OFFSET)
+#define EPLL_CON0_REG           __REG(ELFIN_CLOCK_POWER_BASE+EPLL_CON0_OFFSET)
+#define VPLL_CON0_REG           __REG(ELFIN_CLOCK_POWER_BASE+VPLL_CON0_OFFSET)
+
+#define CLK_SRC0_OFFSET			0x200
+#define CLK_SRC1_OFFSET			0x204
+#define CLK_SRC2_OFFSET			0x208
+#define CLK_SRC3_OFFSET			0x20c
+#define CLK_SRC4_OFFSET			0x210
+#define CLK_SRC5_OFFSET			0x214
+#define CLK_SRC6_OFFSET			0x218
+#define CLK_SRC_MASK0_OFFSET		0x280
+#define CLK_SRC_MASK1_OFFSET		0x284
+
+#define CLK_DIV0_OFFSET			0x300
+#define CLK_DIV1_OFFSET			0x304
+#define CLK_DIV2_OFFSET			0x308
+#define CLK_DIV3_OFFSET			0x30c
+#define CLK_DIV4_OFFSET			0x310
+#define CLK_DIV5_OFFSET			0x314
+#define CLK_DIV6_OFFSET			0x318
+#define CLK_DIV7_OFFSET			0x31c
+
+#define CLK_GATE_IP0_OFFSET		0x460
+#define CLK_GATE_IP1_OFFSET		0x464
+#define CLK_GATE_IP2_OFFSET		0x468
+#define CLK_GATE_IP3_OFFSET		0x46c
+#define CLK_GATE_IP4_OFFSET		0x470
+#define CLK_GATE_BLOCK_OFFSET		0x480
+
+#define CLK_OUT_OFFSET			0x500
+#define CLK_DIV_STAT0_OFFSET		0x1000
+#define CLK_DIV_STAT1_OFFSET		0x1004
+#define CLK_MUX_STAT0_OFFSET		0x1100
+#define CLK_MUX_STAT1_OFFSET		0x1104
+#define SW_RST_OFFSET			0x0400
+
+#define ONEDRAM_CFG_OFFSET		0x6208
+
+#define OSC_CON_OFFSET			0x8000
+#define RST_STAT_OFFSET			0xa000
+#define PWR_CFG_OFFSET			0xc000
+#define	EINT_WAKEUP_MASK_OFFSET		0xc004
+#define WAKEUP_MASK_OFFSET		0xc008
+#define NORMAL_CFG_OFFSET		0xc010
+#define IDLE_CFG_OFFSET			0xc020
+#define STOP_CFG_OFFSET			0xc030
+#define STOP_MEM_CFG_OFFSET		0xc034
+#define SLEEP_CFG_OFFSET		0xc040
+#define OSC_FREQ_OFFSET			0xc100
+#define OSC_STABLE_OFFSET		0xc104
+#define PWR_STABLE_OFFSET		0xc108
+#define MTC_STABLE_OFFSET		0xc110
+#define CLAMP_STABLE_OFFSET		0xc114
+#define WAKEUP_STAT_OFFSET		0xc200
+#define BLK_PWR_STAT_OFFSET		0xc204
+#define BODY_BIAS_CON_OFFSET		0xc300
+#define ION_SKEW_CON_OFFSET		0xc310
+#define ION_SKEW_MON_OFFSET		0xc314
+#define IOFF_SKEW_CON_OFFSET		0xc320
+#define IOFF_SKEW_MON_OFFSET		0xc324
+#define OTHERS_OFFSET			0xe000
+#define OM_STAT_OFFSET			0xe100
+#define MIE_CONTROL_OFFSET		0xe800
+#define HDMI_CONTROL_OFFSET		0xe804
+#define USB_PHY_CONTROL_OFFSET		0x0704
+#define DAC_CONTROL_OFFSET		0xe810
+#define MIPI_DPHY_CONTROL_OFFSET	0xe814
+#define ADC_CONTROL_OFFSET		0xe818
+#define PS_HOLD_CONTROL_OFFSET		0x330c
+
+#define INFORM0_OFFSET			0xf000
+#define INFORM1_OFFSET			0xf004
+#define INFORM2_OFFSET			0xf008
+#define INFORM3_OFFSET			0xf00c
+#define INFORM4_OFFSET			0xf010
+#define INFORM5_OFFSET			0xf014
+#define INFORM6_OFFSET			0xf018
+#define INFORM7_OFFSET			0xf01c
+
+#define INF_REG0_OFFSET			0x00
+#define INF_REG1_OFFSET			0x04
+#define INF_REG2_OFFSET			0x08
+#define INF_REG3_OFFSET			0x0c
+#define INF_REG4_OFFSET			0x10
+#define INF_REG5_OFFSET			0x14
+#define INF_REG6_OFFSET			0x18
+#define INF_REG7_OFFSET			0x1c
+
+/*
+ * boot select
+ */
+#define BOOT_ONENAND	0x1
+#define BOOT_NAND		0x40000
+#define BOOT_MMCSD		0x3
+#define BOOT_NOR		0x4
+#define BOOT_SEC_DEV	0x5
+#define BOOT_EMMC43		0x6
+#define BOOT_EMMC441	0x7
+
+#define APLL_LOCK_REG			__REG(ELFIN_CLOCK_POWER_BASE+APLL_LOCK_OFFSET)
+#define MPLL_LOCK_REG			__REG(ELFIN_CLOCK_POWER_BASE+MPLL_LOCK_OFFSET
+#define EPLL_LOCK_REG			__REG(ELFIN_CLOCK_POWER_BASE+EPLL_LOCK_OFFSET)
+#define HPLL_LOCK_REG			__REG(ELFIN_CLOCK_POWER_BASE+HPLL_LOCK_OFFSET)
+#define APLL_CON0_REG			__REG(ELFIN_CLOCK_POWER_BASE+APLL_CON0_OFFSET)
+#define APLL_CON1_REG			__REG(ELFIN_CLOCK_POWER_BASE+APLL_CON1_OFFSET)
+#define MPLL_CON_REG			__REG(ELFIN_CLOCK_POWER_BASE+MPLL_CON_OFFSET)
+#define EPLL_CON_REG			__REG(ELFIN_CLOCK_POWER_BASE+EPLL_CON_OFFSET)
+#define HPLL_CON_REG			__REG(ELFIN_CLOCK_POWER_BASE+HPLL_CON_OFFSET)
+#define CLK_SRC0_REG			__REG(ELFIN_CLOCK_POWER_BASE+CLK_SRC0_OFFSET)
+#define CLK_SRC1_REG			__REG(ELFIN_CLOCK_POWER_BASE+CLK_SRC1_OFFSET)
+#define CLK_SRC2_REG			__REG(ELFIN_CLOCK_POWER_BASE+CLK_SRC2_OFFSET)
+#define CLK_SRC3_REG			__REG(ELFIN_CLOCK_POWER_BASE+CLK_SRC3_OFFSET)
+#define CLK_SRC4_REG			__REG(ELFIN_CLOCK_POWER_BASE+CLK_SRC4_OFFSET)
+#define CLK_DIV0_REG			__REG(ELFIN_CLOCK_POWER_BASE+CLK_DIV0_OFFSET)
+#define CLK_DIV1_REG			__REG(ELFIN_CLOCK_POWER_BASE+CLK_DIV1_OFFSET)
+#define CLK_DIV2_REG			__REG(ELFIN_CLOCK_POWER_BASE+CLK_DIV2_OFFSET)
+#define CLK_DIV3_REG			__REG(ELFIN_CLOCK_POWER_BASE+CLK_DIV3_OFFSET)
+#define CLK_DIV4_REG			__REG(ELFIN_CLOCK_POWER_BASE+CLK_DIV4_OFFSET)
+#define CLK_DIV5_REG			__REG(ELFIN_CLOCK_POWER_BASE+CLK_DIV5_OFFSET)
+#define CLK_DIV6_REG			__REG(ELFIN_CLOCK_POWER_BASE+CLK_DIV6_OFFSET)
+#define CLK_DIV7_REG			__REG(ELFIN_CLOCK_POWER_BASE+CLK_DIV7_OFFSET)
+
+#define CLK_OUT_REG			__REG(ELFIN_CLOCK_POWER_BASE+CLK_OUT_OFFSET)
+
+#define CLK_GATE_IP0_REG		__REG(ELFIN_CLOCK_POWER_BASE+CLK_GATE_IP0_OFFSET)
+#define CLK_GATE_IP1_REG		__REG(ELFIN_CLOCK_POWER_BASE+CLK_GATE_IP1_OFFSET)
+#define CLK_GATE_IP2_REG		__REG(ELFIN_CLOCK_POWER_BASE+CLK_GATE_IP2_OFFSET)
+#define CLK_GATE_IP3_REG		__REG(ELFIN_CLOCK_POWER_BASE+CLK_GATE_IP3_OFFSET)
+#define CLK_GATE_IP4_REG		__REG(ELFIN_CLOCK_POWER_BASE+CLK_GATE_IP4_OFFSET)
+#define CLK_GATE_BLOCK_REG		__REG(ELFIN_CLOCK_POWER_BASE+CLK_GATE_BLOCK_OFFSET)
+
+#define CLK_DIV_STAT0_REG		__REG(ELFIN_CLOCK_POWER_BASE+CLK_DIV_STAT0_OFFSET)
+#define CLK_DIV_STAT1_REG		__REG(ELFIN_CLOCK_POWER_BASE+CLK_DIV_STAT1_OFFSET)
+#define CLK_MUX_STAT0_REG		__REG(ELFIN_CLOCK_POWER_BASE+CLK_MUX_STAT0_OFFSET)
+#define CLK_MUX_STAT1_REG		__REG(ELFIN_CLOCK_POWER_BASE+CLK_MUX_STAT1_OFFSET)
+
+
+#define AHB_CON0_REG			__REG(ELFIN_CLOCK_POWER_BASE+AHB_CON0_OFFSET)
+#define AHB_CON1_REG			__REG(ELFIN_CLOCK_POWER_BASE+AHB_CON1_OFFSET)
+#define AHB_CON2_REG			__REG(ELFIN_CLOCK_POWER_BASE+AHB_CON2_OFFSET)
+#define SELECT_DMA_REG			__REG(ELFIN_CLOCK_POWER_BASE+SELECT_DMA_OFFSET)
+#define SW_RST_REG			__REG(POWER_BASE+SW_RST_OFFSET)
+#define SYS_ID_REG			__REG(ELFIN_CLOCK_POWER_BASE+SYS_ID_OFFSET)
+#define MEM_SYS_CFG_REG			__REG(ELFIN_CLOCK_POWER_BASE+MEM_SYS_CFG_OFFSET)
+#define QOS_OVERRIDE0_REG		__REG(ELFIN_CLOCK_POWER_BASE+QOS_OVERRIDE0_OFFSET)
+#define QOS_OVERRIDE1_REG		__REG(ELFIN_CLOCK_POWER_BASE+QOS_OVERRIDE1_OFFSET)
+#define MEM_CFG_STAT_REG		__REG(ELFIN_CLOCK_POWER_BASE+MEM_CFG_STAT_OFFSET)
+#define PWR_CFG_REG			__REG(ELFIN_CLOCK_POWER_BASE+PWR_CFG_OFFSET)
+#define EINT_MASK_REG			__REG(ELFIN_CLOCK_POWER_BASE+EINT_MASK_OFFSET)
+#define NOR_CFG_REG			__REG(ELFIN_CLOCK_POWER_BASE+NOR_CFG_OFFSET)
+#define STOP_CFG_REG			__REG(ELFIN_CLOCK_POWER_BASE+STOP_CFG_OFFSET)
+#define SLEEP_CFG_REG			__REG(ELFIN_CLOCK_POWER_BASE+SLEEP_CFG_OFFSET)
+#define OSC_FREQ_REG			__REG(ELFIN_CLOCK_POWER_BASE+OSC_FREQ_OFFSET)
+#define OSC_CNT_VAL_REG			__REG(ELFIN_CLOCK_POWER_BASE+OSC_CNT_VAL_OFFSET)
+#define PWR_CNT_VAL_REG			__REG(ELFIN_CLOCK_POWER_BASE+PWR_CNT_VAL_OFFSET)
+#define FPC_CNT_VAL_REG			__REG(ELFIN_CLOCK_POWER_BASE+FPC_CNT_VAL_OFFSET)
+#define MTC_CNT_VAL_REG			__REG(ELFIN_CLOCK_POWER_BASE+MTC_CNT_VAL_OFFSET)
+#define OTHERS_REG			__REG(ELFIN_CLOCK_POWER_BASE+OTHERS_OFFSET)
+#define RST_STAT_REG			__REG(ELFIN_CLOCK_POWER_BASE+RST_STAT_OFFSET)
+#define WAKEUP_STAT_REG			__REG(ELFIN_CLOCK_POWER_BASE+WAKEUP_STAT_OFFSET)
+#define BLK_PWR_STAT_REG		__REG(ELFIN_CLOCK_POWER_BASE+BLK_PWR_STAT_OFFSET)
+
+//Robin
+#define PS_HOLD_CONTROL 		__REG(POWER_BASE+PS_HOLD_CONTROL_OFFSET)
+
+#define PRO_ID_BASE			0x10000000
+#define PRO_ID_OFFSET			0x00
+#define PKG_ID_OFFSET			0x04
+
+#define INF_REG_BASE			0x10020800
+#define INF_REG0_REG			__REG(INF_REG_BASE+INF_REG0_OFFSET)
+#define INF_REG1_REG			__REG(INF_REG_BASE+INF_REG1_OFFSET)
+#define INF_REG2_REG			__REG(INF_REG_BASE+INF_REG2_OFFSET)
+#define INF_REG3_REG			__REG(INF_REG_BASE+INF_REG3_OFFSET)
+#define INF_REG4_REG			__REG(INF_REG_BASE+INF_REG4_OFFSET)
+#define INF_REG5_REG			__REG(INF_REG_BASE+INF_REG5_OFFSET)
+#define INF_REG6_REG			__REG(INF_REG_BASE+INF_REG6_OFFSET)
+#define INF_REG7_REG			__REG(INF_REG_BASE+INF_REG7_OFFSET)
+
+#define APLL_LOCK			(ELFIN_CLOCK_POWER_BASE+APLL_LOCK_OFFSET)
+#define MPLL_LOCK			(ELFIN_CLOCK_POWER_BASE+MPLL_LOCK_OFFSET)
+#define EPLL_LOCK			(ELFIN_CLOCK_POWER_BASE+EPLL_LOCK_OFFSET)
+#define APLL_CON			(ELFIN_CLOCK_POWER_BASE+APLL_CON_OFFSET)
+#define MPLL_CON			(ELFIN_CLOCK_POWER_BASE+MPLL_CON_OFFSET)
+#define EPLL_CON0			(ELFIN_CLOCK_POWER_BASE+EPLL_CON0_OFFSET)
+#define EPLL_CON1			(ELFIN_CLOCK_POWER_BASE+EPLL_CON1_OFFSET)
+#define CLK_SRC				(ELFIN_CLOCK_POWER_BASE+CLK_SRC_OFFSET)
+#define CLK_DIV0			(ELFIN_CLOCK_POWER_BASE+CLK_DIV0_OFFSET)
+#define CLK_DIV1			(ELFIN_CLOCK_POWER_BASE+CLK_DIV1_OFFSET)
+#define CLK_DIV2			(ELFIN_CLOCK_POWER_BASE+CLK_DIV2_OFFSET)
+#define CLK_OUT				(ELFIN_CLOCK_POWER_BASE+CLK_OUT_OFFSET)
+#define HCLK_GATE			(ELFIN_CLOCK_POWER_BASE+HCLK_GATE_OFFSET)
+#define PCLK_GATE			(ELFIN_CLOCK_POWER_BASE+PCLK_GATE_OFFSET)
+#define SCLK_GATE			(ELFIN_CLOCK_POWER_BASE+SCLK_GATE_OFFSET)
+#define AHB_CON0			(ELFIN_CLOCK_POWER_BASE+AHB_CON0_OFFSET)
+#define AHB_CON1			(ELFIN_CLOCK_POWER_BASE+AHB_CON1_OFFSET)
+#define AHB_CON2			(ELFIN_CLOCK_POWER_BASE+AHB_CON2_OFFSET)
+#define SELECT_DMA			(ELFIN_CLOCK_POWER_BASE+SELECT_DMA_OFFSET)
+#define SW_RST				(ELFIN_CLOCK_POWER_BASE+SW_RST_OFFSET)
+#define SYS_ID				(ELFIN_CLOCK_POWER_BASE+SYS_ID_OFFSET)
+#define MEM_SYS_CFG			(ELFIN_CLOCK_POWER_BASE+MEM_SYS_CFG_OFFSET)
+#define QOS_OVERRIDE0			(ELFIN_CLOCK_POWER_BASE+QOS_OVERRIDE0_OFFSET)
+#define QOS_OVERRIDE1			(ELFIN_CLOCK_POWER_BASE+QOS_OVERRIDE1_OFFSET)
+#define MEM_CFG_STAT			(ELFIN_CLOCK_POWER_BASE+MEM_CFG_STAT_OFFSET)
+#define PWR_CFG				(ELFIN_CLOCK_POWER_BASE+PWR_CFG_OFFSET)
+#define EINT_MASK			(ELFIN_CLOCK_POWER_BASE+EINT_MASK_OFFSET)
+#define NOR_CFG				(ELFIN_CLOCK_POWER_BASE+NOR_CFG_OFFSET)
+#define STOP_CFG			(ELFIN_CLOCK_POWER_BASE+STOP_CFG_OFFSET)
+#define SLEEP_CFG			(ELFIN_CLOCK_POWER_BASE+SLEEP_CFG_OFFSET)
+#define OSC_FREQ			(ELFIN_CLOCK_POWER_BASE+OSC_FREQ_OFFSET)
+#define OSC_CNT_VAL			(ELFIN_CLOCK_POWER_BASE+OSC_CNT_VAL_OFFSET)
+#define PWR_CNT_VAL			(ELFIN_CLOCK_POWER_BASE+PWR_CNT_VAL_OFFSET)
+#define FPC_CNT_VAL			(ELFIN_CLOCK_POWER_BASE+FPC_CNT_VAL_OFFSET)
+#define MTC_CNT_VAL			(ELFIN_CLOCK_POWER_BASE+MTC_CNT_VAL_OFFSET)
+#define OTHERS				(ELFIN_CLOCK_POWER_BASE+OTHERS_OFFSET)
+#define RST_STAT			(ELFIN_CLOCK_POWER_BASE+RST_STAT_OFFSET)
+#define WAKEUP_STAT			(ELFIN_CLOCK_POWER_BASE+WAKEUP_STAT_OFFSET)
+#define BLK_PWR_STAT			(ELFIN_CLOCK_POWER_BASE+BLK_PWR_STAT_OFFSET)
+#define USB_PHY_CONTROL			(0x10020000+USB_PHY_CONTROL_OFFSET)//(ELFIN_CLOCK_POWER_BASE+USB_PHY_CONTROL_OFFSET)
+#define INF_REG0			(ELFIN_CLOCK_POWER_BASE+INF_REG0_OFFSET)
+#define INF_REG1			(ELFIN_CLOCK_POWER_BASE+INF_REG1_OFFSET)
+#define INF_REG2			(ELFIN_CLOCK_POWER_BASE+INF_REG2_OFFSET)
+#define INF_REG3			(ELFIN_CLOCK_POWER_BASE+INF_REG3_OFFSET)
+#define INF_REG4			(ELFIN_CLOCK_POWER_BASE+INF_REG4_OFFSET)
+#define INF_REG5			(ELFIN_CLOCK_POWER_BASE+INF_REG5_OFFSET)
+#define INF_REG6			(ELFIN_CLOCK_POWER_BASE+INF_REG6_OFFSET)
+#define INF_REG7			(ELFIN_CLOCK_POWER_BASE+INF_REG7_OFFSET)
+
+/* Access Controller (TZPC) */
+#define TZPC_DECPROT0SET_OFFSET		0x804
+#define TZPC_DECPROT1SET_OFFSET		0x810
+#define TZPC_DECPROT2SET_OFFSET		0x81C
+#define TZPC_DECPROT3SET_OFFSET		0x828
+
+/* GPIO (Chapter 6) */
+#define ELFIN_GPIO_BASE			0xE0200000
+#define GPIO_BASE                       0x11000000
+#define GPIO_LB_BASE                    0x11400000
+
+#define GPA0CON_OFFSET 			0x000 
+#define GPA0DAT_OFFSET	 		0x004 
+#define GPA0PUD_OFFSET 			0x008 
+#define GPA0DRV_SR_OFFSET	 	0x00C 
+#define GPA0CONPDN_OFFSET 		0x010 
+#define GPA0PUDPDN_OFFSET 		0x014
+
+#define GPA1CON_OFFSET 			0x020
+#define GPA1DAT_OFFSET 			0x024 
+#define GPA1PUD_OFFSET 			0x028 
+#define GPA1DRV_SR_OFFSET 		0x02C 
+#define GPA1CONPDN_OFFSET 		0x030 
+#define GPA1PUDPDN_OFFSET 		0x034 
+
+#define GPBCON_OFFSET 			0x040 
+#define GPBDAT_OFFSET 			0x044 
+#define GPBPUD_OFFSET 			0x048 
+#define GPBDRV_SR_OFFSET 		0x04C 
+#define GPBCONPDN_OFFSET 		0x050 
+#define GPBPUDPDN_OFFSET 		0x054 
+
+#define GPC0CON_OFFSET 			0x060 
+#define GPC0DAT_OFFSET 			0x064 
+#define GPC0PUD_OFFSET 			0x068 
+#define GPC0DRV_SR_OFFSET 		0x06C 
+#define GPC0CONPDN_OFFSET 		0x070 
+#define GPC0PUDPDN_OFFSET 		0x074 
+
+#define GPC1CON_OFFSET 			0x080 
+#define GPC1DAT_OFFSET 			0x084 
+#define GPC1PUD_OFFSET 			0x088 
+#define GPC1DRV_SR_OFFSET 		0x08C 
+#define GPC1CONPDN_OFFSET 		0x090 
+#define GPC1PUDPDN_OFFSET 		0x094 
+
+#define GPD0CON_OFFSET 			0x0A0 
+#define GPD0DAT_OFFSET 			0x0A4 
+#define GPD0PUD_OFFSET 			0x0A8 
+#define GPD0DRV_SR_OFFSET 		0x0AC 
+#define GPD0CONPDN_OFFSET 		0x0B0 
+#define GPD0PUDPDN_OFFSET 		0x0B4 
+
+#define GPD1CON_OFFSET 			0x0C0 
+#define GPD1DAT_OFFSET 			0x0C4 
+#define GPD1PUD_OFFSET 			0x0C8 
+#define GPD1DRV_SR_OFFSET 		0x0CC 
+#define GPD1CONPDN_OFFSET 		0x0D0 
+#define GPD1PUDPDN_OFFSET 		0x0D4 
+
+#define GPE0CON_OFFSET 			0x0E0 
+#define GPE0DAT_OFFSET 			0x0E4 
+#define GPE0PUD_OFFSET 			0x0E8 
+#define GPE0DRV_SR_OFFSET 		0x0EC 
+#define GPE0CONPDN_OFFSET 		0x0F0 
+#define GPE0PUDPDN_OFFSET 		0x0F4
+
+#define GPE1CON_OFFSET 			0x100 
+#define GPE1DAT_OFFSET 			0x104 
+#define GPE1PUD_OFFSET 			0x108 
+#define GPE1DRV_SR_OFFSET 		0x10C 
+#define GPE1CONPDN_OFFSET 		0x110 
+#define GPE1PUDPDN_OFFSET 		0x114 
+
+#define GPE3CON_OFFSET 			0x140 
+#define GPE3DAT_OFFSET 			0x144 
+#define GPE3PUD_OFFSET 			0x148 
+#define GPE3DRV_SR_OFFSET 		0x14C 
+#define GPE3CONPDN_OFFSET 		0x150 
+#define GPE3PUDPDN_OFFSET 		0x154 
+
+
+
+#define GPF0CON_OFFSET 			0x180 
+#define GPF0DAT_OFFSET 			0x184 
+#define GPF0PUD_OFFSET 			0x188 
+#define GPF0DRV_SR_OFFSET 		0x18C 
+#define GPF0CONPDN_OFFSET 		0x190 
+#define GPF0PUDPDN_OFFSET 		0x194 
+
+#define GPF1CON_OFFSET 			0x1a0 
+#define GPF1DAT_OFFSET 			0x1a4 
+#define GPF1PUD_OFFSET 			0x1a8 
+#define GPF1DRV_SR_OFFSET 		0x1aC 
+#define GPF1CONPDN_OFFSET 		0x1b0 
+#define GPF1PUDPDN_OFFSET 		0x1b4 
+
+#define GPF2CON_OFFSET 			0x1c0 
+#define GPF2DAT_OFFSET 			0x1c4 
+#define GPF2PUD_OFFSET 			0x1c8 
+#define GPF2DRV_SR_OFFSET 		0x1cc 
+#define GPF2CONPDN_OFFSET 		0x1d0 
+#define GPF2PUDPDN_OFFSET 		0x1d4 
+
+#define GPF3CON_OFFSET 			0x1e0 
+#define GPF3DAT_OFFSET 			0x1e4 
+#define GPF3PUD_OFFSET 			0x1e8 
+#define GPF3DRV_SR_OFFSET 		0x1eC 
+#define GPF3CONPDN_OFFSET 		0x1f0 
+#define GPF3PUDPDN_OFFSET 		0x1f4 
+
+#define GPG0CON_OFFSET 			0x1A0 
+#define GPG0DAT_OFFSET 			0x1A4 
+#define GPG0PUD_OFFSET 			0x1A8 
+#define GPG0DRV_SR_OFFSET 		0x1AC 
+#define GPG0CONPDN_OFFSET 		0x1B0 
+#define GPG0PUDPDN_OFFSET 		0x1B4 
+
+#define GPG1CON_OFFSET 			0x1C0 
+#define GPG1DAT_OFFSET 			0x1C4 
+#define GPG1PUD_OFFSET 			0x1C8 
+#define GPG1DRV_SR_OFFSET 		0x1CC 
+#define GPG1CONPDN_OFFSET 		0x1D0 
+#define GPG1PUDPDN_OFFSET 		0x1D4 
+
+#define GPG2CON_OFFSET 			0x1E0 
+#define GPG2DAT_OFFSET 			0x1E4 
+#define GPG2PUD_OFFSET 			0x1E8 
+#define GPG2DRV_SR_OFFSET 		0x1EC 
+#define GPG2CONPDN_OFFSET 		0x1F0 
+#define GPG2PUDPDN_OFFSET 		0x1F4 
+
+#define GPG3CON_OFFSET 			0x200 
+#define GPG3DAT_OFFSET 			0x204 
+#define GPG3PUD_OFFSET 			0x208 
+#define GPG3DRV_SR_OFFSET 		0x20C 
+#define GPG3CONPDN_OFFSET 		0x210 
+#define GPG3PUDPDN_OFFSET 		0x214
+
+#define MP1_0DRV_SR_OFFSET 		0x3CC
+#define MP1_1DRV_SR_OFFSET 		0x3EC
+#define MP1_2DRV_SR_OFFSET 		0x40C
+#define MP1_3DRV_SR_OFFSET 		0x42C
+#define MP1_4DRV_SR_OFFSET 		0x44C
+#define MP1_5DRV_SR_OFFSET 		0x46C
+#define MP1_6DRV_SR_OFFSET 		0x48C
+#define MP1_7DRV_SR_OFFSET 		0x4AC
+#define MP1_8DRV_SR_OFFSET 		0x4CC
+
+#define MP2_0DRV_SR_OFFSET 		0x4EC
+#define MP2_1DRV_SR_OFFSET 		0x50C
+#define MP2_2DRV_SR_OFFSET 		0x52C
+#define MP2_3DRV_SR_OFFSET 		0x54C
+#define MP2_4DRV_SR_OFFSET 		0x56C
+#define MP2_5DRV_SR_OFFSET 		0x58C
+#define MP2_6DRV_SR_OFFSET 		0x5AC
+#define MP2_7DRV_SR_OFFSET 		0x5CC
+#define MP2_8DRV_SR_OFFSET 		0x5EC
+
+/* GPH0 */
+#define GPH0CON_OFFSET			0xc00
+#define GPH0DAT_OFFSET			0xc04
+#define GPH0PUD_OFFSET			0xc08
+#define GPH0DRV_OFFSET			0xc0c
+
+/* GPH1 */
+#define GPH1CON_OFFSET			0xc20
+#define GPH1DAT_OFFSET			0xc24
+#define GPH1PUD_OFFSET			0xc28
+#define GPH1DRV_OFFSET			0xc2c
+
+/* GPH2 */
+#define GPH2CON_OFFSET			0xc40
+#define GPH2DAT_OFFSET			0xc44
+#define GPH2PUD_OFFSET			0xc48
+#define GPH2DRV_OFFSET			0xc4c
+
+/* GPH3 */
+#define GPH3CON_OFFSET			0xc60
+#define GPH3DAT_OFFSET			0xc64
+#define GPH3PUD_OFFSET			0xc68
+#define GPH3DRV_OFFSET			0xc6c
+
+/* GPL0 */
+#define GPL0CON_OFFSET			0x00c0
+#define GPL0DAT_OFFSET			0x00c4
+#define GPL0PUD_OFFSET			0x00c8
+#define GPL0DRV_OFFSET			0x00cC
+
+/* GPL1 */
+#define GPL1CON_OFFSET			0x00E0
+#define GPL1DAT_OFFSET			0x00E4
+#define GPL1PUD_OFFSET			0x00E8
+#define GPL1DRV_OFFSET			0x00EC
+
+/* GPL2 */
+#define GPL2CON_OFFSET			0x0100
+#define GPL2DAT_OFFSET			0x0104
+#define GPL2PUD_OFFSET			0x0108
+#define GPL2DRV_OFFSET			0x010C
+
+/* GPX0 */
+#define GPX0CON_OFFSET			0xc00
+#define GPX0DAT_OFFSET			0xc04
+#define GPX0PUD_OFFSET			0xc08
+#define GPX0DRV_OFFSET			0xc0c
+
+
+/* GPX1 */
+#define GPX1CON_OFFSET			0xc20
+#define GPX1DAT_OFFSET			0xc24
+#define GPX1PUD_OFFSET			0xc28
+#define GPX1DRV_OFFSET			0xc2c
+
+
+/* GPX2 */
+#define GPX2CON_OFFSET			0xc40
+#define GPX2DAT_OFFSET			0xc44
+#define GPX2PUD_OFFSET			0xc48
+#define GPX2DRV_OFFSET			0xc4c
+
+
+#define GPICON_OFFSET 			0x220 
+#define GPIPUD_OFFSET 			0x228 
+#define GPIDRV_OFFSET_SR 		0x22C 
+#define GPIPUDPDN_OFFSET 		0x234 
+
+#define GPJ0CON_OFFSET 			0x240 
+#define GPJ0DAT_OFFSET 			0x244 
+#define GPJ0PUD_OFFSET 			0x248 
+#define GPJ0DRV_SR_OFFSET 		0x24C 
+#define GPJ0CONPDN_OFFSET 		0x250 
+#define GPJ0PUDPDN_OFFSET 		0x254 
+
+#define GPJ1CON_OFFSET 			0x260 
+#define GPJ1DAT_OFFSET 			0x264 
+#define GPJ1PUD_OFFSET 			0x268 
+#define GPJ1DRV_SR_OFFSET 		0x26C 
+#define GPJ1CONPDN_OFFSET 		0x270 
+#define GPJ1PUDPDN_OFFSET 		0x274 
+
+#define GPJ2CON_OFFSET 			0x280 
+#define GPJ2DAT_OFFSET 			0x284 
+#define GPJ2PUD_OFFSET 			0x288 
+#define GPJ2DRV_SR_OFFSET 		0x28C 
+#define GPJ2CONPDN_OFFSET 		0x290 
+#define GPJ2PUDPDN_OFFSET 		0x294 
+
+#define GPJ3CON_OFFSET 			0x2A0 
+#define GPJ3DAT_OFFSET 			0x2A4 
+#define GPJ3PUD_OFFSET 			0x2A8 
+#define GPJ3DRV_SR_OFFSET 		0x2AC 
+#define GPJ3CONPDN_OFFSET 		0x2B0 
+#define GPJ3PUDPDN_OFFSET 		0x2B4 
+
+#define GPJ4CON_OFFSET 			0x2C0 
+#define GPJ4DAT_OFFSET 			0x2C4 
+#define GPJ4PUD_OFFSET 			0x2C8 
+#define GPJ4DRV_SR_OFFSET 		0x2CC 
+#define GPJ4CONPDN_OFFSET 		0x2D0 
+#define GPJ4PUDPDN_OFFSET 		0x2D4 
+
+#define MP01CON_OFFSET 			0x120 
+#define MP01DAT_OFFSET 			0x124 
+#define MP01PUD_OFFSET 			0x128 
+#define MP01DRV_SR_OFFSET 		0x12C 
+#define MP01CONPDN_OFFSET 		0x130 
+#define MP01PUDPDN_OFFSET 		0x134 
+
+#define MP02CON_OFFSET                  0x140 
+#define MP02DAT_OFFSET                  0x144
+#define MP02PUD_OFFSET                  0x148 
+#define MP02DRV_SR_OFFSET               0x14c 
+#define MP02CONPDN_OFFSET               0x150 
+#define MP02PUDPDN_OFFSET               0x154
+
+#define MP03CON_OFFSET                  0x160 
+#define MP03DAT_OFFSET                  0x164
+#define MP03PUD_OFFSET                  0x168 
+#define MP03DRV_SR_OFFSET               0x16c 
+#define MP03CONPDN_OFFSET               0x170 
+#define MP03PUDPDN_OFFSET               0x174
+
+#define GPL0CON				(GPIO_BASE + GPL0CON_OFFSET)	 
+#define GPL0DAT				(GPIO_BASE + GPL0DAT_OFFSET)		 
+#define GPL0PUD				(GPIO_BASE + GPL0PUD_OFFSET)		 
+#define GPL0DRV				(GPIO_BASE + GPL0DRV_OFFSET)
+
+#define GPL1CON				(GPIO_BASE + GPL1CON_OFFSET)	 
+#define GPL1DAT				(GPIO_BASE + GPL1DAT_OFFSET)		 
+#define GPL1PUD				(GPIO_BASE + GPL1PUD_OFFSET)		 
+#define GPL1DRV				(GPIO_BASE + GPL1DRV_OFFSET)
+
+
+#define GPL2CON				(GPIO_BASE + GPL2CON_OFFSET)	 
+#define GPL2DAT				(GPIO_BASE + GPL2DAT_OFFSET)		 
+#define GPL2PUD				(GPIO_BASE + GPL2PUD_OFFSET)		 
+#define GPL2DRV				(GPIO_BASE + GPL2DRV_OFFSET)
+
+#define GPX0CON				(GPIO_BASE + GPX0CON_OFFSET)	 
+#define GPX0DAT				(GPIO_BASE + GPX0DAT_OFFSET)		 
+#define GPX0PUD				(GPIO_BASE + GPX0PUD_OFFSET)		 
+#define GPX0DRV				(GPIO_BASE + GPX0DRV_OFFSET)
+
+
+#define GPX1CON				(GPIO_BASE + GPX1CON_OFFSET)	 
+#define GPX1DAT				(GPIO_BASE + GPX1DAT_OFFSET)		 
+#define GPX1PUD				(GPIO_BASE + GPX1PUD_OFFSET)		 
+#define GPX1DRV				(GPIO_BASE + GPX1DRV_OFFSET)
+
+
+#define GPX2CON				(GPIO_BASE + GPX2CON_OFFSET)	 
+#define GPX2DAT				(GPIO_BASE + GPX2DAT_OFFSET)		 
+#define GPX2PUD				(GPIO_BASE + GPX2PUD_OFFSET)		 
+#define GPX2DRV				(GPIO_BASE + GPX2DRV_OFFSET)
+
+
+
+#define GPA0CON				(GPIO_LB_BASE + GPA0CON_OFFSET)	 
+#define GPA0DAT				(GPIO_LB_BASE + GPA0DAT_OFFSET)		 
+#define GPA0PUD				(GPIO_LB_BASE + GPA0PUD_OFFSET)		 
+#define GPA0DRV				(GPIO_LB_BASE + GPA0DRV_SR_OFFSET)
+#define GPA0CONPDN			(GPIO_LB_BASE + GPA0CONPDN_OFFSET)	 
+#define GPA0PUDPDN			(GPIO_LB_BASE + GPA0PUDPDN_OFFSET)	 
+#define GPA1CON				(GPIO_LB_BASE + GPA1CON_OFFSET) 
+#define GPA1DAT				(GPIO_LB_BASE + GPA1DAT_OFFSET) 		 
+#define GPA1PUD				(GPIO_LB_BASE + GPA1PUD_OFFSET) 		 
+#define GPA1DRV				(GPIO_LB_BASE + GPA1DRV_SR_OFFSET) 	 
+#define GPA1CONPDN			(GPIO_LB_BASE + GPA1CONPDN_OFFSET) 	 
+#define GPA1PUDPDN			(GPIO_LB_BASE + GPA1PUDPDN_OFFSET) 	 
+#define GPBCON				(GPIO_LB_BASE + GPBCON_OFFSET) 
+#define GPBDAT				(GPIO_LB_BASE + GPBDAT_OFFSET)			 
+#define GPBPUD				(GPIO_LB_BASE + GPBPUD_OFFSET)			 
+#define GPBDRV_SR			(GPIO_LB_BASE + GPBDRV_SR_OFFSET)
+#define GPBCONPDN			(GPIO_LB_BASE + GPBCONPDN_OFFSET)	 
+#define GPBPUDPDN			(GPIO_LB_BASE + GPBPUDPDN_OFFSET)	 
+#define GPC0CON				(GPIO_LB_BASE + GPC0CON_OFFSET)	 
+#define GPC0DAT				(GPIO_LB_BASE + GPC0DAT_OFFSET)		 
+#define GPC0PUD				(GPIO_LB_BASE + GPC0PUD_OFFSET)		 
+#define GPC0DRV				(GPIO_LB_BASE + GPC0DRV_SR_OFFSET)
+#define GPC0CONPDN			(GPIO_LB_BASE + GPC0CONPDN_OFFSET)	 
+#define GPC0PUDPDN			(GPIO_LB_BASE + GPC0PUDPDN_OFFSET)	 
+#define GPC1CON				(GPIO_LB_BASE + GPC1CON_OFFSET) 
+#define GPC1DAT				(GPIO_LB_BASE + GPC1DAT_OFFSET)		 
+#define GPC1PUD				(GPIO_LB_BASE + GPC1PUD_OFFSET)		 
+#define GPC1DRV				(GPIO_LB_BASE + GPC1DRV_SR_OFFSET)
+#define GPC1CONPDN			(GPIO_LB_BASE + GPC1CONPDN_OFFSET)	 
+#define GPC1PUDPDN			(GPIO_LB_BASE + GPC1PUDPDN_OFFSET)	 
+#define GPD0CON				(GPIO_LB_BASE + GPD0CON_OFFSET) 
+#define GPD0DAT				(GPIO_LB_BASE + GPD0DAT_OFFSET)		 
+#define GPD0PUD				(GPIO_LB_BASE + GPD0PUD_OFFSET)		 
+#define GPD0DRV				(GPIO_LB_BASE + GPD0DRV_SR_OFFSET)
+#define GPD0CONPDN			(GPIO_LB_BASE + GPD0CONPDN_OFFSET)	 
+#define GPD0PUDPDN			(GPIO_LB_BASE + GPD0PUDPDN_OFFSET)	 
+#define GPD1CON				(GPIO_LB_BASE + GPD1CON_OFFSET) 
+#define GPD1DAT				(GPIO_LB_BASE + GPD1DAT_OFFSET)		 
+#define GPD1PUD				(GPIO_LB_BASE + GPD1PUD_OFFSET)		 
+#define GPD1DRV				(GPIO_LB_BASE + GPD1DRV_SR_OFFSET)
+#define GPD1CONPDN			(GPIO_LB_BASE + GPD1CONPDN_OFFSET)	 
+#define GPD1PUDPDN			(GPIO_LB_BASE + GPD1PUDPDN_OFFSET)	 
+#define GPE0CON				(GPIO_LB_BASE + GPE0CON_OFFSET) 
+#define GPE0DAT				(GPIO_LB_BASE + GPE0DAT_OFFSET)		 
+#define GPE0PUD				(GPIO_LB_BASE + GPE0PUD_OFFSET)		 
+#define GPE0DRV				(GPIO_LB_BASE + GPE0DRV_SR_OFFSET)
+#define GPE0CONPDN			(GPIO_LB_BASE + GPE0CONPDN_OFFSET)
+#define GPE0PUDPDN			(GPIO_LB_BASE + GPE0PUDPDN_OFFSET)	 
+#define GPE1CON				(GPIO_LB_BASE + GPE1CON_OFFSET) 
+#define GPE1DAT				(GPIO_LB_BASE + GPE1DAT_OFFSET)		 
+#define GPE1PUD				(GPIO_LB_BASE + GPE1PUD_OFFSET)		 
+#define GPE1DRV				(GPIO_LB_BASE + GPE1DRV_SR_OFFSET)
+#define GPE1CONPDN			(GPIO_LB_BASE + GPE1CONPDN_OFFSET)	 
+#define GPE1PUDPDN			(GPIO_LB_BASE + GPE1PUDPDN_OFFSET)	
+
+#define GPE3CON				(GPIO_LB_BASE + GPE1CON_OFFSET) 
+#define GPE3DAT				(GPIO_LB_BASE + GPE1DAT_OFFSET)		 
+#define GPE3PUD				(GPIO_LB_BASE + GPE1PUD_OFFSET)		 
+#define GPE3DRV				(GPIO_LB_BASE + GPE1DRV_SR_OFFSET)
+#define GPE3CONPDN			(GPIO_LB_BASE + GPE1CONPDN_OFFSET)	 
+#define GPE3PUDPDN			(GPIO_LB_BASE + GPE1PUDPDN_OFFSET)
+
+
+#define GPF0CON				(GPIO_LB_BASE + GPF0CON_OFFSET) 
+#define GPF0DAT				(GPIO_LB_BASE + GPF0DAT_OFFSET)		 
+#define GPF0PUD				(GPIO_LB_BASE + GPF0PUD_OFFSET)		 
+#define GPF0DRV				(GPIO_LB_BASE + GPF0DRV_SR_OFFSET)
+#define GPF0CONPDN			(GPIO_LB_BASE + GPF0CONPDN_OFFSET)	 
+#define GPF0PUDPDN			(GPIO_LB_BASE + GPF0PUDPDN_OFFSET)	 
+#define GPF1CON				(GPIO_LB_BASE + GPF1CON_OFFSET) 
+#define GPF1DAT				(GPIO_LB_BASE + GPF1DAT_OFFSET)		 
+#define GPF1PUD				(GPIO_LB_BASE + GPF1PUD_OFFSET)		 
+#define GPF1DRV				(GPIO_LB_BASE + GPF1DRV_SR_OFFSET)
+#define GPF1CONPDN			(GPIO_LB_BASE + GPF1CONPDN_OFFSET)	 
+#define GPF1PUDPDN			(GPIO_LB_BASE + GPF1PUDPDN_OFFSET)	 
+#define GPF2CON				(GPIO_LB_BASE + GPF2CON_OFFSET) 
+#define GPF2DAT				(GPIO_LB_BASE + GPF2DAT_OFFSET)		 
+#define GPF2PUD				(GPIO_LB_BASE + GPF2PUD_OFFSET)		 
+#define GPF2DRV				(GPIO_LB_BASE + GPF2DRV_SR_OFFSET)	 
+#define GPF2CONPDN			(GPIO_LB_BASE + GPF2CONPDN_OFFSET)	 
+#define GPF2PUDPDN			(GPIO_LB_BASE + GPF2PUDPDN_OFFSET)	 
+#define GPF3CON				(GPIO_LB_BASE + GPF3CON_OFFSET) 
+#define GPF3DAT				(GPIO_LB_BASE + GPF3DAT_OFFSET)		 
+#define GPF3PUD				(GPIO_LB_BASE + GPF3PUD_OFFSET)		 
+#define GPF3DRV				(GPIO_LB_BASE + GPF3DRV_SR_OFFSET)
+#define GPF3CONPDN			(GPIO_LB_BASE + GPF3CONPDN_OFFSET)	 
+#define GPF3PUDPDN			(GPIO_LB_BASE + GPF3PUDPDN_OFFSET)	
+
+
+#define GPG0CON				(ELFIN_GPIO_BASE + GPG0CON_OFFSET) 
+#define GPG0DAT				(ELFIN_GPIO_BASE + GPG0DAT_OFFSET)		 
+#define GPG0PUD				(ELFIN_GPIO_BASE + GPG0PUD_OFFSET)		 
+#define GPG0DRV				(ELFIN_GPIO_BASE + GPG0DRV_SR_OFFSET)
+#define GPG0CONPDN			(ELFIN_GPIO_BASE + GPG0CONPDN_OFFSET)	 
+#define GPG0PUDPDN			(ELFIN_GPIO_BASE + GPG0PUDPDN_OFFSET)	 
+#define GPG1CON				(ELFIN_GPIO_BASE + GPG1CON_OFFSET) 
+#define GPG1DAT				(ELFIN_GPIO_BASE + GPG1DAT_OFFSET)		 
+#define GPG1PUD				(ELFIN_GPIO_BASE + GPG1PUD_OFFSET)		 
+#define GPG1DRV				(ELFIN_GPIO_BASE + GPG1DRV_SR_OFFSET)
+#define GPG1CONPDN			(ELFIN_GPIO_BASE + GPG1CONPDN_OFFSET)	 
+#define GPG1PUDPDN			(ELFIN_GPIO_BASE + GPG1PUDPDN_OFFSET)	 
+#define GPG2CON				(ELFIN_GPIO_BASE + GPG2CON_OFFSET) 
+#define GPG2DAT				(ELFIN_GPIO_BASE + GPG2DAT_OFFSET)		 
+#define GPG2PUD				(ELFIN_GPIO_BASE + GPG2PUD_OFFSET)		 
+#define GPG2DRV				(ELFIN_GPIO_BASE + GPG2DRV_SR_OFFSET)
+#define GPG2CONPDN			(ELFIN_GPIO_BASE + GPG2CONPDN_OFFSET)	 
+#define GPG2PUDPDN			(ELFIN_GPIO_BASE + GPG2PUDPDN_OFFSET)	 
+#define GPG3CON				(ELFIN_GPIO_BASE + GPG3CON_OFFSET) 
+#define GPG3DAT				(ELFIN_GPIO_BASE + GPG3DAT_OFFSET)		 
+#define GPG3PUD				(ELFIN_GPIO_BASE + GPG3PUD_OFFSET)		 
+#define GPG3DRV				(ELFIN_GPIO_BASE + GPG3DRV_SR_OFFSET)
+#define GPG3CONPDN			(ELFIN_GPIO_BASE + GPG3CONPDN_OFFSET)	 
+#define GPG3PUDPDN			(ELFIN_GPIO_BASE + GPG3PUDPDN_OFFSET)	 
+#define GPICON				(ELFIN_GPIO_BASE + GPICON_OFFSET) 
+#define GPIPUD				(ELFIN_GPIO_BASE + GPIPUD_OFFSET)			 
+#define GPIDRV				(ELFIN_GPIO_BASE + GPIDRV_OFFSET_SR)
+#define GPIPUDPDN			(ELFIN_GPIO_BASE + GPIPUDPDN_OFFSET)	 
+#define GPJ0CON				(ELFIN_GPIO_BASE + GPJ0CON_OFFSET)	 
+#define GPJ0DAT				(ELFIN_GPIO_BASE + GPJ0DAT_OFFSET)		 
+#define GPJ0PUD				(ELFIN_GPIO_BASE + GPJ0PUD_OFFSET)		 
+#define GPJ0DRV				(ELFIN_GPIO_BASE + GPJ0DRV_SR_OFFSET)
+#define GPJ0CONPDN			(ELFIN_GPIO_BASE + GPJ0CONPDN_OFFSET)	 
+#define GPJ0PUDPDN			(ELFIN_GPIO_BASE + GPJ0PUDPDN_OFFSET)	 
+#define GPJ1CON				(ELFIN_GPIO_BASE + GPJ1CON_OFFSET) 
+#define GPJ1DAT				(ELFIN_GPIO_BASE + GPJ1DAT_OFFSET)		 
+#define GPJ1PUD				(ELFIN_GPIO_BASE + GPJ1PUD_OFFSET)		 
+#define GPJ1DRV				(ELFIN_GPIO_BASE + GPJ1DRV_SR_OFFSET)
+#define GPJ1CONPDN			(ELFIN_GPIO_BASE + GPJ1CONPDN_OFFSET)	 
+#define GPJ1PUDPDN			(ELFIN_GPIO_BASE + GPJ1PUDPDN_OFFSET)	 
+#define GPJ2CON				(ELFIN_GPIO_BASE + GPJ2CON_OFFSET) 
+#define GPJ2DAT				(ELFIN_GPIO_BASE + GPJ2DAT_OFFSET)		 
+#define GPJ2PUD				(ELFIN_GPIO_BASE + GPJ2PUD_OFFSET)		 
+#define GPJ2DRV				(ELFIN_GPIO_BASE + GPJ2DRV_SR_OFFSET)
+#define GPJ2CONPDN			(ELFIN_GPIO_BASE + GPJ2CONPDN_OFFSET)	 
+#define GPJ2PUDPDN			(ELFIN_GPIO_BASE + GPJ2PUDPDN_OFFSET)	 
+#define GPJ3CON				(ELFIN_GPIO_BASE + GPJ3CON_OFFSET) 
+#define GPJ3DAT				(ELFIN_GPIO_BASE + GPJ3DAT_OFFSET)		 
+#define GPJ3PUD				(ELFIN_GPIO_BASE + GPJ3PUD_OFFSET)		 
+#define GPJ3DRV_SR			(ELFIN_GPIO_BASE + GPJ3DRV_SR_OFFSET)
+#define GPJ3CONPDN			(ELFIN_GPIO_BASE + GPJ3CONPDN_OFFSET)	 
+#define GPJ3PUDPDN			(ELFIN_GPIO_BASE + GPJ3PUDPDN_OFFSET)	 
+#define GPJ4CON				(ELFIN_GPIO_BASE + GPJ4CON_OFFSET)
+#define GPJ4DAT				(ELFIN_GPIO_BASE + GPJ4DAT_OFFSET)		 
+#define GPJ4PUD				(ELFIN_GPIO_BASE + GPJ4PUD_OFFSET)		 
+#define GPJ4DRV				(ELFIN_GPIO_BASE + GPJ4DRV_SR_OFFSET)
+#define GPJ4CONPDN			(ELFIN_GPIO_BASE + GPJ4CONPDN_OFFSET)	 
+#define GPJ4PUDPDN			(ELFIN_GPIO_BASE + GPJ4PUDPDN_OFFSET)
+
+#define MP01CON_REG			__REG(ELFIN_GPIO_BASE + MP01CON_OFFSET)
+#define MP01DAT_REG			__REG(ELFIN_GPIO_BASE + MP01DAT_OFFSET)		 
+#define MP01PUD_REG			__REG(ELFIN_GPIO_BASE + MP01PUD_OFFSET)		 
+#define MP01DRV_REG			__REG(ELFIN_GPIO_BASE + MP01DRV_SR_OFFSET)
+#define MP01CONPDN_REG			__REG(ELFIN_GPIO_BASE + MP01CONPDN_OFFSET)	 
+#define MP01PUDPDN_REG			__REG(ELFIN_GPIO_BASE + MP01PUDPDN_OFFSET)
+
+
+#define MP02CON_REG                     __REG(ELFIN_GPIO_BASE + MP02CON_OFFSET)
+#define MP02DAT_REG                     __REG(ELFIN_GPIO_BASE + MP02DAT_OFFSET)          
+#define MP02PUD_REG                     __REG(ELFIN_GPIO_BASE + MP02PUD_OFFSET)          
+#define MP02DRV_REG                     __REG(ELFIN_GPIO_BASE + MP02DRV_SR_OFFSET)
+#define MP02CONPDN_REG                  __REG(ELFIN_GPIO_BASE + MP02CONPDN_OFFSET)       
+#define MP02PUDPDN_REG                  __REG(ELFIN_GPIO_BASE + MP02PUDPDN_OFFSET)
+
+#define MP03CON_REG                     __REG(ELFIN_GPIO_BASE + MP03CON_OFFSET)
+#define MP03DAT_REG                     __REG(ELFIN_GPIO_BASE + MP03DAT_OFFSET)          
+#define MP03PUD_REG                     __REG(ELFIN_GPIO_BASE + MP03PUD_OFFSET)          
+#define MP03DRV_REG                     __REG(ELFIN_GPIO_BASE + MP03DRV_SR_OFFSET)
+#define MP03CONPDN_REG                  __REG(ELFIN_GPIO_BASE + MP03CONPDN_OFFSET)       
+#define MP03PUDPDN_REG                  __REG(ELFIN_GPIO_BASE + MP03PUDPDN_OFFSET)
+
+#define TSADCCON0	(ELFIN_ADC_BASE + 0x0)
+#define	TSCON0		(ELFIN_ADC_BASE + 0x4)
+#define TSDLY0		(ELFIN_ADC_BASE + 0x8)
+#define TSDATX0		(ELFIN_ADC_BASE + 0xC)
+#define TSDATY0		(ELFIN_ADC_BASE + 0x10)
+#define TSPENSTAT0	(ELFIN_ADC_BASE + 0x14)
+#define CLRINTADC0	(ELFIN_ADC_BASE + 0x18)
+#define ADCMUX		(ELFIN_ADC_BASE + 0x1C)
+#define CLRINTPEN0	(ELFIN_ADC_BASE + 0x20)
+
+#define TSADCCON1	(ELFIN_ADC1_BASE + 0x0)
+#define TSCON1		(ELFIN_ADC1_BASE + 0x4)
+#define TSDLY1		(ELFIN_ADC1_BASE + 0x8)
+#define TSDATX1		(ELFIN_ADC1_BASE + 0xC)
+#define TSDATY1		(ELFIN_ADC1_BASE + 0x10)
+#define TSPENSTAT1	(ELFIN_ADC1_BASE + 0x14)
+#define CLRINTADC1	(ELFIN_ADC1_BASE + 0x18)
+#define CLRINTPEN1	(ELFIN_ADC1_BASE + 0x20)
+#define S5P_PS_HOLD_CONTROL		(0x1002330C)
+
+
+
+
+#define NFCONF_VAL	(7<<12)|(7<<8)|(7<<4)|(0<<3)|(0<<2)|(1<<1)|(0<<0)       
+#define NFCONT_VAL	(0<<18)|(0<<17)|(0<<16)|(0<<10)|(0<<9)|(0<<8)|(0<<7)|(0<<6)|(0x3<<1)|(1<<0)
+#define MP03CON_VAL	(1<<29)|(1<<25)|(1<<21)|(1<<17)|(1<<13)|(1<<9)|(1<<5)|(1<<1)
+/*
+ * Bus Matrix
+ */
+#define ELFIN_MEM_SYS_CFG		0x7e00f120
+
+/*
+ * Memory controller
+ */
+#define ELFIN_SROM_BASE			0x12570000
+
+#define SROM_BW_REG			__REG(ELFIN_SROM_BASE+0x0)
+#define SROM_BC0_REG			__REG(ELFIN_SROM_BASE+0x4)
+#define SROM_BC1_REG			__REG(ELFIN_SROM_BASE+0x8)
+#define SROM_BC2_REG			__REG(ELFIN_SROM_BASE+0xC)
+#define SROM_BC3_REG			__REG(ELFIN_SROM_BASE+0x10)
+#define SROM_BC4_REG			__REG(ELFIN_SROM_BASE+0x14)
+#define SROM_BC5_REG			__REG(ELFIN_SROM_BASE+0x18)
+
+#define MIU_BASE 			0x10600000 
+#define MIU_INTLV_CONFIG		0x400
+#define MIU_INTLV_START_ADDR		0x808
+#define MIU_MAPPING_UPDATE  	        0x800
+#define MIU_INTLV_END_ADDR		0x810
+
+#define MIU_SINGLE_MAPPING0_START_ADDR	0x818
+#define MIU_SINGLE_MAPPING0_END_ADDR	0x820
+#define MIU_SINGLE_MAPPING1_START_ADDR	0x828
+#define MIU_SINGLE_MAPPING1_END_ADDR	0x830
+
+#define MIU_REG_UPDATE                  0xC00
+/*
+ * SDRAM Controller
+ */
+
+#define APB_DMC_0_BASE			0x10600000 //0x10400000 
+#define APB_DMC_1_BASE			0x10610000//0x10410000 
+
+#define DMC_CONCONTROL 			0x00
+#define DMC_MEMCONTROL 			0x04
+#define DMC_MEMCONFIG0 			0x08
+#define DMC_MEMCONFIG1 			0x0C
+#define DMC_DIRECTCMD 			0x10
+#define DMC_PRECHCONFIG 		0x14
+#define DMC_PHYCONTROL0 		0x18
+#define DMC_PHYCONTROL1 		0x1C
+#define DMC_PHYCONTROL2 		0x20
+#define DMC_PWRDNCONFIG 		0x28
+#define DMC_TIMINGAREF 			0x30
+#define DMC_TIMINGROW 			0x34
+#define DMC_TIMINGDATA 			0x38
+#define DMC_TIMINGPOWER 		0x3C
+#define DMC_PHYSTATUS 			0x40
+#define DMC_PHYZQCONTROL 		0x44
+#define DMC_CHIP0STATUS 		0x48
+#define DMC_CHIP1STATUS 		0x4C
+#define DMC_AREFSTATUS 			0x50
+#define DMC_MRSTATUS 			0x54
+#define DMC_PHYTEST0 			0x58
+#define DMC_PHYTEST1 			0x5C
+#define DMC_QOSCONTROL0 		0x60
+#define DMC_QOSCONFIG0 			0x64
+#define DMC_QOSCONTROL1 		0x68
+#define DMC_QOSCONFIG1 			0x6C
+#define DMC_QOSCONTROL2 		0x70
+#define DMC_QOSCONFIG2 			0x74
+#define DMC_QOSCONTROL3 		0x78
+#define DMC_QOSCONFIG3 			0x7C
+#define DMC_QOSCONTROL4 		0x80
+#define DMC_QOSCONFIG4 			0x84
+#define DMC_QOSCONTROL5 		0x88
+#define DMC_QOSCONFIG5 			0x8C
+#define DMC_QOSCONTROL6 		0x90
+#define DMC_QOSCONFIG6 			0x94
+#define DMC_QOSCONTROL7 		0x98
+#define DMC_QOSCONFIG7 			0x9C
+#define DMC_QOSCONTROL8 		0xA0
+#define DMC_QOSCONFIG8 			0xA4
+#define DMC_QOSCONTROL9 		0xA8
+#define DMC_QOSCONFIG9 			0xAC
+#define DMC_QOSCONTROL10 		0xB0
+#define DMC_QOSCONFIG10 		0xB4
+#define DMC_QOSCONTROL11 		0xB8
+#define DMC_QOSCONFIG11 		0xBC
+#define DMC_QOSCONTROL12 		0xC0
+#define DMC_QOSCONFIG12 		0xC4
+#define DMC_QOSCONTROL13 		0xC8
+#define DMC_QOSCONFIG13 		0xCC
+#define DMC_QOSCONTROL14 		0xD0
+#define DMC_QOSCONFIG14 		0xD4
+#define DMC_QOSCONTROL15 		0xD8
+#define DMC_QOSCONFIG15 		0xDC
+#define DMC_IvControl 			0xF0
+
+/*
+* Memory Chip direct command
+*/
+
+/****************************************************************
+ Definitions for memory configuration
+ Set memory configuration
+	active_chips	 = 1'b0 (1 chip)
+	qos_master_chip  = 3'b000(ARID[3:0])
+	memory burst	 = 3'b010(burst 4)
+	stop_mem_clock	 = 1'b0(disable dynamical stop)
+	auto_power_down  = 1'b0(disable auto power-down mode)
+	power_down_prd	 = 6'b00_0000(0 cycle for auto power-down)
+	ap_bit		 = 1'b0 (bit position of auto-precharge is 10)
+	row_bits	 = 3'b010(# row address 13)
+	column_bits	 = 3'b010(# column address 10 )
+
+ Set user configuration
+	2'b10=SDRAM/mSDRAM, 2'b11=DDR, 2'b01=mDDR
+
+ Set chip select for chip [n]
+	 row bank control, bank address 0x3000_0000 ~ 0x37ff_ffff
+	 CHIP_[n]_CFG=0x30F8,  30: ADDR[31:24], F8: Mask[31:24]
+******************************************************************/
+
+/*
+ * HS MMC Interface
+ */
+#define ELFIN_HSMMC_BASE		0x12510000
+
+#define HM_SYSAD			(0x00)
+#define HM_BLKSIZE			(0x04)
+#define HM_BLKCNT			(0x06)
+#define HM_ARGUMENT			(0x08)
+#define HM_TRNMOD			(0x0c)
+#define HM_CMDREG			(0x0e)
+#define HM_RSPREG0			(0x10)
+#define HM_RSPREG1			(0x14)
+#define HM_RSPREG2			(0x18)
+#define HM_RSPREG3			(0x1c)
+#define HM_BDATA			(0x20)
+#define HM_PRNSTS			(0x24)
+#define HM_HOSTCTL			(0x28)
+#define HM_PWRCON			(0x29)
+#define HM_BLKGAP			(0x2a)
+#define HM_WAKCON			(0x2b)
+#define HM_CLKCON			(0x2c)
+#define HM_TIMEOUTCON			(0x2e)
+#define HM_SWRST			(0x2f)
+#define HM_NORINTSTS			(0x30)
+#define HM_ERRINTSTS			(0x32)
+#define HM_NORINTSTSEN			(0x34)
+#define HM_ERRINTSTSEN			(0x36)
+#define HM_NORINTSIGEN			(0x38)
+#define HM_ERRINTSIGEN			(0x3a)
+#define HM_ACMD12ERRSTS			(0x3c)
+#define HM_CAPAREG			(0x40)
+#define HM_MAXCURR			(0x48)
+#define HM_CONTROL2			(0x80)
+#define HM_CONTROL3			(0x84)
+#define HM_CONTROL4			(0x8c)
+#define HM_HCVER			(0xfe)
+
+/*
+ * Nand flash controller
+ */
+#define ELFIN_NAND_BASE			0x0CE00000
+#define ELFIN_NAND_ECC_BASE		0x0CE20000
+
+#define NFCONF_OFFSET           	0x00
+#define NFCONT_OFFSET           	0x04
+#define NFCMMD_OFFSET           	0x08
+#define NFADDR_OFFSET           	0x0c
+#define NFDATA_OFFSET			0x10
+#define NFMECCDATA0_OFFSET      	0x14
+#define NFMECCDATA1_OFFSET      	0x18
+#define NFSECCDATA0_OFFSET      	0x1c
+#define NFSBLK_OFFSET           	0x20
+#define NFEBLK_OFFSET           	0x24
+#define NFSTAT_OFFSET           	0x28
+#define NFESTAT0_OFFSET         	0x2c
+#define NFESTAT1_OFFSET         	0x30
+#define NFMECC0_OFFSET          	0x34
+#define NFMECC1_OFFSET          	0x38
+#define NFSECC_OFFSET           	0x3c
+#define NFMLCBITPT_OFFSET       	0x40
+#define NFECCCONF_OFFSET 		0x000 // R/W ECC configuration register 0x0000_0000
+#define NFECCCONT_OFFSET 		0x020 // R/W ECC control register 0x0000_0000
+#define NFECCSTAT_OFFSET 		0x030 // R ECC status register 0x0000_0000
+#define NFECCSECSTAT_OFFSET 		0x040 // R ECC sector status register 0x0000_0000
+#define NFECCPRGECC0_OFFSET 		0x090 // R ECC parity code0 register for page program 0x0000_0000
+#define NFECCPRGECC1_OFFSET 		0x094 // R ECC parity code1 register for page program 0x0000_0000
+#define NFECCPRGECC2_OFFSET 		0x098 // R ECC parity code2 register for page program 0x0000_0000
+#define NFECCPRGECC3_OFFSET 		0x09C // R ECC parity code3 register for page program 0x0000_0000
+#define NFECCPRGECC4_OFFSET 		0x0A0 // R ECC parity code4 register for page program 0x0000_0000
+#define NFECCPRGECC5_OFFSET 		0x0A4 // R ECC parity code5 register for page program 0x0000_0000
+#define NFECCPRGECC6_OFFSET 		0x0A8 // R ECC parity code6 register for page program 0x0000_0000
+#define NFECCERL0_OFFSET		0x0C0 // R ECC error byte location0 register 0x0000_0000
+#define NFECCERL1_OFFSET		0x0C4 // R ECC error byte location1 register 0x0000_0000
+#define NFECCERL2_OFFSET		0x0C8 // R ECC error byte location2 register 0x0000_0000
+#define NFECCERL3_OFFSET 		0x0CC // R ECC error byte location3 register 0x0000_0000
+#define NFECCERL4_OFFSET 		0x0D0 // R ECC error byte location4 register 0x0000_0000
+#define NFECCERL5_OFFSET 		0x0D4 // R ECC error byte location5 register 0x0000_0000
+#define NFECCERL6_OFFSET 		0x0D8 // R ECC error byte location6 register 0x0000_0000
+#define NFECCERL7_OFFSET 		0x0DC // R ECC error byte location7 register 0x0000_0000
+#define NFECCERP0_OFFSET 		0x0F0 // R ECC error bit pattern0 register 0x0000_0000
+#define NFECCERP1_OFFSET 		0x0F4 // R ECC error bit pattern1 register 0x0000_0000
+#define NFECCERP2_OFFSET 		0x0F8 // R ECC error bit pattern2 register 0x0000_0000
+#define NFECCERP3_OFFSET 		0x0FC // R ECC error bit pattern3 register 0x0000_0000
+#define NFECCCONECC0_OFFSET 		0x110 // R/W ECC parity conversion code0 register 0x0000_0000
+#define NFECCCONECC1_OFFSET 		0x114 // R/W ECC parity conversion code1 register 0x0000_0000
+#define NFECCCONECC2_OFFSET 		0x118 // R/W ECC parity conversion code2 register 0x0000_0000
+#define NFECCCONECC3_OFFSET 		0x11C // R/W ECC parity conversion code3 register 0x0000_0000
+#define NFECCCONECC4_OFFSET 		0x120 // R/W ECC parity conversion code4 register 0x0000_0000
+#define NFECCCONECC5_OFFSET 		0x124 // R/W ECC parity conversion code5 register 0x0000_0000
+#define NFECCCONECC6_OFFSET		0x128 // R/W ECC parity conversion code6 register 0x0000_0000
+
+#define NFCONF				(ELFIN_NAND_BASE+NFCONF_OFFSET)
+#define NFCONT				(ELFIN_NAND_BASE+NFCONT_OFFSET)
+#define NFCMMD				(ELFIN_NAND_BASE+NFCMMD_OFFSET)
+#define NFADDR           		(ELFIN_NAND_BASE+NFADDR_OFFSET)
+#define NFDATA          		(ELFIN_NAND_BASE+NFDATA_OFFSET)
+#define NFMECCDATA0     		(ELFIN_NAND_BASE+NFMECCDATA0_OFFSET)
+#define NFMECCDATA1     		(ELFIN_NAND_BASE+NFMECCDATA1_OFFSET)
+#define NFSECCDATA0      		(ELFIN_NAND_BASE+NFSECCDATA0_OFFSET)
+#define NFSBLK          		(ELFIN_NAND_BASE+NFSBLK_OFFSET)
+#define NFEBLK           		(ELFIN_NAND_BASE+NFEBLK_OFFSET)
+#define NFSTAT           		(ELFIN_NAND_BASE+NFSTAT_OFFSET)
+#define NFESTAT0         		(ELFIN_NAND_BASE+NFESTAT0_OFFSET)
+#define NFESTAT1         		(ELFIN_NAND_BASE+NFESTAT1_OFFSET)
+#define NFMECC0          		(ELFIN_NAND_BASE+NFMECC0_OFFSET)
+#define NFMECC1          		(ELFIN_NAND_BASE+NFMECC1_OFFSET)
+#define NFSECC           		(ELFIN_NAND_BASE+NFSECC_OFFSET)
+#define NFMLCBITPT           		(ELFIN_NAND_BASE+NFMLCBITPT_OFFSET)
+
+#define NFECCCONF			(ELFIN_NAND_ECC_BASE+NFECCCONF_OFFSET)
+#define NFECCCONT			(ELFIN_NAND_ECC_BASE+NFECCCONT_OFFSET)
+#define NFECCSTAT			(ELFIN_NAND_ECC_BASE+NFECCSTAT_OFFSET)
+#define NFECCSECSTAT			(ELFIN_NAND_ECC_BASE+NFECCSECSTAT_OFFSET)
+#define NFECCPRGECC0			(ELFIN_NAND_ECC_BASE+NFECCPRGECC0_OFFSET)
+#define NFECCPRGECC1			(ELFIN_NAND_ECC_BASE+NFECCPRGECC1_OFFSET)
+#define NFECCPRGECC2			(ELFIN_NAND_ECC_BASE+NFECCPRGECC2_OFFSET)
+#define NFECCPRGECC3			(ELFIN_NAND_ECC_BASE+NFECCPRGECC3_OFFSET)
+#define NFECCPRGECC4			(ELFIN_NAND_ECC_BASE+NFECCPRGECC4_OFFSET)
+#define NFECCPRGECC5			(ELFIN_NAND_ECC_BASE+NFECCPRGECC5_OFFSET)
+#define NFECCPRGECC6			(ELFIN_NAND_ECC_BASE+NFECCPRGECC6_OFFSET)
+#define NFECCERL0			(ELFIN_NAND_ECC_BASE+NFECCERL0_OFFSET)
+#define NFECCERL1			(ELFIN_NAND_ECC_BASE+NFECCERL1_OFFSET)
+#define NFECCERL2			(ELFIN_NAND_ECC_BASE+NFECCERL2_OFFSET)
+#define NFECCERL3			(ELFIN_NAND_ECC_BASE+NFECCERL3_OFFSET)
+#define NFECCERL4			(ELFIN_NAND_ECC_BASE+NFECCERL4_OFFSET)
+#define NFECCERL5			(ELFIN_NAND_ECC_BASE+NFECCERL5_OFFSET)
+#define NFECCERL6			(ELFIN_NAND_ECC_BASE+NFECCERL6_OFFSET)
+#define NFECCERL7			(ELFIN_NAND_ECC_BASE+NFECCERL7_OFFSET)
+#define NFECCERP0			(ELFIN_NAND_ECC_BASE+NFECCERP0_OFFSET)
+#define NFECCERP1			(ELFIN_NAND_ECC_BASE+NFECCERP1_OFFSET)
+#define NFECCERP2			(ELFIN_NAND_ECC_BASE+NFECCERP2_OFFSET)
+#define NFECCERP3			(ELFIN_NAND_ECC_BASE+NFECCERP3_OFFSET)
+#define NFECCCONECC0			(ELFIN_NAND_ECC_BASE+NFECCCONECC0_OFFSET)
+#define NFECCCONECC1			(ELFIN_NAND_ECC_BASE+NFECCCONECC1_OFFSET)
+#define NFECCCONECC2			(ELFIN_NAND_ECC_BASE+NFECCCONECC2_OFFSET)
+#define NFECCCONECC3			(ELFIN_NAND_ECC_BASE+NFECCCONECC3_OFFSET)
+#define NFECCCONECC4			(ELFIN_NAND_ECC_BASE+NFECCCONECC4_OFFSET)
+#define NFECCCONECC5			(ELFIN_NAND_ECC_BASE+NFECCCONECC5_OFFSET)
+#define NFECCCONECC6			(ELFIN_NAND_ECC_BASE+NFECCCONECC6_OFFSET)
+
+
+#define NFCONF_REG			__REG(ELFIN_NAND_BASE+NFCONF_OFFSET)
+#define NFCONT_REG			__REG(ELFIN_NAND_BASE+NFCONT_OFFSET)
+#define NFCMD_REG			__REG(ELFIN_NAND_BASE+NFCMMD_OFFSET)
+#define NFADDR_REG           		__REG(ELFIN_NAND_BASE+NFADDR_OFFSET)
+#define NFDATA_REG          		__REG(ELFIN_NAND_BASE+NFDATA_OFFSET)
+#define NFDATA8_REG          		__REGb(ELFIN_NAND_BASE+NFDATA_OFFSET)
+#define NFMECCDATA0_REG     		__REG(ELFIN_NAND_BASE+NFMECCDATA0_OFFSET)
+#define NFMECCDATA1_REG     		__REG(ELFIN_NAND_BASE+NFMECCDATA1_OFFSET)
+#define NFSECCDATA0_REG      		__REG(ELFIN_NAND_BASE+NFSECCDATA0_OFFSET)
+#define NFSBLK_REG          		__REG(ELFIN_NAND_BASE+NFSBLK_OFFSET)
+#define NFEBLK_REG           		__REG(ELFIN_NAND_BASE+NFEBLK_OFFSET)
+#define NFSTAT_REG           		__REG(ELFIN_NAND_BASE+NFSTAT_OFFSET)
+#define NFESTAT0_REG         		__REG(ELFIN_NAND_BASE+NFESTAT0_OFFSET)
+#define NFESTAT1_REG         		__REG(ELFIN_NAND_BASE+NFESTAT1_OFFSET)
+#define NFMECC0_REG          		__REG(ELFIN_NAND_BASE+NFMECC0_OFFSET)
+#define NFMECC1_REG          		__REG(ELFIN_NAND_BASE+NFMECC1_OFFSET)
+#define NFSECC_REG           		__REG(ELFIN_NAND_BASE+NFSECC_OFFSET)
+#define NFMLCBITPT_REG         		__REG(ELFIN_NAND_BASE+NFMLCBITPT_OFFSET)
+
+#define NFCONF_ECC_MLC			(1<<24)
+
+#define NFCONF_ECC_1BIT			(0<<23)
+#define NFCONF_ECC_4BIT			(2<<23)
+#define NFCONF_ECC_8BIT			(1<<23)
+
+#define NFCONT_ECC_ENC			(1<<18)
+#define NFCONT_WP			(1<<16)
+#define NFCONT_MECCLOCK			(1<<7)
+#define NFCONT_SECCLOCK			(1<<6)
+#define NFCONT_INITMECC			(1<<5)
+#define NFCONT_INITSECC			(1<<4)
+#define NFCONT_INITECC			(NFCONT_INITMECC | NFCONT_INITSECC)
+#define NFCONT_CS			(1<<1)
+#define NFSTAT_ECCENCDONE		(1<<25)
+#define NFSTAT_ECCDECDONE		(1<<24)
+#define NFSTAT_RnB			(1<<0)
+#define NFESTAT0_ECCBUSY		(1<<31)
+
+
+
+/*************************************************************
+ * OneNAND Controller
+ *************************************************************/
+#define ELFIN_ONENAND_BASE		0xB0000000
+
+#define ONENAND_REG_MEM_CFG 		(0x000)
+#define ONENAND_REG_BURST_LEN 		(0x010)
+#define ONENAND_REG_MEM_RESET 		(0x020)
+#define ONENAND_REG_INT_ERR_STAT 	(0x030)
+#define ONENAND_REG_INT_ERR_MASK 	(0x040)
+#define ONENAND_REG_INT_ERR_ACK 	(0x050)
+#define ONENAND_REG_ECC_ERR_STAT_1 	(0x060)
+#define ONENAND_REG_MANUFACT_ID 	(0x070)
+#define ONENAND_REG_DEVICE_ID 		(0x080)
+#define ONENAND_REG_DATA_BUF_SIZE	(0x090)
+#define ONENAND_REG_BOOT_BUF_SIZE 	(0x0A0)
+#define ONENAND_REG_BUF_AMOUNT 		(0x0B0)
+#define ONENAND_REG_TECH 		(0x0C0)
+#define ONENAND_REG_FBA_WIDTH 		(0x0D0)
+#define ONENAND_REG_FPA_WIDTH 		(0x0E0)
+#define ONENAND_REG_FSA_WIDTH 		(0x0F0)
+#define ONENAND_REG_REVISION 		(0x100)
+#define ONENAND_REG_SYNC_MODE 		(0x130)
+#define ONENAND_REG_TRANS_SPARE 	(0x140)
+#define ONENAND_REG_PAGE_CNT 		(0x170)
+#define ONENAND_REG_ERR_PAGE_ADDR 	(0x180)
+#define ONENAND_REG_BURST_RD_LAT 	(0x190)
+#define ONENAND_REG_INT_PIN_ENABLE 	(0x1A0)
+#define ONENAND_REG_INT_MON_CYC 	(0x1B0)
+#define ONENAND_REG_ACC_CLOCK 		(0x1C0)
+#define ONENAND_REG_ERR_BLK_ADDR 	(0x1E0)
+#define ONENAND_REG_FLASH_VER_ID 	(0x1F0)
+#define ONENAND_REG_BANK_EN 		(0x220)
+#define ONENAND_REG_WTCHDG_RST_L 	(0x260)
+#define ONENAND_REG_WTCHDG_RST_H 	(0x270)
+#define ONENAND_REG_SYNC_WRITE 		(0x280)
+#define ONENAND_REG_CACHE_READ 		(0x290)
+#define ONENAND_REG_COLD_RST_DLY 	(0x2A0)
+#define ONENAND_REG_DDP_DEVICE 		(0x2B0)
+#define ONENAND_REG_MULTI_PLANE 	(0x2C0)
+#define ONENAND_REG_MEM_CNT 		(0x2D0)
+#define ONENAND_REG_TRANS_MODE 		(0x2E0)
+#define ONENAND_REG_DEV_STAT 		(0x2F0)
+#define ONENAND_REG_ECC_ERR_STAT_2 	(0x300)
+#define ONENAND_REG_ECC_ERR_STAT_3 	(0x310)
+#define ONENAND_REG_ECC_ERR_STAT_4 	(0x320)
+#define ONENAND_REG_EFCT_BUF_CNT 	(0x330)
+#define ONENAND_REG_DEV_PAGE_SIZE 	(0x340)
+#define ONENAND_REG_SUPERLOAD_EN 	(0x350)
+#define ONENAND_REG_CACHE_PRG_EN 	(0x360)
+#define ONENAND_REG_SINGLE_PAGE_BUF 	(0x370)
+#define ONENAND_REG_OFFSET_ADDR 	(0x380)
+#define ONENAND_REG_INT_MON_STATUS 	(0x390)
+
+
+#define ONENAND_MEM_CFG_SYNC_READ	(1 << 15)
+#define ONENAND_MEM_CFG_BRL_7		(7 << 12)
+#define ONENAND_MEM_CFG_BRL_6		(6 << 12)
+#define ONENAND_MEM_CFG_BRL_5		(5 << 12)
+#define ONENAND_MEM_CFG_BRL_4		(4 << 12)
+#define ONENAND_MEM_CFG_BRL_3		(3 << 12)
+#define ONENAND_MEM_CFG_BRL_10		(2 << 12)
+#define ONENAND_MEM_CFG_BRL_9		(1 << 12)
+#define ONENAND_MEM_CFG_BRL_8		(0 << 12)
+#define ONENAND_MEM_CFG_BRL_SHIFT	(12)
+#define ONENAND_MEM_CFG_BL_1K		(5 << 9)
+#define ONENAND_MEM_CFG_BL_32		(4 << 9)
+#define ONENAND_MEM_CFG_BL_16		(3 << 9)
+#define ONENAND_MEM_CFG_BL_8		(2 << 9)
+#define ONENAND_MEM_CFG_BL_4		(1 << 9)
+#define ONENAND_MEM_CFG_BL_CONT		(0 << 9)
+#define ONENAND_MEM_CFG_BL_SHIFT	(9)
+#define ONENAND_MEM_CFG_NO_ECC		(1 << 8)
+#define ONENAND_MEM_CFG_RDY_HIGH	(1 << 7)
+#define ONENAND_MEM_CFG_INT_HIGH	(1 << 6)
+#define ONENAND_MEM_CFG_IOBE		(1 << 5)
+#define ONENAND_MEM_CFG_RDY_CONF	(1 << 4)
+#define ONENAND_MEM_CFG_HF		(1 << 2)
+#define ONENAND_MEM_CFG_WM_SYNC		(1 << 1)
+#define ONENAND_MEM_CFG_BWPS_UNLOCK	(1 << 0)
+
+#define ONENAND_BURST_LEN_CONT		(0)
+#define ONENAND_BURST_LEN_4		(4)
+#define ONENAND_BURST_LEN_8		(8)
+#define ONENAND_BURST_LEN_16		(16)
+
+#define ONENAND_MEM_RESET_WARM		(0x1)
+#define ONENAND_MEM_RESET_COLD		(0x2)
+#define ONENAND_MEM_RESET_HOT		(0x3)
+
+#define ONENAND_INT_ERR_CACHE_OP_ERR	(1 << 13)
+#define ONENAND_INT_ERR_RST_CMP		(1 << 12)
+#define ONENAND_INT_ERR_RDY_ACT		(1 << 11)
+#define ONENAND_INT_ERR_INT_ACT		(1 << 10)
+#define ONENAND_INT_ERR_UNSUP_CMD	(1 << 9)
+#define ONENAND_INT_ERR_LOCKED_BLK	(1 << 8)
+#define ONENAND_INT_ERR_BLK_RW_CMP	(1 << 7)
+#define ONENAND_INT_ERR_ERS_CMP		(1 << 6)
+#define ONENAND_INT_ERR_PGM_CMP		(1 << 5)
+#define ONENAND_INT_ERR_LOAD_CMP	(1 << 4)
+#define ONENAND_INT_ERR_ERS_FAIL	(1 << 3)
+#define ONENAND_INT_ERR_PGM_FAIL	(1 << 2)
+#define ONENAND_INT_ERR_INT_TO		(1 << 1)
+#define ONENAND_INT_ERR_LD_FAIL_ECC_ERR	(1 << 0)
+
+#define ONENAND_DEVICE_DENSITY_SHIFT	(4)
+#define ONENAND_DEVICE_IS_DDP		(1 << 3)
+#define ONENAND_DEVICE_IS_DEMUX		(1 << 2)
+#define ONENAND_DEVICE_VCC_MASK		(0x3)
+#define ONENAND_DEVICE_DENSITY_128Mb	(0x000)
+#define ONENAND_DEVICE_DENSITY_256Mb	(0x001)
+#define ONENAND_DEVICE_DENSITY_512Mb	(0x002)
+#define ONENAND_DEVICE_DENSITY_1Gb	(0x003)
+#define ONENAND_DEVICE_DENSITY_2Gb	(0x004)
+#define ONENAND_DEVICE_DENSITY_4Gb	(0x005)
+
+#define ONENAND_SYNC_MODE_RM_SYNC	(1 << 1)
+#define ONENAND_SYNC_MODE_WM_SYNC	(1 << 0)
+
+#define ONENAND_TRANS_SPARE_TSRF_INC	(1 << 0)
+
+#define ONENAND_INT_PIN_ENABLE		(1 << 0)
+
+#define ONENAND_ACC_CLOCK_266_133	(0x5)
+#define ONENAND_ACC_CLOCK_166_83	(0x3)
+#define ONENAND_ACC_CLOCK_134_67	(0x3)
+#define ONENAND_ACC_CLOCK_100_50	(0x2)
+#define ONENAND_ACC_CLOCK_60_30		(0x2)
+
+#define ONENAND_FLASH_AUX_WD_DISABLE	(1 << 0)
+
+/*
+ * Datain values for mapped commands
+ */
+#define ONENAND_DATAIN_ERASE_STATUS	(0x00)
+#define ONENAND_DATAIN_ERASE_MULTI	(0x01)
+#define ONENAND_DATAIN_ERASE_SINGLE	(0x03)
+#define ONENAND_DATAIN_ERASE_VERIFY	(0x15)
+#define ONENAND_DATAIN_UNLOCK_START	(0x08)
+#define ONENAND_DATAIN_UNLOCK_END	(0x09)
+#define ONENAND_DATAIN_LOCK_START	(0x0A)
+#define ONENAND_DATAIN_LOCK_END		(0x0B)
+#define ONENAND_DATAIN_LOCKTIGHT_START	(0x0C)
+#define ONENAND_DATAIN_LOCKTIGHT_END	(0x0D)
+#define ONENAND_DATAIN_UNLOCK_ALL	(0x0E)
+#define ONENAND_DATAIN_COPYBACK_SRC	(0x1000)
+#define ONENAND_DATAIN_COPYBACK_DST	(0x2000)
+#define ONENAND_DATAIN_ACCESS_OTP	(0x12)
+#define ONENAND_DATAIN_ACCESS_MAIN	(0x14)
+#define ONENAND_DATAIN_ACCESS_SPARE	(0x13)
+#define ONENAND_DATAIN_ACCESS_MAIN_AND_SPARE	(0x16)
+#define ONENAND_DATAIN_PIPELINE_READ	(0x4000)
+#define ONENAND_DATAIN_PIPELINE_WRITE	(0x4100)
+#define ONENAND_DATAIN_RMW_LOAD		(0x10)
+#define ONENAND_DATAIN_RMW_MODIFY	(0x11)
+
+/*
+ * Device ID Register F001h (R)
+ */
+#define ONENAND_DEVICE_DENSITY_SHIFT	(4)
+#define ONENAND_DEVICE_IS_DDP		(1 << 3)
+#define ONENAND_DEVICE_IS_DEMUX		(1 << 2)
+#define ONENAND_DEVICE_VCC_MASK		(0x3)
+
+/*
+ * Version ID Register F002h (R)
+ */
+#define ONENAND_VERSION_PROCESS_SHIFT	(8)
+
+/*
+ * Start Address 1 F100h (R/W)
+ */
+#define ONENAND_DDP_SHIFT		(15)
+#define ONENAND_DDP_CHIP0		(0)
+#define ONENAND_DDP_CHIP1		(1 << ONENAND_DDP_SHIFT)
+
+/*
+ * Start Buffer Register F200h (R/W)
+ */
+#define ONENAND_BSA_MASK		(0x03)
+#define ONENAND_BSA_SHIFT		(8)
+#define ONENAND_BSA_BOOTRAM		(0 << 2)
+#define ONENAND_BSA_DATARAM0		(2 << 2)
+#define ONENAND_BSA_DATARAM1		(3 << 2)
+#define ONENAND_BSC_MASK		(0x03)
+
+/*
+ * Command Register F220h (R/W)
+ */
+#define ONENAND_CMD_READ		(0x00)
+#define ONENAND_CMD_READOOB		(0x13)
+#define ONENAND_CMD_PROG		(0x80)
+#define ONENAND_CMD_PROGOOB		(0x1A)
+#define ONENAND_CMD_UNLOCK		(0x23)
+#define ONENAND_CMD_LOCK		(0x2A)
+#define ONENAND_CMD_LOCK_TIGHT		(0x2C)
+#define ONENAND_CMD_UNLOCK_ALL		(0x27)
+#define ONENAND_CMD_ERASE		(0x94)
+#define ONENAND_CMD_RESET		(0xF0)
+#define ONENAND_CMD_OTP_ACCESS		(0x65)
+#define ONENAND_CMD_READID		(0x90)
+#define ONENAND_CMD_STARTADDR1		(0xE0)
+#define ONENAND_CMD_WP_STATUS		(0xE1)
+#define ONENAND_CMD_PIPELINE_READ	(0x01)
+#define ONENAND_CMD_PIPELINE_WRITE	(0x81)
+
+/*
+ * Command Mapping for S5PC210 OneNAND Controller
+ */
+#define ONENAND_AHB_ADDR		(0xB0000000)
+#define ONENAND_DUMMY_ADDR		(0xB0400000)
+#define ONENAND_CMD_SHIFT		(26)
+#define ONENAND_CMD_MAP_00		(0x0)
+#define ONENAND_CMD_MAP_01		(0x1)
+#define ONENAND_CMD_MAP_10		(0x2)
+#define ONENAND_CMD_MAP_11		(0x3)
+#define ONENAND_CMD_MAP_FF		(0xF)
+
+/*
+ * Mask for Mapping table
+ */
+#define ONENAND_MEM_ADDR_MASK		(0xffffff)
+#define ONENAND_DDP_SHIFT_1Gb		(22)
+#define ONENAND_DDP_SHIFT_2Gb		(23)
+#define ONENAND_DDP_SHIFT_4Gb		(24)
+#define ONENAND_FBA_SHIFT		(13)
+#define ONENAND_FPA_SHIFT		(7)
+#define ONENAND_FSA_SHIFT		(5)
+#define ONENAND_FBA_MASK_128Mb		(0xff)
+#define ONENAND_FBA_MASK_256Mb		(0x1ff)
+#define ONENAND_FBA_MASK_512Mb		(0x1ff)
+#define ONENAND_FBA_MASK_1Gb_DDP	(0x1ff)
+#define ONENAND_FBA_MASK_1Gb		(0x3ff)
+#define ONENAND_FBA_MASK_2Gb_DDP	(0x3ff)
+#define ONENAND_FBA_MASK_2Gb		(0x7ff)
+#define ONENAND_FBA_MASK_4Gb_DDP	(0x7ff)
+#define ONENAND_FBA_MASK_4Gb		(0xfff)
+#define ONENAND_FPA_MASK		(0x3f)
+#define ONENAND_FSA_MASK		(0x3)
+
+/*
+ * System Configuration 1 Register F221h (R, R/W)
+ */
+#define ONENAND_SYS_CFG1_SYNC_READ	(1 << 15)
+#define ONENAND_SYS_CFG1_BRL_7		(7 << 12)
+#define ONENAND_SYS_CFG1_BRL_6		(6 << 12)
+#define ONENAND_SYS_CFG1_BRL_5		(5 << 12)
+#define ONENAND_SYS_CFG1_BRL_4		(4 << 12)
+#define ONENAND_SYS_CFG1_BRL_3		(3 << 12)
+#define ONENAND_SYS_CFG1_BRL_10		(2 << 12)
+#define ONENAND_SYS_CFG1_BRL_9		(1 << 12)
+#define ONENAND_SYS_CFG1_BRL_8		(0 << 12)
+#define ONENAND_SYS_CFG1_BRL_SHIFT	(12)
+#define ONENAND_SYS_CFG1_BL_32		(4 << 9)
+#define ONENAND_SYS_CFG1_BL_16		(3 << 9)
+#define ONENAND_SYS_CFG1_BL_8		(2 << 9)
+#define ONENAND_SYS_CFG1_BL_4		(1 << 9)
+#define ONENAND_SYS_CFG1_BL_CONT	(0 << 9)
+#define ONENAND_SYS_CFG1_BL_SHIFT	(9)
+#define ONENAND_SYS_CFG1_NO_ECC		(1 << 8)
+#define ONENAND_SYS_CFG1_RDY		(1 << 7)
+#define ONENAND_SYS_CFG1_INT		(1 << 6)
+#define ONENAND_SYS_CFG1_IOBE		(1 << 5)
+#define ONENAND_SYS_CFG1_RDY_CONF	(1 << 4)
+
+/*
+ * Controller Status Register F240h (R)
+ */
+#define ONENAND_CTRL_ONGO		(1 << 15)
+#define ONENAND_CTRL_LOCK		(1 << 14)
+#define ONENAND_CTRL_LOAD		(1 << 13)
+#define ONENAND_CTRL_PROGRAM		(1 << 12)
+#define ONENAND_CTRL_ERASE		(1 << 11)
+#define ONENAND_CTRL_ERROR		(1 << 10)
+#define ONENAND_CTRL_RSTB		(1 << 7)
+#define ONENAND_CTRL_OTP_L		(1 << 6)
+#define ONENAND_CTRL_OTP_BL		(1 << 5)
+
+/*
+ * Interrupt Status Register F241h (R)
+ */
+#define ONENAND_INT_MASTER		(1 << 15)
+#define ONENAND_INT_READ		(1 << 7)
+#define ONENAND_INT_WRITE		(1 << 6)
+#define ONENAND_INT_ERASE		(1 << 5)
+#define ONENAND_INT_RESET		(1 << 4)
+#define ONENAND_INT_CLEAR		(0 << 0)
+
+/*
+ * NAND Flash Write Protection Status Register F24Eh (R)
+ */
+#define ONENAND_WP_US			(1 << 2)
+#define ONENAND_WP_LS			(1 << 1)
+#define ONENAND_WP_LTS			(1 << 0)
+
+/*
+ * ECC Status Register FF00h (R)
+ */
+#define ONENAND_ECC_1BIT		(1 << 0)
+#define ONENAND_ECC_1BIT_ALL		(0x5555)
+#define ONENAND_ECC_2BIT		(1 << 1)
+#define ONENAND_ECC_2BIT_ALL		(0xAAAA)
+
+/*
+ * One-Time Programmable (OTP)
+ */
+#define ONENAND_OTP_LOCK_OFFSET		(14)
+
+/*************************************************************
+ * End of OneNAND Controller
+ *************************************************************/
+/*
+ * Interrupt
+ */
+#define ELFIN_VIC0_BASE_ADDR		(0xF2000000)
+#define ELFIN_VIC1_BASE_ADDR		(0xF2100000)
+#define ELFIN_VIC2_BASE_ADDR		(0xF2200000)
+
+#define ELFIN_TZIC0_BASE_ADDR		(0xF2800000)
+#define ELFIN_TZIC1_BASE_ADDR		(0xF2900000)
+#define ELFIN_TZIC2_BASE_ADDR		(0xF2A00000)
+
+#define oINTMOD				(0x0C)		// VIC INT SELECT (IRQ or FIQ)
+#define oINTUNMSK			(0x10)		// VIC INT EN (Unmask by writing 1)
+#define oINTMSK				(0x14)		// VIC INT EN CLEAR (Mask by writing 1)
+#define oINTSUBMSK			(0x1C)		// VIC SOFT INT CLEAR
+#define oVECTADDR			(0xF00)		// VIC ADDRESS
+
+/*
+ * Watchdog timer
+ */
+#define ELFIN_WATCHDOG_BASE		0xE2700000
+
+#define WTCON_OFFSET			0x00
+#define WTDAT_OFFSET			0x08
+#define WTCNT_OFFSET			0x0C
+
+#define WTCON_REG			__REG(ELFIN_WATCHDOG_BASE+WTCON_OFFSET)
+#define WTDAT_REG			__REG(ELFIN_WATCHDOG_BASE+WTDAT_OFFSET)
+#define WTCNT_REG			__REG(ELFIN_WATCHDOG_BASE+WTCNT_OFFSET)
+
+/*
+ * UART
+ */
+#define ELFIN_UART_BASE			0x13800000
+
+#define ELFIN_UART0_OFFSET		0x00000
+#define ELFIN_UART1_OFFSET		0x10000
+#define ELFIN_UART2_OFFSET		0x20000
+#define ELFIN_UART3_OFFSET		0x30000
+
+#define ELFIN_UART_CONSOLE_BASE (ELFIN_UART_BASE + ELFIN_UART2_OFFSET)
+
+#define ULCON_OFFSET			0x00
+#define UCON_OFFSET			0x04
+#define UFCON_OFFSET			0x08
+#define UMCON_OFFSET			0x0C
+#define UTRSTAT_OFFSET			0x10
+#define UERSTAT_OFFSET			0x14
+#define UFSTAT_OFFSET			0x18
+#define UMSTAT_OFFSET			0x1C
+#define UTXH_OFFSET			0x20
+#define URXH_OFFSET			0x24
+#define UBRDIV_OFFSET			0x28
+#define UDIVSLOT_OFFSET			0x2C
+#define UINTP_OFFSET			0x30
+#define UINTSP_OFFSET			0x34
+#define UINTM_OFFSET			0x38
+
+#define UTRSTAT_TX_EMPTY		BIT2
+#define UTRSTAT_RX_READY		BIT0
+#define UART_ERR_MASK			0xF
+
+
+/*
+ * PWM timer
+ */
+#define ELFIN_TIMER_BASE		0x139D0000
+
+#define TCFG0_REG			__REG(0x139D0000)
+#define TCFG1_REG			__REG(0x139D0004)
+#define TCON_REG			__REG(0x139D0008)
+#define TCNTB0_REG			__REG(0x139D000c)
+#define TCMPB0_REG			__REG(0x139D0010)
+#define TCNTO0_REG			__REG(0x139D0014)
+#define TCNTB1_REG			__REG(0x139D0018)
+#define TCMPB1_REG			__REG(0x139D001c)
+#define TCNTO1_REG			__REG(0x139D0020)
+#define TCNTB2_REG			__REG(0x139D0024)
+#define TCMPB2_REG			__REG(0x139D0028)
+#define TCNTO2_REG			__REG(0x139D002c)
+#define TCNTB3_REG			__REG(0x139D0030)
+#define TCMPB3_REG			__REG(0x139D0034)
+#define TCNTO3_REG			__REG(0x139D0038)
+#define TCNTB4_REG			__REG(0x139D003c)
+#define TCNTO4_REG			__REG(0x139D0040)
+#define TINT_CSTAT			__REG(0x139D0044)
+
+/* Fields */
+#define fTCFG0_DZONE			Fld(8,16)       /* the dead zone length (= timer 0) */
+#define fTCFG0_PRE1			Fld(8,8)        /* prescaler value for time 2,3,4 */
+#define fTCFG0_PRE0			Fld(8,0)        /* prescaler value for time 0,1 */
+#define fTCFG1_MUX4			Fld(4,16)
+/* bits */
+#define TCFG0_DZONE(x)			FInsrt((x), fTCFG0_DZONE)
+#define TCFG0_PRE1(x)			FInsrt((x), fTCFG0_PRE1)
+#define TCFG0_PRE0(x)			FInsrt((x), fTCFG0_PRE0)
+#define TCON_4_AUTO			(1 << 22)       /* auto reload on/off for Timer 4 */
+#define TCON_4_UPDATE			(1 << 21)       /* manual Update TCNTB4 */
+#define TCON_4_ONOFF			(1 << 20)       /* 0: Stop, 1: start Timer 4 */
+#define COUNT_4_ON			(TCON_4_ONOFF*1)
+#define COUNT_4_OFF			(TCON_4_ONOFF*0)
+#define TCON_3_AUTO			(1 << 19)       /* auto reload on/off for Timer 3 */
+#define TIMER3_ATLOAD_ON		(TCON_3_AUTO*1)
+#define TIMER3_ATLAOD_OFF		FClrBit(TCON, TCON_3_AUTO)
+#define TCON_3_INVERT			(1 << 18)       /* 1: Inverter on for TOUT3 */
+#define TIMER3_IVT_ON			(TCON_3_INVERT*1)
+#define TIMER3_IVT_OFF			(FClrBit(TCON, TCON_3_INVERT))
+#define TCON_3_MAN			(1 << 17)       /* manual Update TCNTB3,TCMPB3 */
+#define TIMER3_MANUP			(TCON_3_MAN*1)
+#define TIMER3_NOP			(FClrBit(TCON, TCON_3_MAN))
+#define TCON_3_ONOFF			(1 << 16)       /* 0: Stop, 1: start Timer 3 */
+#define TIMER3_ON			(TCON_3_ONOFF*1)
+#define TIMER3_OFF			(FClrBit(TCON, TCON_3_ONOFF))
+/* macros */
+#define GET_PRESCALE_TIMER4(x)		FExtr((x), fTCFG0_PRE1)
+#define GET_DIVIDER_TIMER4(x)		FExtr((x), fTCFG1_MUX4)
+
+/*
+ * USB2.0 HS OTG (Chapter 26)
+ */
+#define USBOTG_LINK_BASE		(0x12480000) //(0xEC000000)
+#define USBOTG_PHY_BASE			(0x125B0000) //(0xEC100000)
+
+#define S5P_OTG_PHYPWR	 		(USBOTG_PHY_BASE + 0x000) /* R/W OTG PHY Power Control Register */
+#define S5P_OTG_PHYCLK 			(USBOTG_PHY_BASE + 0x004) /* R/W OTG PHY Clock Control Register */
+#define S5P_OTG_RSTCON 			(USBOTG_PHY_BASE + 0x008) /* R/W OTG Reset Control Register */
+#define S5P_OTG_PHYTUNE0 		(USBOTG_PHY_BASE + 0x020) /* R/W OTG PHY0 Tuning Register */
+#define S5P_OTG_PHYTUNE1 		(USBOTG_PHY_BASE + 0x024) /* R/W OTG PHY1 Tuning Register */
+
+/* Core Global Register */
+#define S5P_OTG_GOTGCTL 		(USBOTG_LINK_BASE + 0x000) /* R/W OTG Control and Status Register */
+#define S5P_OTG_GOTGINT 		(USBOTG_LINK_BASE + 0x004) /* R/W OTG Interrupt Register */
+#define S5P_OTG_GAHBCFG 		(USBOTG_LINK_BASE + 0x008) /* R/W Core AHB Configuration Register */
+#define S5P_OTG_GUSBCFG 		(USBOTG_LINK_BASE + 0x00C) /* R/W Core USB Configuration Register */
+#define S5P_OTG_GRSTCTL 		(USBOTG_LINK_BASE + 0x010) /* R/W Core Reset Register */
+#define S5P_OTG_GINTSTS 		(USBOTG_LINK_BASE + 0x014) /* R/W Core Interrupt Register */
+#define S5P_OTG_GINTMSK 		(USBOTG_LINK_BASE + 0x018) /* R/W Core Interrupt Mask Register */
+#define S5P_OTG_GRXSTSR 		(USBOTG_LINK_BASE + 0x01C) /* R Receive Status Debug Read Register */
+#define S5P_OTG_GRXSTSP 		(USBOTG_LINK_BASE + 0x020) /* R Receive Status Read/Pop Register */
+#define S5P_OTG_GRXFSIZ 		(USBOTG_LINK_BASE + 0x024) /* R/W Receive FIFO Size Register */
+#define S5P_OTG_GNPTXFSIZ 		(USBOTG_LINK_BASE + 0x028) /* R/W Non-Periodic Transmit FIFO Size Register */
+#define S5P_OTG_GNPTXSTS 		(USBOTG_LINK_BASE + 0x02C) /* R Non-Periodic Transmit FIFO/Queue Status Register */
+#define S5P_OTG_HPTXFSIZ 		(USBOTG_LINK_BASE + 0x100) /* R/W Host Periodic Transmit FIFO Size Register */
+#define S5P_OTG_DPTXFSIZ1 		(USBOTG_LINK_BASE + 0x104) /* R/W Device Periodic Transmit FIFO-1 Size Register */
+#define S5P_OTG_DPTXFSIZ2 		(USBOTG_LINK_BASE + 0x108) /* R/W Device Periodic Transmit FIFO-2 Size Register */
+#define S5P_OTG_DPTXFSIZ3 		(USBOTG_LINK_BASE + 0x10C) /* R/W Device Periodic Transmit FIFO-3 Size Register */
+#define S5P_OTG_DPTXFSIZ4 		(USBOTG_LINK_BASE + 0x110) /* R/W Device Periodic Transmit FIFO-4 Size Register */
+#define S5P_OTG_DPTXFSIZ5 		(USBOTG_LINK_BASE + 0x114) /* R/W Device Periodic Transmit FIFO-5 Size Register */
+#define S5P_OTG_DPTXFSIZ6 		(USBOTG_LINK_BASE + 0x118) /* R/W Device Periodic Transmit FIFO-6 Size Register */
+#define S5P_OTG_DPTXFSIZ7 		(USBOTG_LINK_BASE + 0x11C) /* R/W Device Periodic Transmit FIFO-7 Size Register */
+#define S5P_OTG_DPTXFSIZ8 		(USBOTG_LINK_BASE + 0x120) /* R/W Device Periodic Transmit FIFO-8 Size Register */
+#define S5P_OTG_DPTXFSIZ9 		(USBOTG_LINK_BASE + 0x124) /* R/W Device Periodic Transmit FIFO-9 Size Register */
+#define S5P_OTG_DPTXFSIZ10 		(USBOTG_LINK_BASE + 0x128) /* R/W Device Periodic Transmit FIFO-10 Size Register */
+#define S5P_OTG_DPTXFSIZ11 		(USBOTG_LINK_BASE + 0x12C) /* R/W Device Periodic Transmit FIFO-11 Size Register */
+#define S5P_OTG_DPTXFSIZ12 		(USBOTG_LINK_BASE + 0x130) /* R/W Device Periodic Transmit FIFO-12 Size Register */
+#define S5P_OTG_DPTXFSIZ13 		(USBOTG_LINK_BASE + 0x134) /* R/W Device Periodic Transmit FIFO-13 Size Register */
+#define S5P_OTG_DPTXFSIZ14 		(USBOTG_LINK_BASE + 0x138) /* R/W Device Periodic Transmit FIFO-14 Size Register */
+#define S5P_OTG_DPTXFSIZ15 		(USBOTG_LINK_BASE + 0x13C) /* R/W Device Periodic Transmit FIFO-15 Size Register */
+
+/* Host Mode Register */
+/* Host Global Register */
+#define S5P_OTG_HCFG 			(USBOTG_LINK_BASE + 0x400) /* R/W Host Configuration Register */
+#define S5P_OTG_HFIR 			(USBOTG_LINK_BASE + 0x404) /* R/W Host Frame Interval Register */
+#define S5P_OTG_HFNUM 			(USBOTG_LINK_BASE + 0x408) /* R Host Frame Number/Frame Time Remaining Register */
+
+#define S5P_OTG_HPTXSTS 		(USBOTG_LINK_BASE + 0x410) /* R Host Periodic Transmit FIFO/Queue Status Register */
+#define S5P_OTG_HAINT 			(USBOTG_LINK_BASE + 0x414) /* R Host All Channels Interrupt Register */
+#define S5P_OTG_HAINTMSK 		(USBOTG_LINK_BASE + 0x418) /* R/W Host All Channels Interrupt Mask Register */
+
+/*Host Port Control and Status Register */
+#define S5P_OTG_HPRT 			(USBOTG_LINK_BASE + 0x440) /* R/W Host Port Control and Status Register */
+
+/*Host Channel-Specific Register */
+#define S5P_OTG_HCCHAR0 		(USBOTG_LINK_BASE + 0x500) /* R/W Host Channel 0 Characteristics Register */
+#define S5P_OTG_HCSPLT0 		(USBOTG_LINK_BASE + 0x504) /* R/W Host Channel 0 Spilt Control Register */
+#define S5P_OTG_HCINT0 			(USBOTG_LINK_BASE + 0x508) /* R/W Host Channel 0 Interrupt Register */
+#define S5P_OTG_HCINTMSK0 		(USBOTG_LINK_BASE + 0x50C) /* R/W Host Channel 0 Interrupt Mask Register */
+#define S5P_OTG_HCTSIZ0 		(USBOTG_LINK_BASE + 0x510) /* R/W Host Channel 0 Transfer Size Register */
+#define S5P_OTG_HCDMA0 			(USBOTG_LINK_BASE + 0x514) /* R/W Host Channel 0 DMA Address Register */
+#define S5P_OTG_HCCHAR1 		(USBOTG_LINK_BASE + 0x520) /* R/W Host Channel 1 Characteristics Register */
+#define S5P_OTG_HCSPLT1 		(USBOTG_LINK_BASE + 0x524) /* R/W Host Channel 1 Spilt Control Register */
+#define S5P_OTG_HCINT1 			(USBOTG_LINK_BASE + 0x528) /* R/W Host Channel 1 Interrupt Register */
+#define S5P_OTG_HCINTMSK1 		(USBOTG_LINK_BASE + 0x52C) /* R/W Host Channel 1 Interrupt Mask Register */
+#define S5P_OTG_HCTSIZ1 		(USBOTG_LINK_BASE + 0x530) /* R/W Host Channel 1 Transfer Size Register */
+#define S5P_OTG_HCDMA1 			(USBOTG_LINK_BASE + 0x534) /* R/W Host Channel 1 DMA Address Register */
+#define S5P_OTG_HCCHAR2 		(USBOTG_LINK_BASE + 0x540) /* R/W Host Channel 2 Characteristics Register */
+#define S5P_OTG_HCSPLT2 		(USBOTG_LINK_BASE + 0x544) /* R/W Host Channel 2 Spilt Control Register */
+#define S5P_OTG_HCINT2 			(USBOTG_LINK_BASE + 0x548) /* R/W Host Channel 2 Interrupt Register */
+#define S5P_OTG_HCINTMSK2 		(USBOTG_LINK_BASE + 0x54C) /* R/W Host Channel 2 Interrupt Mask Register */
+#define S5P_OTG_HCTSIZ2 		(USBOTG_LINK_BASE + 0x550) /* R/W Host Channel 2 Transfer Size Register */
+#define S5P_OTG_HCDMA2 			(USBOTG_LINK_BASE + 0x554) /* R/W Host Channel 2 DMA Address Register */
+#define S5P_OTG_HCCHAR3 		(USBOTG_LINK_BASE + 0x560) /* R/W Host Channel 3 Characteristics Register */
+#define S5P_OTG_HCSPLT3 		(USBOTG_LINK_BASE + 0x564) /* R/W Host Channel 3 Spilt Control Register */
+#define S5P_OTG_HCINT3 			(USBOTG_LINK_BASE + 0x568) /* R/W Host Channel 3 Interrupt Register */
+#define S5P_OTG_HCINTMSK3 		(USBOTG_LINK_BASE + 0x56C) /* R/W Host Channel 3 Interrupt Mask Register */
+#define S5P_OTG_HCTSIZ3 		(USBOTG_LINK_BASE + 0x570) /* R/W Host Channel 3 Transfer Size Register */
+#define S5P_OTG_HCDMA3 			(USBOTG_LINK_BASE + 0x574) /* R/W Host Channel 3 DMA Address Register */
+#define S5P_OTG_HCCHAR4 		(USBOTG_LINK_BASE + 0x580) /* R/W Host Channel 4 Characteristics Register */
+#define S5P_OTG_HCSPLT4 		(USBOTG_LINK_BASE + 0x584) /* R/W Host Channel 4 Spilt Control Register */
+#define S5P_OTG_HCINT4 			(USBOTG_LINK_BASE + 0x588) /* R/W Host Channel 4 Interrupt Register */
+#define S5P_OTG_HCINTMSK4 		(USBOTG_LINK_BASE + 0x58C) /* R/W Host Channel 4 Interrupt Mask Register */
+#define S5P_OTG_HCTSIZ4 		(USBOTG_LINK_BASE + 0x580) /* R/W Host Channel 4 Transfer Size Register */
+#define S5P_OTG_HCDMA4 			(USBOTG_LINK_BASE + 0x584) /* R/W Host Channel 4 DMA Address Register */
+#define S5P_OTG_HCCHAR5 		(USBOTG_LINK_BASE + 0x5A0) /* R/W Host Channel 5 Characteristics Register */
+#define S5P_OTG_HCSPLT5 		(USBOTG_LINK_BASE + 0x5A4) /* R/W Host Channel 5 Spilt Control Register */
+#define S5P_OTG_HCINT5 			(USBOTG_LINK_BASE + 0x5A8) /* R/W Host Channel 5 Interrupt Register */
+#define S5P_OTG_HCINTMSK5 		(USBOTG_LINK_BASE + 0x5AC) /* R/W Host Channel 5 Interrupt Mask Register */
+#define S5P_OTG_HCTSIZ5 		(USBOTG_LINK_BASE + 0x5B0) /* R/W Host Channel 5 Transfer Size Register */
+#define S5P_OTG_HCDMA5 			(USBOTG_LINK_BASE + 0x5B4) /* R/W Host Channel 5 DMA Address Register */
+#define S5P_OTG_HCCHAR6 		(USBOTG_LINK_BASE + 0x5C0) /* R/W Host Channel 6 Characteristics Register */
+#define S5P_OTG_HCSPLT6 		(USBOTG_LINK_BASE + 0x5C4) /* R/W Host Channel 6 Spilt Control Register */
+#define S5P_OTG_HCINT6 			(USBOTG_LINK_BASE + 0x5C8) /* R/W Host Channel 6 Interrupt Register */
+#define S5P_OTG_HCINTMSK6 		(USBOTG_LINK_BASE + 0x5CC) /* R/W Host Channel 6 Interrupt Mask Register */
+#define S5P_OTG_HCTSIZ6 		(USBOTG_LINK_BASE + 0x5D0) /* R/W Host Channel 6 Transfer Size Register */
+#define S5P_OTG_HCDMA6 			(USBOTG_LINK_BASE + 0x5D4) /* R/W Host Channel 6 DMA Address Register */
+#define S5P_OTG_HCCHAR7 		(USBOTG_LINK_BASE + 0x5E0) /* R/W Host Channel 7 Characteristics Register */
+#define S5P_OTG_HCSPLT7 		(USBOTG_LINK_BASE + 0x5E4) /* R/W Host Channel 7 Spilt Control Register */
+#define S5P_OTG_HCINT7 			(USBOTG_LINK_BASE + 0x5E8) /* R/W Host Channel 7 Interrupt Register */
+#define S5P_OTG_HCINTMSK7 		(USBOTG_LINK_BASE + 0x5EC) /* R/W Host Channel 7 Interrupt Mask Register */
+#define S5P_OTG_HCTSIZ7 		(USBOTG_LINK_BASE + 0x5F0) /* R/W Host Channel 7 Transfer Size Register */
+#define S5P_OTG_HCDMA7 			(USBOTG_LINK_BASE + 0x5F4) /* R/W Host Channel 7 DMA Address Register */
+#define S5P_OTG_HCCHAR8 		(USBOTG_LINK_BASE + 0x600) /* R/W Host Channel 8 Characteristics Register */
+#define S5P_OTG_HCSPLT8 		(USBOTG_LINK_BASE + 0x604) /* R/W Host Channel 8 Spilt Control Register */
+#define S5P_OTG_HCINT8 			(USBOTG_LINK_BASE + 0x608) /* R/W Host Channel 8 Interrupt Register */
+#define S5P_OTG_HCINTMSK8 		(USBOTG_LINK_BASE + 0x60C) /* R/W Host Channel 8 Interrupt Mask Register */
+#define S5P_OTG_HCTSIZ8 		(USBOTG_LINK_BASE + 0x610) /* R/W Host Channel 8 Transfer Size Register */
+#define S5P_OTG_HCDMA8 			(USBOTG_LINK_BASE + 0x614) /* R/W Host Channel 8 DMA Address Register */
+#define S5P_OTG_HCCHAR9 		(USBOTG_LINK_BASE + 0x620) /* R/W Host Channel 9 Characteristics Register */
+#define S5P_OTG_HCSPLT9 		(USBOTG_LINK_BASE + 0x624) /* R/W Host Channel 9 Spilt Control Register */
+#define S5P_OTG_HCINT9 			(USBOTG_LINK_BASE + 0x628) /* R/W Host Channel 9 Interrupt Register */
+#define S5P_OTG_HCINTMSK9 		(USBOTG_LINK_BASE + 0x62C) /* R/W Host Channel 9 Interrupt Mask Register */
+#define S5P_OTG_HCTSIZ9 		(USBOTG_LINK_BASE + 0x630) /* R/W Host Channel 9 Transfer Size Register */
+#define S5P_OTG_HCDMA9 			(USBOTG_LINK_BASE + 0x634) /* R/W Host Channel 9 DMA Address Register */
+#define S5P_OTG_HCCHAR10 		(USBOTG_LINK_BASE + 0x640) /* R/W Host Channel 10 Characteristics Register */
+#define S5P_OTG_HCSPLT10 		(USBOTG_LINK_BASE + 0x644) /* R/W Host Channel 10 Spilt Control Register */
+#define S5P_OTG_HCINT10 		(USBOTG_LINK_BASE + 0x648) /* R/W Host Channel 10 Interrupt Register */
+#define S5P_OTG_HCINTMSK10 		(USBOTG_LINK_BASE + 0x64C) /* R/W Host Channel 10 Interrupt Mask Register */
+#define S5P_OTG_HCTSIZ10 		(USBOTG_LINK_BASE + 0x650) /* R/W Host Channel 10 Transfer Size Register */
+#define S5P_OTG_HCDMA10 		(USBOTG_LINK_BASE + 0x654) /* R/W Host Channel 10 DMA Address Register */
+#define S5P_OTG_HCCHAR11 		(USBOTG_LINK_BASE + 0x660) /* R/W Host Channel 11 Characteristics Register */
+#define S5P_OTG_HCSPLT11 		(USBOTG_LINK_BASE + 0x664) /* R/W Host Channel 11 Spilt Control Register */
+#define S5P_OTG_HCINT11 		(USBOTG_LINK_BASE + 0x668) /* R/W Host Channel 11 Interrupt Register */
+#define S5P_OTG_HCINTMSK11 		(USBOTG_LINK_BASE + 0x66C) /* R/W Host Channel 11 Interrupt Mask Register */
+#define S5P_OTG_HCTSIZ11 		(USBOTG_LINK_BASE + 0x670) /* R/W Host Channel 11 Transfer Size Register */
+#define S5P_OTG_HCDMA11 		(USBOTG_LINK_BASE + 0x674) /* R/W Host Channel 11 DMA Address Register */
+#define S5P_OTG_HCCHAR12 		(USBOTG_LINK_BASE + 0x680) /* R/W Host Channel 12 Characteristics Register */
+#define S5P_OTG_HCSPLT12 		(USBOTG_LINK_BASE + 0x684) /* R/W Host Channel 12 Spilt Control Register */
+#define S5P_OTG_HCINT12 		(USBOTG_LINK_BASE + 0x688) /* R/W Host Channel 12 Interrupt Register */
+#define S5P_OTG_HCINTMSK12 		(USBOTG_LINK_BASE + 0x68C) /* R/W Host Channel 12 Interrupt Mask Register */
+#define S5P_OTG_HCTSIZ12 		(USBOTG_LINK_BASE + 0x690) /* R/W Host Channel 12 Transfer Size Register */
+#define S5P_OTG_HCDMA12 		(USBOTG_LINK_BASE + 0x694) /* R/W Host Channel 12 DMA Address Register */
+#define S5P_OTG_HCCHAR13 		(USBOTG_LINK_BASE + 0x6A0) /* R/W Host Channel 13 Characteristics Register */
+#define S5P_OTG_HCSPLT13 		(USBOTG_LINK_BASE + 0x6A4) /* R/W Host Channel 13 Spilt Control Register */
+#define S5P_OTG_HCINT13 		(USBOTG_LINK_BASE + 0x6A8) /* R/W Host Channel 13 Interrupt Register */
+#define S5P_OTG_HCINTMSK13 		(USBOTG_LINK_BASE + 0x6AC) /* R/W Host Channel 13 Interrupt Mask Register */
+#define S5P_OTG_HCTSIZ13 		(USBOTG_LINK_BASE + 0x6B0) /* R/W Host Channel 13 Transfer Size Register */
+#define S5P_OTG_HCDMA13 		(USBOTG_LINK_BASE + 0x6B4) /* R/W Host Channel 13 DMA Address Register */
+#define S5P_OTG_HCCHAR14 		(USBOTG_LINK_BASE + 0x6C0) /* R/W Host Channel 14 Characteristics Register */
+#define S5P_OTG_HCSPLT14 		(USBOTG_LINK_BASE + 0x6C4) /* R/W Host Channel 14 Spilt Control Register */
+#define S5P_OTG_HCINT14 		(USBOTG_LINK_BASE + 0x6C8) /* R/W Host Channel 14 Interrupt Register */
+#define S5P_OTG_HCINTMSK14 		(USBOTG_LINK_BASE + 0x6CC) /* R/W Host Channel 14 Interrupt Mask Register */
+#define S5P_OTG_HCTSIZ14	 	(USBOTG_LINK_BASE + 0x6D0) /* R/W Host Channel 14 Transfer Size Register */
+#define S5P_OTG_HCDMA14 		(USBOTG_LINK_BASE + 0x6D4) /* R/W Host Channel 14 DMA Address Register */
+#define S5P_OTG_HCCHAR15 		(USBOTG_LINK_BASE + 0x6E0) /* R/W Host Channel 15 Characteristics Register */
+#define S5P_OTG_HCSPLT15 		(USBOTG_LINK_BASE + 0x6E4) /* R/W Host Channel 15 Spilt Control Register */
+#define S5P_OTG_HCINT15 		(USBOTG_LINK_BASE + 0x6E8) /* R/W Host Channel 15 Interrupt Register */
+#define S5P_OTG_HCINTMSK15 		(USBOTG_LINK_BASE + 0x6EC) /* R/W Host Channel 15 Interrupt Mask Register */
+#define S5P_OTG_HCTSIZ15 		(USBOTG_LINK_BASE + 0x6F0) /* R/W Host Channel 15 Transfer Size Register */
+#define S5P_OTG_HCDMA15 		(USBOTG_LINK_BASE + 0x6F4) /* R/W Host Channel 15 DMA Address Register */
+
+/* Device Global Register */
+#define S5P_OTG_DCFG 			(USBOTG_LINK_BASE + 0x800) /* R/W Device Configuration Register */
+#define S5P_OTG_DCTL 			(USBOTG_LINK_BASE + 0x804) /* R/W Device Control Register */
+#define S5P_OTG_DSTS 			(USBOTG_LINK_BASE + 0x808) /* R Device Status Register */
+#define S5P_OTG_DIEPMSK 		(USBOTG_LINK_BASE + 0x810) /* R/W Device IN Endpoint Common Interrupt Mask Register */
+#define S5P_OTG_DOEPMSK 		(USBOTG_LINK_BASE + 0x814) /* R/W Device OUT Endpoint Common Interrupt Mask Register */
+#define S5P_OTG_DAINT 			(USBOTG_LINK_BASE + 0x818) /* R Device ALL Endpoints Interrupt Register */
+#define S5P_OTG_DAINTMSK 		(USBOTG_LINK_BASE + 0x81C) /* R/W Device ALL Endpoints Interrupt Mask Register */
+#define S5P_OTG_DTKNQR1 		(USBOTG_LINK_BASE + 0x820) /* R Device IN Token Sequence Learning Queue Read Register */
+#define S5P_OTG_DTKNQR2 		(USBOTG_LINK_BASE + 0x824) /* R Device IN Token Sequence Learning Queue Read Register */
+#define S5P_OTG_DVBUSDIS 		(USBOTG_LINK_BASE + 0x828) /* R/W Device VBUS Discharge Time Register */
+#define S5P_OTG_DVBUSPULSE 		(USBOTG_LINK_BASE + 0x82C) /* R/W Device VBUS Pulsing Time Register */
+#define S5P_OTG_DTKNQR3 		(USBOTG_LINK_BASE + 0x830) /* R Device IN Token Sequence Learning Queue Read Register */
+#define S5P_OTG_DTKNQR4 		(USBOTG_LINK_BASE + 0x834) /* R Device IN Token Sequence Learning Queue Read Register */
+
+/* Device Logical IN Endpo int-Specific Registers */
+#define S5P_OTG_DIEPCTL0 		(USBOTG_LINK_BASE + 0x900) /* R/W Device Control IN Endpoint 0 Control Register */
+#define S5P_OTG_DIEPINT0 		(USBOTG_LINK_BASE + 0x908) /* R/W Device IN Endpoint 0 Interrupt Register */
+#define S5P_OTG_DIEPTSIZ0 		(USBOTG_LINK_BASE + 0x910) /* R/W Device IN Endpoint 0 Transfer Size Register */
+#define S5P_OTG_DIEPDMA0 		(USBOTG_LINK_BASE + 0x914) /* R/W Device IN Endpoint 0 DMA Address Register */
+#define S5P_OTG_DIEPCTL1 		(USBOTG_LINK_BASE + 0x920) /* R/W Device Control IN Endpoint 1 Control Register */
+#define S5P_OTG_DIEPINT1 		(USBOTG_LINK_BASE + 0x928) /* R/W Device IN Endpoint 1 Interrupt Register */
+#define S5P_OTG_DIEPTSIZ1 		(USBOTG_LINK_BASE + 0x930) /* R/W Device IN Endpoint 1 Transfer Size Register */
+#define S5P_OTG_DIEPDMA1 		(USBOTG_LINK_BASE + 0x934) /* R/W Device IN Endpoint 1 DMA Address Register */
+#define S5P_OTG_DIEPCTL2 		(USBOTG_LINK_BASE + 0x940) /* R/W Device Control IN Endpoint 2 Control Register */
+#define S5P_OTG_DIEPINT2 		(USBOTG_LINK_BASE + 0x948) /* R/W Device IN Endpoint 2 Interrupt Register */
+#define S5P_OTG_DIEPTSIZ2 		(USBOTG_LINK_BASE + 0x950) /* R/W Device IN Endpoint 2 Transfer Size Register */
+#define S5P_OTG_DIEPDMA2 		(USBOTG_LINK_BASE + 0x954) /* R/W Device IN Endpoint 2 DMA Address Register */
+#define S5P_OTG_DIEPCTL3 		(USBOTG_LINK_BASE + 0x960) /* R/W Device Control IN Endpoint 3 Control Register */
+#define S5P_OTG_DIEPINT3 		(USBOTG_LINK_BASE + 0x968) /* R/W Device IN Endpoint 3 Interrupt Register */
+#define S5P_OTG_DIEPTSIZ3 		(USBOTG_LINK_BASE + 0x970) /* R/W Device IN Endpoint 3 Transfer Size Register */
+#define S5P_OTG_DIEPDMA3 		(USBOTG_LINK_BASE + 0x974) /* R/W Device IN Endpoint 3 DMA Address Register */
+#define S5P_OTG_DIEPCTL4 		(USBOTG_LINK_BASE + 0x980) /* R/W Device Control IN Endpoint 0 Control Register */
+#define S5P_OTG_DIEPINT4 		(USBOTG_LINK_BASE + 0x988) /* R/W Device IN Endpoint 4 Interrupt Register */
+#define S5P_OTG_DIEPTSIZ4 		(USBOTG_LINK_BASE + 0x990) /* R/W Device IN Endpoint 4 Transfer Size Register */
+#define S5P_OTG_DIEPDMA4 		(USBOTG_LINK_BASE + 0x994) /* R/W Device IN Endpoint 4 DMA Address Register */
+#define S5P_OTG_DIEPCTL5 		(USBOTG_LINK_BASE + 0x9A0) /* R/W Device Control IN Endpoint 5 Control Register */
+#define S5P_OTG_DIEPINT5 		(USBOTG_LINK_BASE + 0x9A8) /* R/W Device IN Endpoint 5 Interrupt Register */
+#define S5P_OTG_DIEPTSIZ5 		(USBOTG_LINK_BASE + 0x9B0) /* R/W Device IN Endpoint 5 Transfer Size Register */
+#define S5P_OTG_DIEPDMA5 		(USBOTG_LINK_BASE + 0x9B4) /* R/W Device IN Endpoint 5 DMA Address Register */
+#define S5P_OTG_DIEPCTL6 		(USBOTG_LINK_BASE + 0x9C0) /* R/W Device Control IN Endpoint 6 Control Register */
+#define S5P_OTG_DIEPINT6		(USBOTG_LINK_BASE + 0x9C8) /* R/W Device IN Endpoint 6 Interrupt Register */
+#define S5P_OTG_DIEPTSIZ6		(USBOTG_LINK_BASE + 0x9D0) /* R/W Device IN Endpoint 6 Transfer Size Register */
+#define S5P_OTG_DIEPDMA6		(USBOTG_LINK_BASE + 0x9D4) /* R/W Device IN Endpoint 6 DMA Address Register */
+#define S5P_OTG_DIEPCTL7		(USBOTG_LINK_BASE + 0x9E0) /* R/W Device Control IN Endpoint 7 Control Register */
+#define S5P_OTG_DIEPINT7		(USBOTG_LINK_BASE + 0x9E8) /* R/W Device IN Endpoint 7 Interrupt Register */
+#define S5P_OTG_DIEPTSIZ7		(USBOTG_LINK_BASE + 0x9F0) /* R/W Device IN Endpoint 7 Transfer Size Register */
+#define S5P_OTG_DIEPDMA7		(USBOTG_LINK_BASE + 0x9F4) /* R/W Device IN Endpoint 7 DMA Address Register */
+#define S5P_OTG_DIEPCTL8		(USBOTG_LINK_BASE + 0xA00) /* R/W Device Control IN Endpoint 8 Control Register */
+#define S5P_OTG_DIEPINT8		(USBOTG_LINK_BASE + 0xA08) /* R/W Device IN Endpoint 8 Interrupt Register */
+#define S5P_OTG_DIEPTSIZ8		(USBOTG_LINK_BASE + 0xA10) /* R/W Device IN Endpoint 8 Transfer Size Register */
+#define S5P_OTG_DIEPDMA8		(USBOTG_LINK_BASE + 0xA14) /* R/W Device IN Endpoint 8 DMA Address Register */
+#define S5P_OTG_DIEPCTL9		(USBOTG_LINK_BASE + 0xA20) /* R/W Device Control IN Endpoint 9 Control Register */
+#define S5P_OTG_DIEPINT9		(USBOTG_LINK_BASE + 0xA28) /* R/W Device IN Endpoint 9 Interrupt Register */
+#define S5P_OTG_DIEPTSIZ9		(USBOTG_LINK_BASE + 0xA30) /* R/W Device IN Endpoint 9 Transfer Size Register */
+#define S5P_OTG_DIEPDMA9		(USBOTG_LINK_BASE + 0xA34) /* R/W Device IN Endpoint 9 DMA Address Register */
+#define S5P_OTG_DIEPCTL10		(USBOTG_LINK_BASE + 0xA40) /* R/W Device Control IN Endpoint 10 Control Register */
+#define S5P_OTG_DIEPINT10		(USBOTG_LINK_BASE + 0xA48) /* R/W Device IN Endpoint 10 Interrupt Register */
+#define S5P_OTG_DIEPTSIZ10		(USBOTG_LINK_BASE + 0xA50) /* R/W Device IN Endpoint 10 Transfer Size Register */
+#define S5P_OTG_DIEPDMA10		(USBOTG_LINK_BASE + 0xA54) /* R/W Device IN Endpoint 10 DMA Address Register */
+#define S5P_OTG_DIEPCTL11		(USBOTG_LINK_BASE + 0xA60) /* R/W Device Control IN Endpoint 11 Control Register */
+#define S5P_OTG_DIEPINT11		(USBOTG_LINK_BASE + 0xA68) /* R/W Device IN Endpoint 11 Interrupt Register */
+#define S5P_OTG_DIEPTSIZ11		(USBOTG_LINK_BASE + 0xA70) /* R/W Device IN Endpoint 11 Transfer Size Register */
+#define S5P_OTG_DIEPDMA11		(USBOTG_LINK_BASE + 0xA74) /* R/W Device IN Endpoint 11 DMA Address Register */
+#define S5P_OTG_DIEPCTL12		(USBOTG_LINK_BASE + 0xA80) /* R/W Device Control IN Endpoint 12 Control Register */
+#define S5P_OTG_DIEPINT12		(USBOTG_LINK_BASE + 0xA88) /* R/W Device IN Endpoint 12 Interrupt Register */
+#define S5P_OTG_DIEPTSIZ12		(USBOTG_LINK_BASE + 0xA90) /* R/W Device IN Endpoint 12 Transfer Size Register */
+#define S5P_OTG_DIEPDMA12		(USBOTG_LINK_BASE + 0xA94) /* R/W Device IN Endpoint 12 DMA Address Register */
+#define S5P_OTG_DIEPCTL13		(USBOTG_LINK_BASE + 0xAA0) /* R/W Device Control IN Endpoint 13 Control Register */
+#define S5P_OTG_DIEPINT13		(USBOTG_LINK_BASE + 0xAA8) /* R/W Device IN Endpoint 13 Interrupt Register */
+#define S5P_OTG_DIEPTSIZ13		(USBOTG_LINK_BASE + 0xAB0) /* R/W Device IN Endpoint 13 Transfer Size Register */
+#define S5P_OTG_DIEPDMA13		(USBOTG_LINK_BASE + 0xAB4) /* R/W Device IN Endpoint 13 DMA Address Register */
+#define S5P_OTG_DIEPCTL14		(USBOTG_LINK_BASE + 0xAC0) /* R/W Device Control IN Endpoint 14 Control Register */
+#define S5P_OTG_DIEPINT14		(USBOTG_LINK_BASE + 0xAC8) /* R/W Device IN Endpoint 14 Interrupt Register */
+#define S5P_OTG_DIEPTSIZ14		(USBOTG_LINK_BASE + 0xAD0) /* R/W Device IN Endpoint 14 Transfer Size Register */
+#define S5P_OTG_DIEPDMA14		(USBOTG_LINK_BASE + 0xAD4) /* R/W Device IN Endpoint 14 DMA Address Register */
+#define S5P_OTG_DIEPCTL15		(USBOTG_LINK_BASE + 0xAE0) /* R/W Device Control IN Endpoint 15 Control Register */
+#define S5P_OTG_DIEPINT15		(USBOTG_LINK_BASE + 0xAE8) /* R/W Device IN Endpoint 15 Interrupt Register */
+#define S5P_OTG_DIEPTSIZ15		(USBOTG_LINK_BASE + 0xAF0) /* R/W Device IN Endpoint 15 Transfer Size Register */
+#define S5P_OTG_DIEPDMA15		(USBOTG_LINK_BASE + 0xAF4) /* R/W Device IN Endpoint 15 DMA Address Register */
+
+/* Device Logical OUT Endpoint-Specific Register */
+#define S5P_OTG_DOEPCTL0		(USBOTG_LINK_BASE + 0xB00) /* R/W Device Control OUT Endpoint 0 Control Register */
+#define S5P_OTG_DOEPINT0		(USBOTG_LINK_BASE + 0xB08) /* R/W Device OUT Endpoint 0 Interrupt Register */
+#define S5P_OTG_DOEPTSIZ0		(USBOTG_LINK_BASE + 0xB10) /* R/W Device OUT Endpoint 0 Transfer Size Register */
+#define S5P_OTG_DOEPDMA0		(USBOTG_LINK_BASE + 0xB14) /* R/W Device OUT Endpoint 0 DMA Address Register */
+#define S5P_OTG_DOEPCTL1		(USBOTG_LINK_BASE + 0xB20) /* R/W Device Control OUT Endpoint 1 Control Register */
+#define S5P_OTG_DOEPINT1		(USBOTG_LINK_BASE + 0xB28) /* R/W Device OUT Endpoint 1 Interrupt Register */
+#define S5P_OTG_DOEPTSIZ1		(USBOTG_LINK_BASE + 0xB30) /* R/W Device OUT Endpoint 1 Transfer Size Register */
+#define S5P_OTG_DOEPDMA1		(USBOTG_LINK_BASE + 0xB34) /* R/W Device OUT Endpoint 1 DMA Address Register */
+#define S5P_OTG_DOEPCTL2		(USBOTG_LINK_BASE + 0xB40) /* R/W Device Control OUT Endpoint 2 Control Register */
+#define S5P_OTG_DOEPINT2		(USBOTG_LINK_BASE + 0xB48) /* R/W Device OUT Endpoint 2 Interrupt Register */
+#define S5P_OTG_DOEPTSIZ2		(USBOTG_LINK_BASE + 0xB50) /* R/W Device OUT Endpoint 2 Transfer Size Register */
+#define S5P_OTG_DOEPDMA2		(USBOTG_LINK_BASE + 0xB54) /* R/W Device OUT Endpoint 2 DMA Address Register */
+#define S5P_OTG_DOEPCTL3		(USBOTG_LINK_BASE + 0xB60) /* R/W Device Control OUT Endpoint 3 Control Register */
+#define S5P_OTG_DOEPINT3		(USBOTG_LINK_BASE + 0xB68) /* R/W Device OUT Endpoint 3 Interrupt Register */
+#define S5P_OTG_DOEPTSIZ3		(USBOTG_LINK_BASE + 0xB70) /* R/W Device OUT Endpoint 3 Transfer Size Register */
+#define S5P_OTG_DOEPDMA3		(USBOTG_LINK_BASE + 0xB74) /* R/W Device OUT Endpoint 3 DMA Address Register */
+#define S5P_OTG_DOEPCTL4		(USBOTG_LINK_BASE + 0xB80) /* R/W Device Control OUT Endpoint 4 Control Register */
+#define S5P_OTG_DOEPINT4		(USBOTG_LINK_BASE + 0xB88) /* R/W Device OUT Endpoint 4 Interrupt Register */
+#define S5P_OTG_DOEPTSIZ4		(USBOTG_LINK_BASE + 0xB90) /* R/W Device OUT Endpoint 4 Transfer Size Register */
+#define S5P_OTG_DOEPDMA4		(USBOTG_LINK_BASE + 0xB94) /* R/W Device OUT Endpoint 4 DMA Address Register */
+#define S5P_OTG_DOEPCTL5		(USBOTG_LINK_BASE + 0xBA0) /* R/W Device Control OUT Endpoint 5 Control Register */
+#define S5P_OTG_DOEPINT5		(USBOTG_LINK_BASE + 0xBA8) /* R/W Device OUT Endpoint 5 Interrupt Register */
+#define S5P_OTG_DOEPTSIZ5		(USBOTG_LINK_BASE + 0xBB0) /* R/W Device OUT Endpoint 5 Transfer Size Register */
+#define S5P_OTG_DOEPDMA5		(USBOTG_LINK_BASE + 0xBB4) /* R/W Device OUT Endpoint 5 DMA Address Register */
+#define S5P_OTG_DOEPCTL6		(USBOTG_LINK_BASE + 0xBC0) /* R/W Device Control OUT Endpoint 6 Control Register */
+#define S5P_OTG_DOEPINT6		(USBOTG_LINK_BASE + 0xBC8) /* R/W Device OUT Endpoint 6 Interrupt Register */
+#define S5P_OTG_DOEPTSIZ6		(USBOTG_LINK_BASE + 0xBD0) /* R/W Device OUT Endpoint 6 Transfer Size Register */
+#define S5P_OTG_DOEPDMA6		(USBOTG_LINK_BASE + 0xBD4) /* R/W Device OUT Endpoint 6 DMA Address Register */
+#define S5P_OTG_DOEPCTL7		(USBOTG_LINK_BASE + 0xBE0) /* R/W Device Control OUT Endpoint 7 Control Register */
+#define S5P_OTG_DOEPINT7		(USBOTG_LINK_BASE + 0xBE8) /* R/W Device OUT Endpoint 7 Interrupt Register */
+#define S5P_OTG_DOEPTSIZ7		(USBOTG_LINK_BASE + 0xBF0) /* R/W Device OUT Endpoint 7 Transfer Size Register */
+#define S5P_OTG_DOEPDMA7		(USBOTG_LINK_BASE + 0xBF4) /* R/W Device OUT Endpoint 7 DMA Address Register */
+#define S5P_OTG_DOEPCTL8		(USBOTG_LINK_BASE + 0xC00) /* R/W Device Control OUT Endpoint 8 Control Register */
+#define S5P_OTG_DOEPINT8		(USBOTG_LINK_BASE + 0xC08) /* R/W Device OUT Endpoint 8 Interrupt Register */
+#define S5P_OTG_DOEPTSIZ8		(USBOTG_LINK_BASE + 0xC10) /* R/W Device OUT Endpoint 8 Transfer Size Register */
+#define S5P_OTG_DOEPDMA8		(USBOTG_LINK_BASE + 0xC14) /* R/W Device OUT Endpoint 8 DMA Address Register */
+#define S5P_OTG_DOEPCTL9		(USBOTG_LINK_BASE + 0xC20) /* R/W Device Control OUT Endpoint 9 Control Register */
+#define S5P_OTG_DOEPINT9		(USBOTG_LINK_BASE + 0xC28) /* R/W Device OUT Endpoint 9 Interrupt Register */
+#define S5P_OTG_DOEPTSIZ9		(USBOTG_LINK_BASE + 0xC30) /* R/W Device OUT Endpoint 9 Transfer Size Register */
+#define S5P_OTG_DOEPDMA9		(USBOTG_LINK_BASE + 0xC34) /* R/W Device OUT Endpoint 9 DMA Address Register */
+#define S5P_OTG_DOEPCTL10		(USBOTG_LINK_BASE + 0xC40) /* R/W Device Control OUT Endpoint 10 Control Register */
+#define S5P_OTG_DOEPINT10		(USBOTG_LINK_BASE + 0xC48) /* R/W Device OUT Endpoint 10 Interrupt Register */
+#define S5P_OTG_DOEPTSIZ10		(USBOTG_LINK_BASE + 0xC50) /* R/W Device OUT Endpoint 10 Transfer Size Register */
+#define S5P_OTG_DOEPDMA10		(USBOTG_LINK_BASE + 0xC54) /* R/W Device OUT Endpoint 10 DMA Address Register */
+#define S5P_OTG_DOEPCTL11		(USBOTG_LINK_BASE + 0xC60) /* R/W Device Control OUT Endpoint 11 Control Register */
+#define S5P_OTG_DOEPINT11		(USBOTG_LINK_BASE + 0xC68) /* R/W Device OUT Endpoint 11 Interrupt Register */
+#define S5P_OTG_DOEPTSIZ11		(USBOTG_LINK_BASE + 0xC70) /* R/W Device OUT Endpoint 11 Transfer Size Register */
+#define S5P_OTG_DOEPDMA11		(USBOTG_LINK_BASE + 0xC74) /* R/W Device OUT Endpoint 11 DMA Address Register */
+#define S5P_OTG_DOEPCTL12		(USBOTG_LINK_BASE + 0xC80) /* R/W Device Control OUT Endpoint 12 Control Register */
+#define S5P_OTG_DOEPINT12		(USBOTG_LINK_BASE + 0xC88) /* R/W Device OUT Endpoint 12 Interrupt Register */
+#define S5P_OTG_DOEPTSIZ12		(USBOTG_LINK_BASE + 0xC90) /* R/W Device OUT Endpoint 12 Transfer Size Register */
+#define S5P_OTG_DOEPDMA12		(USBOTG_LINK_BASE + 0xC94) /* R/W Device OUT Endpoint 12 DMA Address Register */
+#define S5P_OTG_DOEPCTL13		(USBOTG_LINK_BASE + 0xCA0) /* R/W Device Control OUT Endpoint 13 Control Register */
+#define S5P_OTG_DOEPINT13		(USBOTG_LINK_BASE + 0xCA8) /* R/W Device OUT Endpoint 13 Interrupt Register */
+#define S5P_OTG_DOEPTSIZ13		(USBOTG_LINK_BASE + 0xCB0) /* R/W Device OUT Endpoint 13 Transfer Size Register */
+#define S5P_OTG_DOEPDMA13		(USBOTG_LINK_BASE + 0xCB4) /* R/W Device OUT Endpoint 13 DMA Address Register */
+#define S5P_OTG_DOEPCTL14		(USBOTG_LINK_BASE + 0xCC0) /* R/W Device Control OUT Endpoint 14 Control Register */
+#define S5P_OTG_DOEPINT14		(USBOTG_LINK_BASE + 0xCC8) /* R/W Device OUT Endpoint 14 Interrupt Register */
+#define S5P_OTG_DOEPTSIZ14		(USBOTG_LINK_BASE + 0xCD0) /* R/W Device OUT Endpoint 14 Transfer Size Register */
+#define S5P_OTG_DOEPDMA14		(USBOTG_LINK_BASE + 0xCD4) /* R/W Device OUT Endpoint 14 DMA Address Register */
+#define S5P_OTG_DOEPCTL15		(USBOTG_LINK_BASE + 0xCE0) /* R/W Device Control OUT Endpoint 15 Control Register */
+#define S5P_OTG_OTG_DOEPINT15		(USBOTG_LINK_BASE + 0xCE8) /* R/W Device OUT Endpoint 15 Interrupt Register */
+#define S5P_OTG_DOEPTSIZ15		(USBOTG_LINK_BASE + 0xCF0) /* R/W Device OUT Endpoint 15 Transfer Size Register */
+#define S5P_OTG_DOEPDMA15		(USBOTG_LINK_BASE + 0xCF4) /* R/W Device OUT Endpoint 15 DMA Address Register */
+
+/* Power and Clock Gating Register */
+#define S5P_OTG_PCGCCTL 		(USBOTG_LINK_BASE + 0xE00) /* R/W Power and Clock Gating Control Register */
+
+/* Endpoint FIFO address */
+#define S5P_OTG_EP0_FIFO		(USBOTG_LINK_BASE + 0x1000)
+
+/* USB Global Interrupt Status register(GINTSTS) setting value */
+#define GINTSTS_WkUpInt		(1<<31)
+#define GINTSTS_OEPInt		(1<<19)
+#define GINTSTS_IEPInt		(1<<18)
+#define GINTSTS_EnumDone	(1<<13)
+#define GINTSTS_USBRst		(1<<12)
+#define GINTSTS_USBSusp		(1<<11)
+#define GINTSTS_RXFLvl		(1<<4)
+
+/* include common stuff */
+#ifndef __ASSEMBLY__
+static inline S5PC21X_MEMCTL * S5PC21X_GetBase_MEMCTL(void)
+{
+	return (S5PC21X_MEMCTL *)(APB_DMC_0_BASE);
+}
+static inline S5PC21X_USB_HOST * S5PC21X_GetBase_USB_HOST(void)
+{
+	return (S5PC21X_USB_HOST *)ELFIN_USB_HOST_BASE;
+}
+static inline S5PC21X_INTERRUPT * S5PC21X_GetBase_INTERRUPT(void)
+{
+	return (S5PC21X_INTERRUPT *)ELFIN_VIC0_BASE_ADDR;
+}
+static inline S5PC21X_DMAS * S5PC21X_GetBase_DMAS(void)
+{
+	return (S5PC21X_DMAS *)ELFIN_DMA_BASE;
+}
+static inline S5PC21X_CLOCK_POWER * S5PC21X_GetBase_CLOCK_POWER(void)
+{
+	return (S5PC21X_CLOCK_POWER *)ELFIN_CLOCK_POWER_BASE;
+}
+static inline S5PC21X_LCD * S5PC21X_GetBase_LCD(void)
+{
+	return (S5PC21X_LCD *)ELFIN_LCD_BASE;
+}
+static inline S5PC21X_UART * S5PC21X_GetBase_UART(S5PC21X_UARTS_NR nr)
+{
+	return (S5PC21X_UART *)(ELFIN_UART_BASE + (nr*0x10000));
+}
+static inline S5PC21X_TIMERS * S5PC21X_GetBase_TIMERS(void)
+{
+	return (S5PC21X_TIMERS *)ELFIN_TIMER_BASE;
+}
+static inline S5PC21X_WATCHDOG * S5PC21X_GetBase_WATCHDOG(void)
+{
+	return (S5PC21X_WATCHDOG *)ELFIN_WATCHDOG_BASE;
+}
+static inline S5PC21X_I2C * S5PC21X_GetBase_I2C(void)
+{
+	return (S5PC21X_I2C *)ELFIN_I2C_BASE;
+}
+static inline S5PC21X_I2S * S5PC21X_GetBase_I2S(void)
+{
+	return (S5PC21X_I2S *)ELFIN_I2S_BASE;
+}
+static inline S5PC21X_GPIO * S5PC21X_GetBase_GPIO(void)
+{
+	return (S5PC21X_GPIO *)ELFIN_GPIO_BASE;
+}
+static inline S3C2410_ADC * S3C2410_GetBase_ADC(void)
+{
+	return (S3C2410_ADC *)ELFIN_ADC_BASE;
+}
+static inline S5PC21X_SPI * S5PC21X_GetBase_SPI(void)
+{
+	return (S5PC21X_SPI *)ELFIN_SPI_BASE;
+}
+
+#else /* #ifndef __ASSEMBLY__ */
+
+/* LCD controller */
+#define LCDBGCON_OFFSET		0x5c
+
+#endif /* #ifndef __ASSEMBLY__ */
+
+/* PENDING BIT */
+#define BIT_EINT0			(0x1)
+#define BIT_EINT1			(0x1<<1)
+#define BIT_EINT2			(0x1<<2)
+#define BIT_EINT3			(0x1<<3)
+#define BIT_EINT4_7			(0x1<<4)
+#define BIT_EINT8_23			(0x1<<5)
+#define BIT_BAT_FLT			(0x1<<7)
+#define BIT_TICK			(0x1<<8)
+#define BIT_WDT				(0x1<<9)
+#define BIT_TIMER0			(0x1<<10)
+#define BIT_TIMER1			(0x1<<11)
+#define BIT_TIMER2			(0x1<<12)
+#define BIT_TIMER3			(0x1<<13)
+#define BIT_TIMER4			(0x1<<14)
+#define BIT_UART2			(0x1<<15)
+#define BIT_LCD				(0x1<<16)
+#define BIT_DMA0			(0x1<<17)
+#define BIT_DMA1			(0x1<<18)
+#define BIT_DMA2			(0x1<<19)
+#define BIT_DMA3			(0x1<<20)
+#define BIT_SDI				(0x1<<21)
+#define BIT_SPI0			(0x1<<22)
+#define BIT_UART1			(0x1<<23)
+#define BIT_USBH			(0x1<<26)
+#define BIT_IIC				(0x1<<27)
+#define BIT_UART0			(0x1<<28)
+#define BIT_SPI1			(0x1<<29)
+#define BIT_RTC				(0x1<<30)
+#define BIT_ADC				(0x1<<31)
+#define BIT_ALLMSK			(0xFFFFFFFF)
+
+
+#define S5P_CHECK_SLEEP        0x00000BAD
+#define S5P_CHECK_DIDLE        0xBAD00000
+
+#if defined(CONFIG_CLK_800_330_165)//mj to be checked..
+#define APLL_MDIV	0xC8
+#define APLL_PDIV	0x6
+#define APLL_SDIV	0x1
+
+#define MPLL_MDIV       0x6E
+#define MPLL_PDIV	0x4
+#define MPLL_SDIV	0x1
+#elif defined(CONFIG_CLK_1000_400_200)
+#define APLL_MDIV	0x7D
+#define APLL_PDIV	0x3
+#define APLL_SDIV	0x0
+
+#define MPLL_MDIV	0x64
+#define MPLL_PDIV	0x3
+#define MPLL_SDIV	0x0
+#endif
+
+/* APLL_CON1	*/
+#define APLL_CON1_VAL	0x00803800;
+
+/* MPLL_CON1	*/
+#define MPLL_CON1_VAL   0x00803800;
+
+
+#define EPLL_MDIV	0x40
+#define EPLL_PDIV	0x2
+#define EPLL_SDIV	0x3
+//define EPLL_K		0x66010000
+#define EPLL_CON1_VAL	0x66010000
+#define EPLL_CON2_VAL	0x00000080
+
+#define VPLL_MDIV	0x48
+#define VPLL_PDIV	0x2
+#define VPLL_SDIV	0x3
+
+#define VPLL_CON1_VAL	0x66010000
+#define VPLL_CON2_VAL	0x00000080
+
+/* Set PLL	*/
+#define set_pll(mdiv, pdiv, sdiv)	(1<<31 | mdiv<<16 | pdiv<<8 | sdiv)
+
+#define APLL_CON0_VAL	set_pll(APLL_MDIV,APLL_PDIV,APLL_SDIV)
+#define MPLL_CON0_VAL	set_pll(MPLL_MDIV,MPLL_PDIV,MPLL_SDIV)
+#define EPLL_CON0_VAL	set_pll(EPLL_MDIV,EPLL_PDIV,EPLL_SDIV)
+#define VPLL_CON0_VAL	set_pll(VPLL_MDIV,VPLL_PDIV,VPLL_SDIV)
+
+/********************************************************/
+
+
+/* CLK_SRC_CPU	*/
+/* 0 = MOUTAPLL,  1 = SCLKMPLL	*/
+#define MUX_HPM_SEL_MOUTAPLL	0
+#define MUX_HPM_SEL_SCLKMPLL	1
+#define MUX_CORE_SEL_MOUTAPLL	0
+#define MUX_CORE_SEL_SCLKMPLL	1
+
+/* 0 = FILPLL, 1 = MOUT */
+#define MUX_MPLL_SEL_FILPLL	        0
+#define MUX_MPLL_SEL_MOUTMPLLFOUT	1
+
+#define MUX_APLL_SEL_FILPLL	        0
+#define MUX_APLL_SEL_MOUTMPLLFOUT	1
+
+#define CLK_SRC_CPU_VAL_FINPLL	        ((MUX_MPLL_SEL_FILPLL << 24)    \
+										| (MUX_HPM_SEL_MOUTAPLL << 20)   \
+                                        | (MUX_CORE_SEL_MOUTAPLL <<16)  \
+                                        | (MUX_APLL_SEL_FILPLL))
+                                
+                                
+#define CLK_SRC_CPU_VAL_MOUTMPLLFOUT    ((MUX_MPLL_SEL_MOUTMPLLFOUT << 24)      \
+										 |(MUX_HPM_SEL_MOUTAPLL << 20)           \  
+										 |(MUX_CORE_SEL_MOUTAPLL <<16)          \
+                                         |(MUX_APLL_SEL_MOUTMPLLFOUT <<0))
+
+/* CLK_DIV_CPU0	*/
+#define CORE2_RATIO			0x0 //mj
+#define APLL_RATIO			0x1
+#define PCLK_DBG_RATIO		0x1
+#define ATB_RATIO			0x4	//mj
+#define PERIPH_RATIO		0x3
+#define COREM1_RATIO		0x7
+#define COREM0_RATIO		0x3
+#define CORE_RATIO			0x0
+#define CLK_DIV_CPU0_VAL        ((CORE2_RATIO << 28)	\
+								| (APLL_RATIO << 24)     \
+                                | (PCLK_DBG_RATIO << 20)\
+                                | (ATB_RATIO << 16)     \
+                                | (PERIPH_RATIO <<12)   \
+								| (COREM1_RATIO << 8)   \
+                                | (COREM0_RATIO << 4)   \
+                                | (CORE_RATIO))
+
+
+
+/* CLK_DIV_CPU1	*/
+#define HPM_RATIO	        0x0
+#define COPY_RATIO	        0x4
+#define CLK_DIV_CPU1_VAL	((HPM_RATIO << 4) | (COPY_RATIO))
+
+/* CLK_SRC_DMC	*/
+#define MUX_PWI_SEL	        0x0
+#define MUX_CORE_TIMERS_SEL	0x0
+#define MUX_DPHY_SEL		0x0
+#define MUX_DMC_BUS_SEL		0x0
+#define CLK_SRC_DMC_VAL         ((MUX_PWI_SEL << 16)            \
+                                | (MUX_CORE_TIMERS_SEL << 12)   \
+                                | (MUX_DPHY_SEL << 8)           \
+                                | (MUX_DMC_BUS_SEL << 4))
+
+
+
+/* CLK_DIV_DMC0	*/
+#define CORE_TIMERS_RATIO	0x1
+#define COPY2_RATIO		0x3
+#define DMCP_RATIO		0x1
+#define DMCD_RATIO		0x1
+#define DMC_RATIO		0x1
+#define DPHY_RATIO		0x1
+#define ACP_PCLK_RATIO		0x1
+#define ACP_RATIO		0x3
+#define CLK_DIV_DMC0_VAL	((CORE_TIMERS_RATIO << 28) \
+				| (COPY2_RATIO << 24)   \
+				| (DMCP_RATIO << 20)	\
+				| (DMCD_RATIO << 16)	\
+				| (DMC_RATIO << 12)	\
+				| (DPHY_RATIO << 8)	\
+				| (ACP_PCLK_RATIO << 4)	\
+				| (ACP_RATIO))
+
+/* CLK_DIV_DMC1	*/
+#define DPM_RATIO	        0x1
+#define DVSEM_RATIO	        0x1
+#define PWI_RATIO	        0x1
+#define CLK_DIV_DMC1_VAL	((DPM_RATIO << 24) \
+				| (DVSEM_RATIO << 16) \
+				| (PWI_RATIO << 8))
+
+/* CLK_SRC_TOP0	*/
+#define MUX_ONENAND_SEL         0x1     /* 0 = DOUT133, 1 = DOUT166		*/
+#define MUX_ACLK_133_SEL	0x0	/* 0 = SCLKMPLL, 1 = SCLKAPLL	*/
+#define MUX_ACLK_160_SEL	0x0
+#define MUX_ACLK_100_SEL	0x0
+#define MUX_ACLK_200_SEL	0x0
+#define MUX_VPLL_SEL	        0x0
+#define MUX_EPLL_SEL	        0x0
+#define CLK_SRC_TOP0_VAL	((MUX_ONENAND_SEL << 28)	\
+				| (MUX_ACLK_133_SEL << 24)	\
+				| (MUX_ACLK_160_SEL << 20)	\
+				| (MUX_ACLK_100_SEL << 16)	\
+				| (MUX_ACLK_200_SEL << 12)	\
+				| (MUX_VPLL_SEL << 8)	        \
+				| (MUX_EPLL_SEL << 4))
+
+/* CLK_SRC_TOP1	*/
+#define VPLLSRC_SEL	        0x0	/* 0 = FINPLL, 1 = SCLKHDMI27M	*/
+#define CLK_SRC_TOP1_VAL	(VPLLSRC_SEL)
+
+/* CLK_DIV_TOP	*/
+#define ONENAND_RATIO	0x0
+#define ACLK_133_RATIO	0x5
+#define ACLK_160_RATIO	0x4
+#define ACLK_100_RATIO	0x7
+#define ACLK_200_RATIO	0x3
+#define CLK_DIV_TOP_VAL	((ONENAND_RATIO << 16) \
+			| (ACLK_133_RATIO << 12)	\
+			| (ACLK_160_RATIO << 8)	\
+			| (ACLK_100_RATIO << 4)	\
+			| (ACLK_200_RATIO))
+
+/* CLK_SRC_LEFTBUS	*/
+#define MUX_GDL_SEL	        0x0
+#define CLK_SRC_LEFTBUS_VAL	(MUX_GDL_SEL)
+
+/* CLK_DIV_LEFRBUS	*/
+#define GPL_RATIO	        0x1
+#define GDL_RATIO	        0x3
+#define CLK_DIV_LEFRBUS_VAL	((GPL_RATIO << 4) \
+				| (GDL_RATIO))
+
+/* CLK_SRC_RIGHTBUS	*/
+#define MUX_GDR_SEL	        0x0
+#define CLK_SRC_RIGHTBUS_VAL	(MUX_GDR_SEL)
+
+/* CLK_DIV_RIGHTBUS	*/
+#define GPR_RATIO	        0x1
+#define GDR_RATIO	        0x3
+#define CLK_DIV_RIGHTBUS_VAL	((GPR_RATIO << 4) \
+				| (GDR_RATIO))
+
+
+/* APLL_LOCK		*/
+#define APLL_LOCK_VAL	0x000002F1
+/* MPLL_LOCK	*/
+#define MPLL_LOCK_VAL	0x000002F1
+/* EPLL_LOCK		*/
+#define EPLL_LOCK_VAL	0x00002321
+/* VPLL_LOCK		*/
+#define VPLL_LOCK_VAL	0x00002321
+
+
+/* CLK_SRC_PERIL0	*/
+#define PWM_SEL		0	
+#define UART5_SEL	6
+#define UART4_SEL	6
+#define UART3_SEL	6
+#define UART2_SEL	6
+#define UART1_SEL	6
+#define UART0_SEL	6
+#define CLK_SRC_PERIL0_VAL	((PWM_SEL << 24)\
+				| (UART5_SEL << 20)  \
+				| (UART4_SEL << 16) \
+				| (UART3_SEL << 12) \
+				| (UART2_SEL<< 8)	\
+				| (UART1_SEL << 4)	\
+				| (UART0_SEL))
+
+/* CLK_DIV_PERIL0	*/
+#define UART5_RATIO	7
+#define UART4_RATIO	7
+#define UART3_RATIO	7
+#define UART2_RATIO	7
+#define UART1_RATIO	7
+#define UART0_RATIO	7
+#define CLK_DIV_PERIL0_VAL	((UART5_RATIO << 20) \
+				| (UART4_RATIO << 16) \
+				| (UART3_RATIO << 12)	\
+				| (UART2_RATIO << 8)	\
+				| (UART1_RATIO << 4)	\
+				| (UART0_RATIO))
+
+
+/* UART */
+#define MPLL_DEC (MPLL_MDIV * MPLL_MDIV / (MPLL_PDIV * 2^(MPLL_SDIV-1)))
+#define SCLK_UART               MPLL_DEC/ (UART1_RATIO+1)
+
+#define UART_UBRDIV_VAL	                0x35     /* (SCLK_UART/(115200*16) -1) */
+#define UART_UDIVSLOT_VAL               0x3	/*((((SCLK_UART*10/(115200*16) -10))%10)*16/10)*/
+
+#endif
diff -urN u-boot-2015.04/arch/arm/lib/Makefile uboot_2015.04/arch/arm/lib/Makefile
--- u-boot-2015.04/arch/arm/lib/Makefile	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/arch/arm/lib/Makefile	2017-11-29 16:39:36.000000000 -0800
@@ -11,7 +11,7 @@
 ifdef CONFIG_ARM64
 obj-y	+= crt0_64.o
 else
-obj-y	+= vectors.o crt0.o
+obj-y	+= vectors.o crt0.o uartest.o
 endif
 
 ifndef CONFIG_SPL_BUILD
diff -urN u-boot-2015.04/arch/arm/lib/uartest.S uboot_2015.04/arch/arm/lib/uartest.S
--- u-boot-2015.04/arch/arm/lib/uartest.S	1969-12-31 16:00:00.000000000 -0800
+++ uboot_2015.04/arch/arm/lib/uartest.S	2017-11-29 16:39:36.000000000 -0800
@@ -0,0 +1,348 @@
+#ifndef __UART_TEST_
+#define __UART_TEST_
+
+#include "itop-4412_setup.h"
+#define ELFIN_CLOCK_BASE		0x10030000
+
+#define CLK_SRC_LEFTBUS_OFFSET		0x04200
+#define CLK_MUX_STAT_LEFTBUS_OFFSET	0x04400
+#define CLK_DIV_LEFTBUS_OFFSET		0x04500
+
+#define CLK_SRC_RIGHTBUS_OFFSET		0x08200
+#define CLK_MUX_STAT_RIGHTBUS_OFFSET	0x08400
+#define CLK_DIV_RIGHTBUS_OFFSET		0x08500
+
+#define CLK_SRC_CPU_OFFSET		0x14200
+#define CLK_MUX_STAT_CPU_OFFSET		0x14400
+#define CLK_DIV_CPU0_OFFSET		0x14500
+#define CLK_DIV_CPU1_OFFSET		0x14504
+
+#define CLK_SRC_TOP0_OFFSET		0x0C210
+#define CLK_SRC_TOP1_OFFSET		0x0C214
+#define CLK_SRC_FSYS_OFFSET		0x0C240
+#define CLK_SRC_PERIL0_OFFSET		0x0C250
+#define CLK_MUX_STAT_TOP_OFFSET		0x0C410
+#define CLK_MUX_STAT_TOP1_OFFSET	0x0C414
+#define CLK_DIV_TOP_OFFSET		0x0C510
+#define CLK_DIV_FSYS1_OFFSET		0x0C544
+#define CLK_DIV_FSYS2_OFFSET		0x0C548
+#define CLK_DIV_FSYS3_OFFSET		0x0C54C
+#define CLK_DIV_PERIL0_OFFSET		0x0C550
+
+#define CLK_SRC_DMC_OFFSET		0x10200
+#define CLK_MUX_STAT_DMC_OFFSET		0x10400
+#define CLK_DIV_DMC0_OFFSET		0x10500
+#define CLK_DIV_DMC1_OFFSET		0x10504
+
+#define CLK_GATE_IP_DMC_OFFSET		0x10900
+
+wait_mux_state:
+	ldr r1, [r0, r2]
+	cmp r1, r3
+	bne wait_mux_state
+	mov pc, lr
+
+wait_pll_lock:
+	ldr r1, [r0, r2]
+	tst r1, #(1<<29)
+	beq wait_pll_lock
+	mov pc, lr
+
+.globl testuart
+testuart:
+	ldr	sp, =0x02060000
+
+	push	{lr}
+	
+	ldr	r0, =POWER_BASE
+	ldr	r1, [r0,#OMR_OFFSET]
+	bic	r2, r1, #0xffffffc1
+	
+	cmp     r2, #0xA
+    moveq   r3, #BOOT_ONENAND
+
+	/* SD/MMC BOOT */
+	cmp     r2, #0x4
+    moveq   r3, #BOOT_MMCSD	
+
+	/* eMMC4.3 BOOT */
+	cmp		r2, #0x6
+	moveq	r3, #BOOT_EMMC43
+
+	/* eMMC441 BOOT */
+	cmp		r2, #0x28
+	moveq	r3, #BOOT_EMMC441
+
+	ldr	r0, =INF_REG_BASE
+	str	r3, [r0, #INF_REG3_OFFSET]
+
+	/* check reset status  */
+	ldr     r0, =(INF_REG_BASE + INF_REG1_OFFSET)
+    ldr     r1, [r0]
+
+	/* AFTR wakeup reset */
+	ldr	r2, =S5P_CHECK_DIDLE
+	cmp	r1, r2
+	beq	exit_wakeup
+	
+	/* Sleep wakeup reset */
+	ldr	r2, =S5P_CHECK_SLEEP
+	cmp	r1, r2
+	beq	wakeup_reset
+
+	/* PS-Hold high */
+	ldr r0, =0x1002330c
+	ldr r1, [r0]
+	orr r1, r1, #0x300
+	str r1, [r0]
+
+	ldr r0, =0x11000c08
+	ldr r1, =0x0
+	str r1, [r0]
+
+	/* Clear  MASK_WDT_RESET_REQUEST  */
+	ldr r0, =0x1002040c
+	ldr r1, =0x00
+	str r1, [r0]
+
+	bl system_clock_init_scp
+
+	bl uart_asm_init
+
+	mov pc, lr
+
+	.globl system_clock_init_scp 
+system_clock_init_scp:
+	push	{lr}
+	
+	ldr	r0, =ELFIN_CLOCK_BASE	@0x1003_0000
+
+@ CMU_CPU MUX / DIV
+	ldr	r1, =0x0
+	ldr	r2, =CLK_SRC_CPU_OFFSET
+	str	r1, [r0, r2]
+
+	ldr r2, =CLK_MUX_STAT_CPU_OFFSET
+	ldr r3, =0x01110001
+	bl wait_mux_state
+
+	ldr	r1, =CLK_DIV_DMC0_VAL
+	ldr	r2, =CLK_DIV_DMC0_OFFSET
+	str	r1, [r0, r2]
+	ldr	r1, =CLK_DIV_DMC1_VAL
+	ldr	r2, =CLK_DIV_DMC1_OFFSET
+	str	r1, [r0, r2]
+
+@ CMU_TOP MUX / DIV
+	ldr	r1, =0x0
+	ldr	r2, =CLK_SRC_TOP0_OFFSET
+	str	r1, [r0, r2]
+
+	ldr r2, =CLK_MUX_STAT_TOP_OFFSET
+	ldr r3, =0x11111111
+	bl wait_mux_state
+
+	ldr	r1, =0x0
+	ldr	r2, =CLK_SRC_TOP1_OFFSET
+	str	r1, [r0, r2]
+
+	ldr r2, =CLK_MUX_STAT_TOP1_OFFSET
+	ldr r3, =0x01111110
+	bl wait_mux_state
+
+	ldr	r1, =CLK_DIV_TOP_VAL
+	ldr	r2, =CLK_DIV_TOP_OFFSET
+	str	r1, [r0, r2]
+
+@ CMU_LEFTBUS MUX / DIV
+	ldr	r1, =0x10
+	ldr	r2, =CLK_SRC_LEFTBUS_OFFSET
+	str	r1, [r0, r2]
+
+	ldr r2, =CLK_MUX_STAT_LEFTBUS_OFFSET
+	ldr r3, =0x00000021
+	bl wait_mux_state
+
+	ldr	r1, =CLK_DIV_LEFRBUS_VAL
+	ldr	r2, =CLK_DIV_LEFTBUS_OFFSET
+	str	r1, [r0, r2]
+
+@ CMU_RIGHTBUS MUX / DIV
+	ldr	r1, =0x10
+	ldr	r2, =CLK_SRC_RIGHTBUS_OFFSET
+	str	r1, [r0, r2]
+
+	ldr r2, =CLK_MUX_STAT_RIGHTBUS_OFFSET
+	ldr r3, =0x00000021
+	bl wait_mux_state
+
+	ldr	r1, =CLK_DIV_RIGHTBUS_VAL
+	ldr	r2, =CLK_DIV_RIGHTBUS_OFFSET
+	str	r1, [r0, r2]
+
+@ Set PLL locktime
+	ldr	r1, =APLL_LOCK_VAL
+	ldr	r2, =APLL_LOCK_OFFSET
+	str	r1, [r0, r2]
+
+	ldr	r1, =MPLL_LOCK_VAL
+	ldr	r2, =MPLL_LOCK_OFFSET
+	str	r1, [r0, r2]
+
+	ldr	r1, =EPLL_LOCK_VAL
+	ldr	r2, =EPLL_LOCK_OFFSET
+	str	r1, [r0, r2]
+
+	ldr	r1, =VPLL_LOCK_VAL
+	ldr	r2, =VPLL_LOCK_OFFSET
+	str	r1, [r0, r2]
+
+	ldr	r1, =CLK_DIV_CPU0_VAL
+	ldr	r2, =CLK_DIV_CPU0_OFFSET
+	str	r1, [r0, r2]
+	ldr	r1, =CLK_DIV_CPU1_VAL
+	ldr	r2, =CLK_DIV_CPU1_OFFSET
+	str	r1, [r0, r2]
+
+@ Set APLL
+	ldr	r1, =APLL_CON1_VAL
+	ldr	r2, =APLL_CON1_OFFSET
+	str	r1, [r0, r2]
+	ldr	r1, =APLL_CON0_VAL
+	ldr	r2, =APLL_CON0_OFFSET
+	str	r1, [r0, r2]
+
+	/* check MPLL and if MPLL is not 400 Mhz skip MPLL resetting for C2C operation */
+	ldr	r2, =MPLL_CON0_OFFSET
+	ldr r1, [r0, r2]
+	ldr r3, =0xA0640301
+	cmp r1, r3
+	bne skip_mpll
+
+@ Set MPLL
+	ldr	r1, =MPLL_CON1_VAL
+	ldr	r2, =MPLL_CON1_OFFSET
+	str	r1, [r0, r2]
+	ldr	r1, =MPLL_CON0_VAL
+	ldr	r2, =MPLL_CON0_OFFSET
+	str	r1, [r0, r2]
+skip_mpll:
+
+@ Set EPLL
+	ldr     r1, =EPLL_CON2_VAL
+	ldr     r2, =EPLL_CON2_OFFSET
+	str     r1, [r0, r2]
+	ldr     r1, =EPLL_CON1_VAL
+	ldr     r2, =EPLL_CON1_OFFSET
+	str     r1, [r0, r2]
+	ldr     r1, =EPLL_CON0_VAL
+	ldr     r2, =EPLL_CON0_OFFSET
+	str     r1, [r0, r2]
+
+@ Set VPLL
+	ldr     r1, =VPLL_CON2_VAL
+	ldr     r2, =VPLL_CON2_OFFSET
+	str     r1, [r0, r2]
+	ldr     r1, =VPLL_CON1_VAL
+	ldr     r2, =VPLL_CON1_OFFSET
+	str     r1, [r0, r2]
+	ldr     r1, =VPLL_CON0_VAL
+	ldr     r2, =VPLL_CON0_OFFSET
+	str     r1, [r0, r2]
+
+	ldr r2, =APLL_CON0_OFFSET
+	bl wait_pll_lock
+	ldr r2, =MPLL_CON0_OFFSET
+	bl wait_pll_lock
+	ldr r2, =EPLL_CON0_OFFSET
+	bl wait_pll_lock
+	ldr r2, =VPLL_CON0_OFFSET
+	bl wait_pll_lock
+
+	ldr	r1, =0x01000001
+	ldr	r2, =CLK_SRC_CPU_OFFSET
+	str	r1, [r0, r2]
+
+	ldr r2, =CLK_MUX_STAT_CPU_OFFSET
+	ldr r3, =0x02110002
+	bl wait_mux_state
+
+	ldr	r1, =0x00011000
+	ldr	r2, =CLK_SRC_DMC_OFFSET
+	str	r1, [r0, r2]
+
+	ldr r2, =CLK_MUX_STAT_DMC_OFFSET
+	ldr r3, =0x11102111
+	bl wait_mux_state
+
+	ldr	r1, =0x00000110
+	ldr	r2, =CLK_SRC_TOP0_OFFSET
+	str	r1, [r0, r2]
+
+	ldr r2, =CLK_MUX_STAT_TOP_OFFSET
+	ldr r3, =0x11111221
+	bl wait_mux_state
+
+	/* skip MUX_ACLK_200_SUB_SEL, MUX_ACLK_400_MCUISP_SUB_SEL setting for CMU_SYSCLK_ISP function */
+	ldr	r1, =0x00011000
+	ldr	r2, =CLK_SRC_TOP1_OFFSET
+	str	r1, [r0, r2]
+
+	ldr r2, =CLK_MUX_STAT_TOP1_OFFSET
+	ldr r3, =0x01122110
+	bl wait_mux_state
+
+	pop {pc}
+
+
+.globl uart_asm_init
+uart_asm_init:
+
+	/* set GPIO to enable UART */
+	@ GPIO setting for UART for UART0/1
+	ldr	r0, =0x11400000
+	ldr	r1, =0x22222222
+	str   	r1, [r0]
+	ldr	r0, =0x11400020
+	ldr	r1, =0x222222
+	str	r1, [r0]
+
+	ldr	r0, =CMU_BASE	@0x1003_0000
+	ldr	r1, =CLK_SRC_PERIL0_VAL		@0x666666
+	ldr	r2, =CLK_SRC_PERIL0_OFFSET
+	str	r1, [r0, r2]
+	ldr	r1, =CLK_DIV_PERIL0_VAL		@0x777777
+	ldr	r2, =CLK_DIV_PERIL0_OFFSET
+	str	r1, [r0, r2]
+
+	ldr	r0, =ELFIN_UART_CONSOLE_BASE		@0xEC000000
+	ldr	r1, =0x111
+	str	r1, [r0, #UFCON_OFFSET]
+
+	mov	r1, #0x3
+	str	r1, [r0, #ULCON_OFFSET]
+
+	ldr	r1, =0x3c5
+	str	r1, [r0, #UCON_OFFSET]
+
+	ldr	r1, =UART_UBRDIV_VAL	@0x2B /*  UDIV(43) = ((82,500,000 / 16 / 115200) - 1) */
+	str	r1, [r0, #UBRDIV_OFFSET]
+
+	ldr	r1, =UART_UDIVSLOT_VAL	@0xC /* UFRACVAL(12) = ((((82,500,000 / 16 / 115200) - 1) - 43) * 16) */
+	str	r1, [r0, #UDIVSLOT_OFFSET]
+
+	ldr	r1, =0x4f4f4f4f
+	str	r1, [r0, #UTXH_OFFSET]		@'O'
+
+	mov	pc, lr
+
+wakeup_reset:
+exit_wakeup:
+	/*Load return address and jump to kernel*/
+	ldr	r0, =(INF_REG_BASE+INF_REG0_OFFSET)
+	ldr	r1, [r0]	/* r1 = physical address of s5pc110_cpu_resume function*/
+
+	mov	pc, r1		/*Jump to kernel */
+	nop
+	nop
+#endif
Binary files u-boot-2015.04/bl2.bin and uboot_2015.04/bl2.bin differ
diff -urN u-boot-2015.04/board/samsung/common/board.c uboot_2015.04/board/samsung/common/board.c
--- u-boot-2015.04/board/samsung/common/board.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/board/samsung/common/board.c	2017-11-29 16:39:39.000000000 -0800
@@ -25,6 +25,7 @@
 #include <asm/arch/sromc.h>
 #include <lcd.h>
 #include <samsung/misc.h>
+//#define _DEBUG	1
 
 DECLARE_GLOBAL_DATA_PTR;
 
@@ -142,7 +143,8 @@
 #endif
 	err = board_uart_init();
 	if (err) {
-		debug("UART init failed\n");
+		printascii("error while init uart.\n");
+		//debug("UART init failed\n");
 		return err;
 	}
 
@@ -280,6 +282,8 @@
 
 	if (get_boot_mode() == BOOT_MODE_SD) {
 		ret = init_mmc();
+		if (ret)
+			printf("init_mmc failed\n");
 		ret |= init_dwmmc();
 	} else {
 		ret = init_dwmmc();
@@ -289,6 +293,7 @@
 	if (ret)
 		debug("mmc init failed\n");
 
+	debug("mmc init successfully\n");
 	return ret;
 }
 #endif
diff -urN u-boot-2015.04/board/samsung/itop-4412/itop-4412.c uboot_2015.04/board/samsung/itop-4412/itop-4412.c
--- u-boot-2015.04/board/samsung/itop-4412/itop-4412.c	1969-12-31 16:00:00.000000000 -0800
+++ uboot_2015.04/board/samsung/itop-4412/itop-4412.c	2017-11-29 16:39:39.000000000 -0800
@@ -0,0 +1,45 @@
+/*
+ * Copyright (C) 2011 Samsung Electronics
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <common.h>
+#include <asm/io.h>
+#include <asm/gpio.h>
+#include <asm/arch/cpu.h>
+#include <asm/arch/mmc.h>
+#include <asm/arch/periph.h>
+#include <asm/arch/pinmux.h>
+#include <usb.h>
+
+void delay(int r0)
+{
+    volatile int count = r0;
+    while (count--)
+        ;
+}
+
+DECLARE_GLOBAL_DATA_PTR;
+
+u32 get_board_rev(void)
+{
+	return 0;
+}
+
+int exynos_init(void)
+{	
+	return 0;
+}
+
+int board_usb_init(int index, enum usb_init_type init)
+{
+	return 0;
+}
+
+#ifdef CONFIG_BOARD_EARLY_INIT_F
+int exynos_early_init_f(void)
+{
+	return 0;
+}
+#endif
diff -urN u-boot-2015.04/board/samsung/itop-4412/Kconfig uboot_2015.04/board/samsung/itop-4412/Kconfig
--- u-boot-2015.04/board/samsung/itop-4412/Kconfig	1969-12-31 16:00:00.000000000 -0800
+++ uboot_2015.04/board/samsung/itop-4412/Kconfig	2017-11-29 16:50:15.000000000 -0800
@@ -0,0 +1,12 @@
+if TARGET_ITOP-4412
+
+config SYS_BOARD
+	default "itop-4412"
+
+config SYS_VENDOR
+	default "samsung"
+
+config SYS_CONFIG_NAME
+	default "itop-4412"
+
+endif
diff -urN u-boot-2015.04/board/samsung/itop-4412/MAINTAINERS uboot_2015.04/board/samsung/itop-4412/MAINTAINERS
--- u-boot-2015.04/board/samsung/itop-4412/MAINTAINERS	1969-12-31 16:00:00.000000000 -0800
+++ uboot_2015.04/board/samsung/itop-4412/MAINTAINERS	2017-11-29 16:39:39.000000000 -0800
@@ -0,0 +1,6 @@
+ORIGEN BOARD
+M:	Chander Kashyap <k.chander@samsung.com>
+S:	Maintained
+F:	board/samsung/origen/
+F:	include/configs/origen.h
+F:	configs/origen_defconfig
diff -urN u-boot-2015.04/board/samsung/itop-4412/Makefile uboot_2015.04/board/samsung/itop-4412/Makefile
--- u-boot-2015.04/board/samsung/itop-4412/Makefile	1969-12-31 16:00:00.000000000 -0800
+++ uboot_2015.04/board/samsung/itop-4412/Makefile	2017-11-29 16:39:39.000000000 -0800
@@ -0,0 +1,22 @@
+#
+# Copyright (C) 2011 Samsung Electronics
+#
+# SPDX-License-Identifier:	GPL-2.0+
+#
+
+ifdef CONFIG_SPL_BUILD
+# necessary to create built-in.o
+obj- := __dummy__.o
+
+hostprogs-y := tools/mkitop-4412spl
+always := $(hostprogs-y)
+
+# omit -O2 option to suppress
+#   warning: dereferencing type-punned pointer will break strict-aliasing rules
+#
+# TODO:
+# Fix the root cause in tools/mkorigenspl.c and delete the following work-around
+$(obj)/tools/mkorigenspl: HOSTCFLAGS:=$(filter-out -O2,$(HOSTCFLAGS))
+else
+obj-y	+= itop-4412.o
+endif
diff -urN u-boot-2015.04/board/samsung/itop-4412/tools/mkitop-4412spl.c uboot_2015.04/board/samsung/itop-4412/tools/mkitop-4412spl.c
--- u-boot-2015.04/board/samsung/itop-4412/tools/mkitop-4412spl.c	1969-12-31 16:00:00.000000000 -0800
+++ uboot_2015.04/board/samsung/itop-4412/tools/mkitop-4412spl.c	2017-11-29 16:39:39.000000000 -0800
@@ -0,0 +1,116 @@
+/*
+ * Copyright (C) 2011 Samsung Electronics
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <errno.h>
+#include <string.h>
+#include <sys/stat.h>
+
+#define BUFSIZE			(16*1024)
+#define IMG_SIZE		(14*1024) //(16*1024)
+#define SPL_HEADER_SIZE		0 //16
+#define FILE_PERM		(S_IRUSR | S_IWUSR | S_IRGRP \
+				| S_IWGRP | S_IROTH | S_IWOTH)
+#define SPL_HEADER		"S5PC210 HEADER  "
+/*
+* Requirement:
+* IROM code reads first 14K bytes from boot device.
+* It then calculates the checksum of 14K-4 bytes and compare with data at
+* 14K-4 offset.
+*
+* This function takes two filenames:
+* IN  "u-boot-spl.bin" and
+* OUT "$(BOARD)-spl.bin as filenames.
+* It reads the "u-boot-spl.bin" in 16K buffer.
+* It calculates checksum of 14K-4 Bytes and stores at 14K-4 offset in buffer.
+* It writes the buffer to "$(BOARD)-spl.bin" file.
+*/
+
+int main(int argc, char **argv)
+{
+	int i, len;
+	unsigned char buffer[BUFSIZE] = {0};
+	int ifd, ofd;
+	unsigned int checksum = 0, count;
+
+	if (argc != 3) {
+		printf(" %d Wrong number of arguments\n", argc);
+		exit(EXIT_FAILURE);
+	}
+
+	ifd = open(argv[1], O_RDONLY);
+	if (ifd < 0) {
+		fprintf(stderr, "%s: Can't open %s: %s\n",
+			argv[0], argv[1], strerror(errno));
+		exit(EXIT_FAILURE);
+	}
+
+	ofd = open(argv[2], O_WRONLY | O_CREAT | O_TRUNC, FILE_PERM);
+	if (ifd < 0) {
+		fprintf(stderr, "%s: Can't open %s: %s\n",
+			argv[0], argv[2], strerror(errno));
+		if (ifd)
+			close(ifd);
+		exit(EXIT_FAILURE);
+	}
+
+	len = lseek(ifd, 0, SEEK_END);
+	lseek(ifd, 0, SEEK_SET);
+
+	memcpy(&buffer[0], SPL_HEADER, SPL_HEADER_SIZE);
+
+	count = (len < (IMG_SIZE - SPL_HEADER_SIZE))
+		? len : (IMG_SIZE - SPL_HEADER_SIZE);
+
+	if (read(ifd, buffer + SPL_HEADER_SIZE, count) != count) {
+		fprintf(stderr, "%s: Can't read %s: %s\n",
+			argv[0], argv[1], strerror(errno));
+
+		if (ifd)
+			close(ifd);
+		if (ofd)
+			close(ofd);
+
+		exit(EXIT_FAILURE);
+	}
+
+	for (i = 0; i < IMG_SIZE - 4; i++)
+#if 0
+		checksum += buffer[i+16];
+
+	*(ulong *)buffer ^= 0x1f;
+	*(ulong *)(buffer+4) ^= checksum;
+
+	for (i = 1; i < SPL_HEADER_SIZE; i++)
+		buffer[i] ^= buffer[i-1];
+#endif
+
+		checksum += (unsigned char)buffer[i];
+
+	*(unsigned int *)&buffer[i] = checksum;
+
+	if (write(ofd, buffer, BUFSIZE) != BUFSIZE) {
+		fprintf(stderr, "%s: Can't write %s: %s\n",
+			argv[0], argv[2], strerror(errno));
+
+		if (ifd)
+			close(ifd);
+		if (ofd)
+			close(ofd);
+
+		exit(EXIT_FAILURE);
+	}
+
+	if (ifd)
+		close(ifd);
+	if (ofd)
+		close(ofd);
+
+	return EXIT_SUCCESS;
+}
diff -urN u-boot-2015.04/board/samsung/origen/origen.c uboot_2015.04/board/samsung/origen/origen.c
--- u-boot-2015.04/board/samsung/origen/origen.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/board/samsung/origen/origen.c	2017-11-29 16:39:39.000000000 -0800
@@ -13,6 +13,19 @@
 #include <asm/arch/pinmux.h>
 #include <usb.h>
 
+#define GPL2CON     (*(volatile unsigned long *) 0x11000100)
+#define GPL2DAT     (*(volatile unsigned long *) 0x11000104)
+
+#define GPK1CON 	(*(volatile unsigned long *) 0x11000060)
+#define GPK1DAT		(*(volatile unsigned long *) 0x11000064)
+
+void delay(int r0)
+{
+    volatile int count = r0;
+    while (count--)
+        ;
+}
+
 DECLARE_GLOBAL_DATA_PTR;
 
 u32 get_board_rev(void)
@@ -21,7 +34,19 @@
 }
 
 int exynos_init(void)
-{
+{	
+	GPL2CON = 0x00000001;
+	GPK1CON = 0x00000010;
+	
+	while(1)							
+	{
+		GPL2DAT = 1;
+		GPK1DAT = 0;
+		delay(0x80000);
+		GPL2DAT = 0;
+		GPK1DAT = 0x2;
+		delay(0x80000);
+	}
 	return 0;
 }
 
diff -urN u-boot-2015.04/build.sh uboot_2015.04/build.sh
--- u-boot-2015.04/build.sh	1969-12-31 16:00:00.000000000 -0800
+++ uboot_2015.04/build.sh	2017-11-29 16:39:33.000000000 -0800
@@ -0,0 +1,39 @@
+#!/bin/sh
+
+sec_path="./CodeSign4SecureBoot"
+ROOT_DIR=$(pwd)
+
+rm -rf u-boot.bin
+
+make itop-4412_defconfig
+
+make -j$CPU_JOB_NUM
+
+if [ ! -f u-boot.bin ]
+then
+	echo "!!!not found u-boot.bin"
+fi
+
+cp spl/itop-4412-spl.bin bl2.bin
+
+####################################################
+#cat spl/u-boot-spl.bin pad00.bin > u-boot-iTOP-4412.bin
+
+#./mkbl2 u-boot-iTOP-4412.bin bl2.bin 14336
+####################################################
+
+cp -rf bl2.bin $sec_path
+cp -rf u-boot.bin $sec_path
+cd $sec_path
+
+echo "fusing u-boot-iTOP-4412.bin......"
+
+################ for sd MMC boot ##################
+cat E4412_N.bl1.SCP2G.bin bl2.bin env.bin u-boot.bin > u-boot-iTOP-4412.bin
+################# for eMMC boot ####################
+#cat E4412_N.bl1.SCP2G.bin bl2.bin u-boot.bin > u-boot-iTOP-4412.bin
+####################################################
+mv u-boot-iTOP-4412.bin $ROOT_DIR
+cd $ROOT_DIR
+
+echo "done!!!"
diff -urN u-boot-2015.04/.checkpatch.conf uboot_2015.04/.checkpatch.conf
--- u-boot-2015.04/.checkpatch.conf	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/.checkpatch.conf	1969-12-31 16:00:00.000000000 -0800
@@ -1,23 +0,0 @@
-# Not Linux, so don't expect a Linux tree.
---no-tree
-
-# Temporary for false positive in checkpatch
---ignore COMPLEX_MACRO
-
-# For CONFIG_SYS_I2C_NOPROBES
---ignore MULTISTATEMENT_MACRO_USE_DO_WHILE
-
-# For simple_strtoul
---ignore CONSIDER_KSTRTO
-
-# For min/max
---ignore MINMAX
-
-# enable more tests
---strict
-
-# Not Linux, so we don't recommend usleep_range() over udelay()
---ignore USLEEP_RANGE
-
-# Ignore networking block comment style
---ignore NETWORKING_BLOCK_COMMENT_STYLE
Binary files u-boot-2015.04/CodeSign4SecureBoot/all00_padding.bin and uboot_2015.04/CodeSign4SecureBoot/all00_padding.bin differ
Binary files u-boot-2015.04/CodeSign4SecureBoot/bl2.bin and uboot_2015.04/CodeSign4SecureBoot/bl2.bin differ
Binary files u-boot-2015.04/CodeSign4SecureBoot/BL2.bin.signed.4412 and uboot_2015.04/CodeSign4SecureBoot/BL2.bin.signed.4412 differ
Binary files u-boot-2015.04/CodeSign4SecureBoot/codesigner_v21 and uboot_2015.04/CodeSign4SecureBoot/codesigner_v21 differ
Binary files u-boot-2015.04/CodeSign4SecureBoot/E4212.BL1.TZ.SSCR.EVT1.1.bin and uboot_2015.04/CodeSign4SecureBoot/E4212.BL1.TZ.SSCR.EVT1.1.bin differ
Binary files u-boot-2015.04/CodeSign4SecureBoot/E4212.BL2.TZ.SSCR.EVT1.1.bin and uboot_2015.04/CodeSign4SecureBoot/E4212.BL2.TZ.SSCR.EVT1.1.bin differ
Binary files u-boot-2015.04/CodeSign4SecureBoot/E4212.S.BL1.SSCR.EVT1.1.bin and uboot_2015.04/CodeSign4SecureBoot/E4212.S.BL1.SSCR.EVT1.1.bin differ
Binary files u-boot-2015.04/CodeSign4SecureBoot/E4212.TZ.SSCR.EVT1.1.bin and uboot_2015.04/CodeSign4SecureBoot/E4212.TZ.SSCR.EVT1.1.bin differ
Binary files u-boot-2015.04/CodeSign4SecureBoot/E4412.BL2.TZ.SSCR.EVT1.1.bin and uboot_2015.04/CodeSign4SecureBoot/E4412.BL2.TZ.SSCR.EVT1.1.bin differ
Binary files u-boot-2015.04/CodeSign4SecureBoot/E4412_N.bl1.SCP2G.bin and uboot_2015.04/CodeSign4SecureBoot/E4412_N.bl1.SCP2G.bin differ
Binary files u-boot-2015.04/CodeSign4SecureBoot/E4412.S.BL1.SSCR.EVT1.1.bin and uboot_2015.04/CodeSign4SecureBoot/E4412.S.BL1.SSCR.EVT1.1.bin differ
Binary files u-boot-2015.04/CodeSign4SecureBoot/E4412.TZ.SSCR.EVT1.1.bin and uboot_2015.04/CodeSign4SecureBoot/E4412.TZ.SSCR.EVT1.1.bin differ
Binary files u-boot-2015.04/CodeSign4SecureBoot/env.bin and uboot_2015.04/CodeSign4SecureBoot/env.bin differ
Binary files u-boot-2015.04/CodeSign4SecureBoot/Exynos4212_V21.prv and uboot_2015.04/CodeSign4SecureBoot/Exynos4212_V21.prv differ
Binary files u-boot-2015.04/CodeSign4SecureBoot/Exynos4212_V21.spk and uboot_2015.04/CodeSign4SecureBoot/Exynos4212_V21.spk differ
Binary files u-boot-2015.04/CodeSign4SecureBoot/Exynos4412_V21.prv and uboot_2015.04/CodeSign4SecureBoot/Exynos4412_V21.prv differ
Binary files u-boot-2015.04/CodeSign4SecureBoot/Exynos4412_V21.spk and uboot_2015.04/CodeSign4SecureBoot/Exynos4412_V21.spk differ
Binary files u-boot-2015.04/CodeSign4SecureBoot/paddingaa and uboot_2015.04/CodeSign4SecureBoot/paddingaa differ
Binary files u-boot-2015.04/CodeSign4SecureBoot/tzsw_SMDK4412_SCP_2GB.bin.save and uboot_2015.04/CodeSign4SecureBoot/tzsw_SMDK4412_SCP_2GB.bin.save differ
Binary files u-boot-2015.04/CodeSign4SecureBoot/u-boot.bin and uboot_2015.04/CodeSign4SecureBoot/u-boot.bin differ
diff -urN u-boot-2015.04/common/autoboot.c uboot_2015.04/common/autoboot.c
--- u-boot-2015.04/common/autoboot.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/common/autoboot.c	2017-11-29 16:39:27.000000000 -0800
@@ -12,6 +12,7 @@
 #include <fdtdec.h>
 #include <menu.h>
 #include <post.h>
+#define _DEBUG	1
 
 DECLARE_GLOBAL_DATA_PTR;
 
diff -urN u-boot-2015.04/common/board_f.c uboot_2015.04/common/board_f.c
--- u-boot-2015.04/common/board_f.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/common/board_f.c	2017-11-29 16:39:27.000000000 -0800
@@ -57,6 +57,8 @@
 #include <dm/root.h>
 #include <linux/compiler.h>
 
+//#define _DEBUG	1
+
 /*
  * Pointer to initial global data area
  *
@@ -469,6 +471,7 @@
 #ifdef CONFIG_LCD
 static int reserve_lcd(void)
 {
+	printf("%s:%d.\n", __func__, __LINE__);
 #ifdef CONFIG_FB_ADDR
 	gd->fb_base = CONFIG_FB_ADDR;
 #else
@@ -802,8 +805,9 @@
 	int ret;
 
 	ret = dm_init_and_scan(true);
-	if (ret)
+	if (ret) {
 		return ret;
+	}
 #endif
 
 	return 0;
@@ -838,6 +842,7 @@
 #if defined(CONFIG_BOARD_EARLY_INIT_F)
 	board_early_init_f,
 #endif
+
 	/* TODO: can any of this go into arch_cpu_init()? */
 #if defined(CONFIG_PPC) && !defined(CONFIG_8xx_CPUCLK_DEFAULT)
 	get_clocks,		/* get CPU and bus clocks (etc.) */
@@ -848,6 +853,7 @@
 	/* TODO: can we rename this to timer_init()? */
 	init_timebase,
 #endif
+
 #if defined(CONFIG_ARM) || defined(CONFIG_MIPS) || defined(CONFIG_BLACKFIN)
 	timer_init,		/* initialize timer */
 #endif
@@ -1008,7 +1014,7 @@
 	NULL,
 };
 
-void board_init_f(ulong boot_flags)
+__weak void board_init_f(ulong boot_flags)
 {
 #ifdef CONFIG_SYS_GENERIC_GLOBAL_DATA
 	/*
@@ -1031,6 +1037,7 @@
 
 	gd->flags = boot_flags;
 	gd->have_console = 0;
+	printascii("board_init_f.\n");
 
 	if (initcall_run_list(init_sequence_f))
 		hang();
diff -urN u-boot-2015.04/common/board_r.c uboot_2015.04/common/board_r.c
--- u-boot-2015.04/common/board_r.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/common/board_r.c	2017-11-29 16:39:27.000000000 -0800
@@ -59,6 +59,8 @@
 #include <asm/arch/mmu.h>
 #endif
 
+#define _DEBUG 1
+
 DECLARE_GLOBAL_DATA_PTR;
 
 ulong monitor_flash_len;
@@ -437,13 +439,15 @@
 static int initr_env(void)
 {
 	/* initialize environment */
-	if (should_load_env())
+	if (should_load_env()) {
 		env_relocate();
+	}
 	else
 		set_default_env(NULL);
 
 	/* Initialize from environment */
 	load_addr = getenv_ulong("loadaddr", 16, load_addr);
+	debug("%s:%d  load_addr = 0x%lx.\n", __func__, __LINE__, load_addr);
 #if defined(CONFIG_SYS_EXTBDINFO)
 #if defined(CONFIG_405GP) || defined(CONFIG_405EP)
 #if defined(CONFIG_I2CFAST)
@@ -894,7 +898,7 @@
 	run_main_loop,
 };
 
-void board_init_r(gd_t *new_gd, ulong dest_addr)
+__weak void board_init_r(gd_t *new_gd, ulong dest_addr)
 {
 #ifdef CONFIG_NEEDS_MANUAL_RELOC
 	int i;
diff -urN u-boot-2015.04/common/bootm.c uboot_2015.04/common/bootm.c
--- u-boot-2015.04/common/bootm.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/common/bootm.c	2017-11-29 16:39:27.000000000 -0800
@@ -28,6 +28,7 @@
 #include <command.h>
 #include <bootm.h>
 #include <image.h>
+#define _DEBUG 1
 
 #ifndef CONFIG_SYS_BOOTM_LEN
 /* use 8MByte as default max gunzip size */
@@ -587,14 +588,17 @@
 	if (states & BOOTM_STATE_START)
 		ret = bootm_start(cmdtp, flag, argc, argv);
 
+	debug("%s:%d  started.\n", __func__, __LINE__);
 	if (!ret && (states & BOOTM_STATE_FINDOS))
 		ret = bootm_find_os(cmdtp, flag, argc, argv);
 
+	debug("%s:%d  searching os[done].\n", __func__, __LINE__);
 	if (!ret && (states & BOOTM_STATE_FINDOTHER)) {
 		ret = bootm_find_other(cmdtp, flag, argc, argv);
 		argc = 0;	/* consume the args */
 	}
 
+	debug("%s find other.\n", __func__);
 	/* Load the OS */
 	if (!ret && (states & BOOTM_STATE_LOADOS)) {
 		ulong load_end;
@@ -613,6 +617,7 @@
 			fixup_silent_linux();
 #endif
 	}
+	debug("%s: load OS done.\n", __func__);
 
 	/* Relocate the ramdisk */
 #ifdef CONFIG_SYS_BOOT_RAMDISK_HIGH
@@ -634,7 +639,7 @@
 					&images->ft_len);
 	}
 #endif
-
+	debug("%s: reserve fdt done.\n", __func__);
 	/* From now on, we need the OS boot function */
 	if (ret)
 		return ret;
@@ -677,6 +682,7 @@
 		return ret;
 	}
 
+	debug("%s: run the OS.\n", __func__);
 	/* Now run the OS! We hope this doesn't return */
 	if (!ret && (states & BOOTM_STATE_OS_GO))
 		ret = boot_selected_os(argc, argv, BOOTM_STATE_OS_GO,
diff -urN u-boot-2015.04/common/cli_simple.c uboot_2015.04/common/cli_simple.c
--- u-boot-2015.04/common/cli_simple.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/common/cli_simple.c	2017-11-29 16:39:27.000000000 -0800
@@ -14,7 +14,7 @@
 #include <cli.h>
 #include <linux/ctype.h>
 
-#define DEBUG_PARSER	0	/* set to 1 to debug */
+#define DEBUG_PARSER	1	/* set to 1 to debug */
 
 #define debug_parser(fmt, args...)		\
 	debug_cond(DEBUG_PARSER, fmt, ##args)
diff -urN u-boot-2015.04/common/cmd_boot.c uboot_2015.04/common/cmd_boot.c
--- u-boot-2015.04/common/cmd_boot.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/common/cmd_boot.c	2017-11-29 16:39:27.000000000 -0800
@@ -45,6 +45,13 @@
 	return rcode;
 }
 
+static int feel_lonely(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
+{
+    printf ("## I am lonely, and confused about the world!\n");
+
+    return 0;
+}
+
 /* -------------------------------------------------------------------- */
 
 U_BOOT_CMD(
@@ -57,6 +64,12 @@
 #endif
 
 U_BOOT_CMD(
+           lonely, CONFIG_SYS_MAXARGS, 1, feel_lonely,
+           "I feel lonely",
+           ""
+);
+
+U_BOOT_CMD(
 	reset, 1, 0,	do_reset,
 	"Perform RESET of the CPU",
 	""
diff -urN u-boot-2015.04/common/env_common.c uboot_2015.04/common/env_common.c
--- u-boot-2015.04/common/env_common.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/common/env_common.c	2017-11-29 16:39:26.000000000 -0800
@@ -199,6 +199,7 @@
 		memcpy(&crc, &ep->crc, sizeof(crc));
 
 		if (crc32(0, ep->data, ENV_SIZE) != crc) {
+			// TODO: env values stuck
 			set_default_env("!bad CRC");
 			return 0;
 		}
@@ -264,6 +265,7 @@
 		set_default_env("!bad CRC");
 #endif
 	} else {
+		// exynos4412 is here
 		env_relocate_spec();
 	}
 }
diff -urN u-boot-2015.04/common/env_mmc.c uboot_2015.04/common/env_mmc.c
--- u-boot-2015.04/common/env_mmc.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/common/env_mmc.c	2017-11-29 16:39:26.000000000 -0800
@@ -277,6 +277,7 @@
 		ep = tmp_env2;
 
 	env_flags = ep->flags;
+	//TODO: env_import fails cuz crc check
 	env_import((char *)ep, 0);
 	ret = 0;
 
diff -urN u-boot-2015.04/common/image.c uboot_2015.04/common/image.c
--- u-boot-2015.04/common/image.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/common/image.c	2017-11-29 16:39:27.000000000 -0800
@@ -37,6 +37,7 @@
 #include <u-boot/sha1.h>
 #include <asm/errno.h>
 #include <asm/io.h>
+#define _DEBUG 1
 
 #ifdef CONFIG_CMD_BDI
 extern int do_bdinfo(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[]);
@@ -56,6 +57,7 @@
 #endif /* !USE_HOSTCC*/
 
 #include <u-boot/crc.h>
+#define _DEBUG	1
 
 #ifndef CONFIG_SYS_BARGSIZE
 #define CONFIG_SYS_BARGSIZE 512
@@ -952,6 +954,7 @@
 
 		/* copy from dataflash if needed */
 		rd_addr = genimg_get_image(rd_addr);
+		debug("rd_addr = 0x%x\n", rd_addr);
 
 		/*
 		 * Check if there is an initrd image at the
@@ -1009,7 +1012,7 @@
 				rd_data = rd_len = rd_load = 0;
 				return 1;
 			}
-		}
+		} /* end of switch */
 	} else if (images->legacy_hdr_valid &&
 			image_check_type(&images->legacy_hdr_os_copy,
 						IH_TYPE_MULTI)) {
diff -urN u-boot-2015.04/common/lcd.c uboot_2015.04/common/lcd.c
--- u-boot-2015.04/common/lcd.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/common/lcd.c	2017-11-29 16:39:26.000000000 -0800
@@ -8,6 +8,7 @@
  */
 
 /* #define DEBUG */
+#define DEBUG
 #include <config.h>
 #include <common.h>
 #include <command.h>
@@ -114,7 +115,13 @@
 	ushort v_step = (v_max + N_BLK_VERT - 1) / N_BLK_VERT;
 	ushort h_step = (h_max + N_BLK_HOR  - 1) / N_BLK_HOR;
 	ushort v, h;
+#if (LCD_BPP == LCD_COLOR8)
 	uchar *pix = (uchar *)lcd_base;
+#elif (LCD_BPP == LCD_COLOR16)
+	ushort *pix = (ushort *)lcd_base;
+#else
+	uint *pix = (uint *)lcd_base;
+#endif
 
 	printf("[LCD] Test Pattern: %d x %d [%d x %d]\n",
 		h_max, v_max, h_step, v_step);
@@ -148,6 +155,7 @@
 	int rc;
 
 	lcd_base = map_sysmem(gd->fb_base, 0);
+	printf("%s: lcd base = 0x%x.\n", __func__, lcd_base);
 
 	lcd_init(lcd_base);
 
diff -urN u-boot-2015.04/common/Makefile uboot_2015.04/common/Makefile
--- u-boot-2015.04/common/Makefile	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/common/Makefile	2017-11-29 16:39:26.000000000 -0800
@@ -234,7 +234,7 @@
 obj-$(CONFIG_ENV_IS_IN_SPI_FLASH) += env_sf.o
 obj-$(CONFIG_ENV_IS_IN_FLASH) += env_flash.o
 endif
-endif
+endif	# end of non-definition CONFIG_SPL_BUILD
 # core command
 obj-y += cmd_nvedit.o
 #environment
diff -urN u-boot-2015.04/configs/itop-4412_defconfig uboot_2015.04/configs/itop-4412_defconfig
--- u-boot-2015.04/configs/itop-4412_defconfig	1969-12-31 16:00:00.000000000 -0800
+++ uboot_2015.04/configs/itop-4412_defconfig	2017-11-29 16:56:17.000000000 -0800
@@ -0,0 +1,15 @@
+CONFIG_SPL=y
+CONFIG_ARM=y
+CONFIG_ARCH_EXYNOS=y
+CONFIG_TARGET_ITOP-4412=y
+CONFIG_OF_CONTROL=y
+CONFIG_DEFAULT_DEVICE_TREE="exynos4412-itop-4412"
+CONFIG_OF_EMBED=y
+CONFIG_SYS_PROMT="ITOP-4412"
+CONFIG_DEBUG_LL=y
+CONFIG_DEBUG_UART_PHYS=0x13820000
+CONFIG_DEBUG_UART_8250_FLOW_CONTROL=y
+
+CONFIG_DM=y
+CONFIG_DM_SERIAL=y
+CONFIG_DM_GPIO=y
diff -urN u-boot-2015.04/drivers/gpio/gpio-uclass.c uboot_2015.04/drivers/gpio/gpio-uclass.c
--- u-boot-2015.04/drivers/gpio/gpio-uclass.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/drivers/gpio/gpio-uclass.c	2017-11-29 16:39:34.000000000 -0800
@@ -11,6 +11,7 @@
 #include <malloc.h>
 #include <asm/gpio.h>
 #include <linux/ctype.h>
+#define _DEBUG	1
 
 DECLARE_GLOBAL_DATA_PTR;
 
@@ -299,8 +300,10 @@
 	int ret;
 
 	ret = check_reserved(desc, "get_value");
-	if (ret)
+	if (ret) {
+		debug("%s:%d check_reserved error.\n", __func__, __LINE__);
 		return ret;
+	}
 
 	value = gpio_get_ops(desc->dev)->get_value(desc->dev, desc->offset);
 
diff -urN u-boot-2015.04/drivers/mmc/exynos_dw_mmc.c uboot_2015.04/drivers/mmc/exynos_dw_mmc.c
--- u-boot-2015.04/drivers/mmc/exynos_dw_mmc.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/drivers/mmc/exynos_dw_mmc.c	2017-11-29 16:39:34.000000000 -0800
@@ -95,6 +95,7 @@
 	sclk = get_mmc_clk(index);
 	div = DIV_ROUND_UP(sclk, freq);
 	/* set the clock divisor for mmc */
+	printf("emmc dev index = %d, sclk = %d, freq = %d, div = %d\n", index, sclk, freq, div);
 	set_mmc_clk(index, div);
 
 	host->name = "EXYNOS DWMMC";
@@ -258,6 +259,8 @@
 			return err;
 		}
 
+		printf("mmc4 clk source = 0x%x\n", readl(0x1003c240));
+		printf("mmc4 mask = 0x%x\n", readl(0x1003c340));
 		do_dwmci_init(host);
 	}
 	return 0;
@@ -275,6 +278,7 @@
 	count = fdtdec_find_aliases_for_id(blob, "mmc",
 				compat_id, node_list, DWMMC_MAX_CH_NUM);
 
+	printf("Found %d mmc nodes\n", count);
 	/* For DWMMC always set boot device as mmc 0 */
 	if (count >= 3 && get_boot_mode() == BOOT_MODE_SD) {
 		boot_dev_node = node_list[2];
diff -urN u-boot-2015.04/drivers/mmc/mmc.c uboot_2015.04/drivers/mmc/mmc.c
--- u-boot-2015.04/drivers/mmc/mmc.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/drivers/mmc/mmc.c	2017-11-29 16:39:34.000000000 -0800
@@ -17,6 +17,8 @@
 #include <linux/list.h>
 #include <div64.h>
 #include "mmc_private.h"
+//#define _DEBUG	1
+//#define CONFIG_MMC_TRACE
 
 static struct list_head mmc_devices;
 static int cur_dev_num = -1;
@@ -211,8 +213,10 @@
 	data.blocksize = mmc->read_bl_len;
 	data.flags = MMC_DATA_READ;
 
-	if (mmc_send_cmd(mmc, &cmd, &data))
+	if (mmc_send_cmd(mmc, &cmd, &data)) {
+		debug("mmc read error.\n");
 		return 0;
+	}
 
 	if (blkcnt > 1) {
 		cmd.cmdidx = MMC_CMD_STOP_TRANSMISSION;
@@ -237,8 +241,10 @@
 		return 0;
 
 	struct mmc *mmc = find_mmc_device(dev_num);
-	if (!mmc)
+	if (!mmc) {
+		debug("%s: find NO mmc device.\n", __func__);
 		return 0;
+	}
 
 	if ((start + blkcnt) > mmc->block_dev.lba) {
 #if !defined(CONFIG_SPL_BUILD) || defined(CONFIG_SPL_LIBCOMMON_SUPPORT)
@@ -248,14 +254,17 @@
 		return 0;
 	}
 
-	if (mmc_set_blocklen(mmc, mmc->read_bl_len))
+	if (mmc_set_blocklen(mmc, mmc->read_bl_len)) {
+		debug("%s: set block len error.\n", __func__);
 		return 0;
+	}
 
 	do {
 		cur = (blocks_todo > mmc->cfg->b_max) ?
 			mmc->cfg->b_max : blocks_todo;
-		if(mmc_read_blocks(mmc, dst, start, cur) != cur)
+		if(mmc_read_blocks(mmc, dst, start, cur) != cur) {
 			return 0;
+		}
 		blocks_todo -= cur;
 		start += cur;
 		dst += cur * mmc->read_bl_len;
@@ -1037,10 +1046,13 @@
 
 	err = mmc_send_cmd(mmc, &cmd, NULL);
 
-	if (err)
+	if (err) {
+		debug("%s: send cmd error.\n", __func__);
 		return err;
+	}
 
 	memcpy(mmc->cid, cmd.response, 16);
+	debug("%s: cid = %d-%d-%d-%d.\n", __func__, mmc->cid[0], mmc->cid[1], mmc->cid[2], mmc->cid[3]);
 
 	/*
 	 * For MMC cards, set the Relative Address.
@@ -1054,11 +1066,15 @@
 
 		err = mmc_send_cmd(mmc, &cmd, NULL);
 
-		if (err)
+		if (err) {
+			debug("%s:%d error.\n", __func__, __LINE__);
 			return err;
+		}
 
-		if (IS_SD(mmc))
+		if (IS_SD(mmc)) {
 			mmc->rca = (cmd.response[0] >> 16) & 0xffff;
+			debug("%s: mmc rca = %d.\n", __func__, mmc->rca);
+		}
 	}
 
 	/* Get the Card-Specific Data */
@@ -1071,13 +1087,19 @@
 	/* Waiting for the ready status */
 	mmc_send_status(mmc, timeout);
 
-	if (err)
+	if (err) {
+		debug("%s:%d error.\n", __func__, __LINE__);
 		return err;
+	}
 
+	/*
+	 * These are Card-Specific Data
+	 */
 	mmc->csd[0] = cmd.response[0];
 	mmc->csd[1] = cmd.response[1];
 	mmc->csd[2] = cmd.response[2];
 	mmc->csd[3] = cmd.response[3];
+	debug("%s: mmc csd = %x-%x-%x-%x.\n", __func__, mmc->csd[0], mmc->csd[1], mmc->csd[2], mmc->csd[3]);
 
 	if (mmc->version == MMC_VERSION_UNKNOWN) {
 		int version = (cmd.response[0] >> 26) & 0xf;
@@ -1119,10 +1141,12 @@
 		mmc->write_bl_len = 1 << ((cmd.response[3] >> 22) & 0xf);
 
 	if (mmc->high_capacity) {
+		debug("MMC supports high capacity.\n");
 		csize = (mmc->csd[1] & 0x3f) << 16
 			| (mmc->csd[2] & 0xffff0000) >> 16;
 		cmult = 8;
 	} else {
+		debug("No High Capacity.\n");
 		csize = (mmc->csd[1] & 0x3ff) << 2
 			| (mmc->csd[2] & 0xc0000000) >> 30;
 		cmult = (mmc->csd[2] & 0x00038000) >> 15;
@@ -1151,13 +1175,16 @@
 
 	/* Select the card, and put it into Transfer Mode */
 	if (!mmc_host_is_spi(mmc)) { /* cmd not supported in spi */
+		debug("%s:%d Not spi.\n", __func__, __LINE__);
 		cmd.cmdidx = MMC_CMD_SELECT_CARD;
 		cmd.resp_type = MMC_RSP_R1;
 		cmd.cmdarg = mmc->rca << 16;
 		err = mmc_send_cmd(mmc, &cmd, NULL);
 
-		if (err)
+		if (err) {
+			debug("%s:%d error.\n", __func__, __LINE__);
 			return err;
+		}
 	}
 
 	/*
@@ -1168,8 +1195,10 @@
 	if (!IS_SD(mmc) && (mmc->version >= MMC_VERSION_4)) {
 		/* check  ext_csd version and capacity */
 		err = mmc_send_ext_csd(mmc, ext_csd);
-		if (err)
+		if (err) {
+			debug("%s:%d error.\n", __func__, __LINE__);
 			return err;
+		}
 		if (ext_csd[EXT_CSD_REV] >= 2) {
 			/*
 			 * According to the JEDEC Standard, the value of
@@ -1313,16 +1342,24 @@
 	}
 
 	err = mmc_set_capacity(mmc, mmc->part_num);
-	if (err)
+	if (err) {
+		debug("%s:%d error.\n", __func__, __LINE__);
 		return err;
+	}
 
-	if (IS_SD(mmc))
+	if (IS_SD(mmc)) {
+		debug("%s: sd change freq.\n", __func__);
 		err = sd_change_freq(mmc);
-	else
+	}
+	else {
+		debug("%s: mmc change freq.\n", __func__);
 		err = mmc_change_freq(mmc);
+	}
 
-	if (err)
+	if (err) {
+		debug("%s: error.\n", __func__);
 		return err;
+	}
 
 	/* Restrict card's capabilities by what the host can do */
 	mmc->card_caps &= mmc->cfg->host_caps;
@@ -1334,15 +1371,19 @@
 			cmd.cmdarg = mmc->rca << 16;
 
 			err = mmc_send_cmd(mmc, &cmd, NULL);
-			if (err)
+			if (err) {
+				debug("%s:%d error.\n", __func__, __LINE__);
 				return err;
+			}
 
 			cmd.cmdidx = SD_CMD_APP_SET_BUS_WIDTH;
 			cmd.resp_type = MMC_RSP_R1;
 			cmd.cmdarg = 2;
 			err = mmc_send_cmd(mmc, &cmd, NULL);
-			if (err)
+			if (err) {
+				debug("%s:%d error.\n", __func__, __LINE__);
 				return err;
+			}
 
 			mmc_set_bus_width(mmc, 4);
 		}
@@ -1405,16 +1446,20 @@
 			err = mmc_switch(mmc, EXT_CSD_CMD_SET_NORMAL,
 					EXT_CSD_BUS_WIDTH, extw);
 
-			if (err)
+			if (err) {
+				debug("%s:%d error.\n", __func__, __LINE__);
 				continue;
+			}
 
 			mmc->ddr_mode = (caps & MMC_MODE_DDR_52MHz) ? 1 : 0;
 			mmc_set_bus_width(mmc, widths[idx]);
 
 			err = mmc_send_ext_csd(mmc, test_csd);
 
-			if (err)
+			if (err) {
+				debug("%s:%d error.\n", __func__, __LINE__);
 				continue;
+			}
 
 			/* Only compare read only fields */
 			if (ext_csd[EXT_CSD_PARTITIONING_SUPPORT]
@@ -1443,6 +1488,7 @@
 		}
 	}
 
+	debug("%s: set mmc clock = %d.\n", __func__, mmc->tran_speed);
 	mmc_set_clock(mmc, mmc->tran_speed);
 
 	/* Fix the block length for DDR mode */
@@ -1473,9 +1519,11 @@
 	mmc->block_dev.revision[0] = 0;
 #endif
 #if !defined(CONFIG_SPL_BUILD) || defined(CONFIG_SPL_LIBDISK_SUPPORT)
+	debug("init partition.\n");
 	init_part(&mmc->block_dev);
 #endif
 
+	debug("%s: ends.\n", __func__);
 	return 0;
 }
 
@@ -1637,15 +1685,21 @@
 {
 	int err = 0;
 
-	if (mmc->op_cond_pending)
+	if (mmc->op_cond_pending) {
+		debug("%s: op cond pending.\n", __func__);
 		err = mmc_complete_op_cond(mmc);
+	}
 
-	if (!err)
+	if (!err) {
+		debug("%s: mmc startup.\n", __func__);
 		err = mmc_startup(mmc);
+	}
 	if (err)
 		mmc->has_init = 0;
-	else
+	else {
+		debug("%s: mmc has init.\n", __func__);
 		mmc->has_init = 1;
+	}
 	mmc->init_in_progress = 0;
 	return err;
 }
@@ -1660,11 +1714,15 @@
 
 	start = get_timer(0);
 
-	if (!mmc->init_in_progress)
+	if (!mmc->init_in_progress) {
+		debug("start mmc init...\n");
 		err = mmc_start_init(mmc);
+	}
 
-	if (!err || err == IN_PROGRESS)
+	if (!err || err == IN_PROGRESS) {
+		debug("complete mmc init...\n");
 		err = mmc_complete_init(mmc);
+	}
 	debug("%s: %d, time %lu\n", __func__, err, get_timer(start));
 	return err;
 }
@@ -1741,6 +1799,8 @@
 
 		if (m->preinit)
 			mmc_start_init(m);
+		else
+			debug("%s: No preinit.\n", __func__);
 	}
 }
 
diff -urN u-boot-2015.04/drivers/mmc/s5p_sdhci.c uboot_2015.04/drivers/mmc/s5p_sdhci.c
--- u-boot-2015.04/drivers/mmc/s5p_sdhci.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/drivers/mmc/s5p_sdhci.c	2017-11-29 16:39:34.000000000 -0800
@@ -15,6 +15,7 @@
 #include <asm/arch/clk.h>
 #include <errno.h>
 #include <asm/arch/pinmux.h>
+//#define _DEBUG	1
 
 static char *S5P_NAME = "SAMSUNG SDHCI";
 static void s5p_sdhci_set_control_reg(struct sdhci_host *host)
@@ -72,6 +73,7 @@
 		SDHCI_QUIRK_WAIT_SEND_CMD | SDHCI_QUIRK_USE_WIDE8;
 	host->voltages = MMC_VDD_32_33 | MMC_VDD_33_34 | MMC_VDD_165_195;
 	host->version = sdhci_readw(host, SDHCI_HOST_VERSION);
+	debug("sdhci version = 0x%x.\n", host->version);
 
 	host->set_control_reg = &s5p_sdhci_set_control_reg;
 	host->set_clock = set_mmc_clk;
@@ -109,6 +111,7 @@
 	dev_id = host->index + PERIPH_ID_SDMMC0;
 
 	if (dm_gpio_is_valid(&host->pwr_gpio)) {
+		debug("config sdmmc pwr_gpio.\n");
 		dm_gpio_set_value(&host->pwr_gpio, 1);
 		err = exynos_pinmux_config(dev_id, flag);
 		if (err) {
@@ -118,8 +121,11 @@
 	}
 
 	if (dm_gpio_is_valid(&host->cd_gpio)) {
-		if (dm_gpio_get_value(&host->cd_gpio))
-			return -ENODEV;
+		debug("config sdmmc cd_gpio.\n");
+		if (dm_gpio_get_value(&host->cd_gpio)) {
+			debug("dm gpio get value error.\n");
+			//return -ENODEV;
+		}
 
 		err = exynos_pinmux_config(dev_id, flag);
 		if (err) {
@@ -138,10 +144,11 @@
 
 	/* Get device id */
 	dev_id = pinmux_decode_periph_id(blob, node);
-	if (dev_id < PERIPH_ID_SDMMC0 && dev_id > PERIPH_ID_SDMMC3) {
+	if (dev_id < PERIPH_ID_SDMMC0 || dev_id > PERIPH_ID_SDMMC3) {
 		debug("MMC: Can't get device id\n");
 		return -1;
 	}
+	debug("sdmmc dev_id = %d.\n", dev_id);
 	host->index = dev_id - PERIPH_ID_SDMMC0;
 
 	/* Get bus width */
@@ -150,6 +157,7 @@
 		debug("MMC: Can't get bus-width\n");
 		return -1;
 	}
+	debug("sdmmc bus_width = %d.\n", bus_width);
 	host->bus_width = bus_width;
 
 	/* Get the base address from the device node */
@@ -158,6 +166,7 @@
 		debug("MMC: Can't get base address\n");
 		return -1;
 	}
+	debug("MMC <%d>, base = 0x%x\n", dev_id, base);
 	host->ioaddr = (void *)base;
 
 	gpio_request_by_name_nodev(blob, node, "pwr-gpios", 0, &host->pwr_gpio,
@@ -181,6 +190,7 @@
 		if (node <= 0)
 			continue;
 
+		printf("probing host[%d].\n", i);
 		host = &sdhci_host[i];
 
 		if (sdhci_get_config(blob, node, host)) {
@@ -201,8 +211,7 @@
 			COMPAT_SAMSUNG_EXYNOS_MMC, node_list,
 			SDHCI_MAX_HOSTS);
 
-	process_nodes(blob, node_list, count);
-
-	return 1;
+	printf("sd mmc count = %d.\n", count);
+	return process_nodes(blob, node_list, count);
 }
 #endif
diff -urN u-boot-2015.04/drivers/mmc/sdhci.c uboot_2015.04/drivers/mmc/sdhci.c
--- u-boot-2015.04/drivers/mmc/sdhci.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/drivers/mmc/sdhci.c	2017-11-29 16:39:34.000000000 -0800
@@ -12,6 +12,7 @@
 #include <malloc.h>
 #include <mmc.h>
 #include <sdhci.h>
+#define _DEBUG	1
 
 void *aligned_buffer;
 
@@ -294,9 +295,10 @@
 		}
 	}
 	div >>= 1;
+	debug("%s: dev index = %d, div = %d.\n", __func__, host->index, div);
 
 	if (host->set_clock)
-		host->set_clock(host->index, div);
+		//host->set_clock(host->index, div);
 
 	clk = (div & SDHCI_DIV_MASK) << SDHCI_DIVIDER_SHIFT;
 	clk |= ((div & SDHCI_DIV_HI_MASK) >> SDHCI_DIV_MASK_LEN)
diff -urN u-boot-2015.04/drivers/video/exynos_fb.c uboot_2015.04/drivers/video/exynos_fb.c
--- u-boot-2015.04/drivers/video/exynos_fb.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/drivers/video/exynos_fb.c	2017-11-29 16:39:33.000000000 -0800
@@ -70,6 +70,38 @@
 
 __weak void exynos_cfg_lcd_gpio(void)
 {
+	/*
+	 * power,scl,sda
+	 */
+	unsigned int value = readl(GPD0CON);
+	writel(value|((3<<8)|(3<<12)), GPD0CON);
+	printf("GPD0CON value = 0x%x.\n", readl(GPD0CON));
+
+	/*
+	 * VGA EN
+	 */
+	writel(1<<8,GPC0CON);
+	writel(1<<2, GPC0DAT);
+
+	// BK_VDD_EN
+	writel(1<<16,GPL0CON);
+	writel(1<<4,GPL0DAT);
+
+	/*
+	 * lcd sync
+	 */
+	writel(0x22222222, GPF0CON);
+	writel(0xffff, GPF0DRV);
+
+	/*
+	 * lcd vd
+	 */
+	writel(0x22222222, GPF1CON);
+	writel(0xffff, GPF1DRV);
+	writel(0x22222222, GPF2CON);
+	writel(0xffff, GPF2DRV);
+	writel(0x2222, GPF3CON);
+	writel(0xff, GPF3DRV);
 }
 
 __weak void exynos_backlight_on(unsigned int onoff)
@@ -82,6 +114,8 @@
 
 __weak void exynos_lcd_power_on(void)
 {
+	unsigned int value = readl(GPD0CON);
+	writel(value|(2<<4), GPD0CON);
 }
 
 __weak void exynos_cfg_ldo(void)
@@ -133,14 +167,18 @@
 		debug("FIMD: Can't get device node for FIMD\n");
 		return;
 	}
-	gpio_request_by_name_nodev(gd->fdt_blob, node, "samsung,pwm-out-gpio",
+	/*
+	 * gpio_request_by_name_nodev(gd->fdt_blob, node, "samsung,pwm-out-gpio",
 				   0, &pwm_out_gpio,
 				   GPIOD_IS_OUT | GPIOD_IS_OUT_ACTIVE);
 
 	gpio_request_by_name_nodev(gd->fdt_blob, node, "samsung,bl-en-gpio", 0,
 				   &bl_en_gpio,
 				   GPIOD_IS_OUT | GPIOD_IS_OUT_ACTIVE);
+	 */
 
+
+	
 #endif
 	exynos_cfg_ldo();
 
diff -urN u-boot-2015.04/drivers/video/exynos_fb.h uboot_2015.04/drivers/video/exynos_fb.h
--- u-boot-2015.04/drivers/video/exynos_fb.h	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/drivers/video/exynos_fb.h	2017-11-29 16:39:33.000000000 -0800
@@ -12,6 +12,32 @@
 
 #include <asm/arch/fb.h>
 
+#define EXYNOS_GPIO_BASE	0x11400000
+#define GPD0CON		(EXYNOS_GPIO_BASE+0xA0)
+#define GPD0DAT		(GPD0CON+0x4)
+#define GPD0PUD		(GPD0CON+0x8)
+#define GPD0DRV		(GPD0CON+0xC)
+
+#define GPF0CON		(EXYNOS_GPIO_BASE+0x180)
+#define GPF0DRV		(GPF0CON+0xC)
+
+#define GPF1CON		(EXYNOS_GPIO_BASE+0x1A0)
+#define GPF1DRV		(GPF1CON+0xC)
+
+#define GPF2CON		(EXYNOS_GPIO_BASE+0x1C0)
+#define GPF2DRV		(GPF2CON+0xC)
+
+#define GPF3CON		(EXYNOS_GPIO_BASE+0x1E0)
+#define GPF3DRV		(GPF3CON+0xC)
+
+#define GPC0CON		(EXYNOS_GPIO_BASE+0x60)
+#define GPC0DAT		(GPC0CON+0x4)
+
+#define EXYNOS_GPIO_BASE_PART2	0x11000000
+#define GPL0CON		(EXYNOS_GPIO_BASE_PART2+0xC0)
+#define GPL0DAT		(GPL0CON+0x4)
+
+
 #define MAX_CLOCK	(86 * 1000000)
 
 enum exynos_cpu_auto_cmd_rate {
diff -urN u-boot-2015.04/drivers/video/exynos_fimd.c uboot_2015.04/drivers/video/exynos_fimd.c
--- u-boot-2015.04/drivers/video/exynos_fimd.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/drivers/video/exynos_fimd.c	2017-11-29 16:39:33.000000000 -0800
@@ -6,6 +6,7 @@
  *
  * SPDX-License-Identifier:	GPL-2.0+
  */
+#define DEBUG
 
 #include <config.h>
 #include <common.h>
@@ -29,6 +30,18 @@
 		u_long palette_size)
 {
 	lcd_base_addr = (unsigned long *)screen_base;
+	unsigned int index;
+	unsigned int value;
+	printf("init framebuffer at 0x%lx, fb_size = 0x%x.\n", lcd_base_addr, fb_size);
+	for (index = 0; index < fb_size; index+=4)
+	{
+		//*(lcd_base_addr+index) = 0x4;
+		writel(0xa0a0a0a0, lcd_base_addr+index);
+		value = readl(lcd_base_addr+index);
+		if (value != 0xa0a0a0a0)
+			printf("write error.\n");
+	}
+	printf("init framebuffer Done.....index = 0x%x.\n", index);
 }
 
 static void exynos_fimd_set_dualrgb(unsigned int enabled)
@@ -307,6 +320,8 @@
 								node, "reg");
 	if (fimd_ctrl == NULL)
 		debug("Can't get the FIMD base address\n");
+	else
+		debug("fimd_ctrl base = 0x%x.\n", (unsigned int *)fimd_ctrl);
 
 	if (fdtdec_get_bool(gd->fdt_blob, node, "samsung,disable-sysmmu"))
 		exynos_fimd_disable_sysmmu();
diff -urN u-boot-2015.04/.gitignore uboot_2015.04/.gitignore
--- u-boot-2015.04/.gitignore	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/.gitignore	1969-12-31 16:00:00.000000000 -0800
@@ -1,85 +0,0 @@
-#
-# NOTE! Don't add files that are generated in specific
-# subdirectories here. Add them in the ".gitignore" file
-# in that subdirectory instead.
-#
-# Normal rules
-#
-.*
-*.o
-*.o.*
-*.a
-*.s
-*.su
-*.mod.c
-*.i
-*.lst
-*.order
-*.elf
-*.swp
-*.bin
-*.patch
-*.cfgtmp
-
-# host programs on Cygwin
-*.exe
-
-# Build tree
-/build-*
-
-#
-# Top-level generic files
-#
-/MLO*
-/SPL
-/System.map
-/u-boot*
-/boards.cfg
-
-#
-# git files that we don't want to ignore even it they are dot-files
-#
-!.gitignore
-!.mailmap
-
-#
-# Generated files
-#
-/LOG
-/spl/
-/tpl/
-
-#
-# Generated include files
-#
-/include/config/
-/include/generated/
-
-# stgit generated dirs
-patches-*
-.stgit-edit.txt
-
-# quilt's files
-patches
-series
-
-# gdb files
-.gdb_history
-
-# cscope files
-cscope.*
-
-# tags files
-/tags
-/ctags
-/etags
-
-# gnu global files
-GPATH
-GRTAGS
-GSYMS
-GTAGS
-
-*.orig
-*~
-\#*#
Binary files u-boot-2015.04/image.bin and uboot_2015.04/image.bin differ
diff -urN u-boot-2015.04/include/config_distro_defaults.h uboot_2015.04/include/config_distro_defaults.h
--- u-boot-2015.04/include/config_distro_defaults.h	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/include/config_distro_defaults.h	2017-11-29 16:39:31.000000000 -0800
@@ -51,7 +51,7 @@
 
 #define CONFIG_CMDLINE_EDITING
 #define CONFIG_AUTO_COMPLETE
-#define CONFIG_BOOTDELAY     2
+#define CONFIG_BOOTDELAY     5
 #define CONFIG_SYS_LONGHELP
 #define CONFIG_MENU
 #define CONFIG_DOS_PARTITION
diff -urN u-boot-2015.04/include/configs/itop-4412.h uboot_2015.04/include/configs/itop-4412.h
--- u-boot-2015.04/include/configs/itop-4412.h	1969-12-31 16:00:00.000000000 -0800
+++ uboot_2015.04/include/configs/itop-4412.h	2017-11-29 17:18:25.000000000 -0800
@@ -0,0 +1,154 @@
+/*
+ * Copyright (C) 2011 Samsung Electronics
+ *
+ * Configuration settings for the Samsung ITOP-4412(EXYNOS4410) board.
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef __CONFIG_ITOP-4412_H
+#define __CONFIG_ITOP-4412_H
+
+#include <configs/exynos4-common.h>
+
+#define CONFIG_SUPPORT_EMMC_BOOT
+/*
+ * #define CONFIG_EXYNOS_FB
+#define CONFIG_LCD
+ */
+#define CONFIG_EXYNOS_FB
+#define CONFIG_LCD
+#define CONFIG_FB_ADDR	0x40000000
+#define LCD_TEST_PATTERN
+#define LCD_BPP		LCD_COLOR16
+
+/*
+#define CONFIG_USE_IRQ
+ */
+#ifdef CONFIG_USE_IRQ
+#define CONFIG_STACKSIZE_IRQ		0x1000
+#define CONFIG_STACKSIZE_FIQ		0x1000
+#endif
+#define CONFIG_SYS_PROMPT		"itop-4412 > "
+#define BOOT_MICROPY
+
+#ifdef BOOT_MICROPY
+#define CONFIG_SYS_THUMB_BUILD
+#endif
+
+/* High Level Configuration Options */
+#define CONFIG_EXYNOS4210		1	/* which is a EXYNOS4210 SoC */
+#define CONFIG_ITOP4412			1	/* working with ITOP-4412*/
+
+#define CONFIG_SYS_DCACHE_OFF		1
+
+/* ITOP-4412 has 4 bank of DRAM */
+#define CONFIG_NR_DRAM_BANKS		4
+#define CONFIG_SYS_SDRAM_BASE		0x40000000
+#define PHYS_SDRAM_1			CONFIG_SYS_SDRAM_BASE
+#define SDRAM_BANK_SIZE			(256 << 20)	/* 256 MB */
+
+/* memtest works on */
+#define CONFIG_SYS_MEMTEST_START	CONFIG_SYS_SDRAM_BASE
+#define CONFIG_SYS_MEMTEST_END		(CONFIG_SYS_SDRAM_BASE + 0x6000000)
+#define CONFIG_SYS_LOAD_ADDR		(CONFIG_SYS_SDRAM_BASE + 0x00100000)
+
+#define CONFIG_SYS_TEXT_BASE	0x43e00000
+
+#define MACH_TYPE_ITOP4412		0xffffffff
+#define CONFIG_MACH_TYPE		MACH_TYPE_ITOP4412
+
+/* select serial console configuration */
+#define CONFIG_SERIAL2
+#define CONFIG_BAUDRATE			115200
+
+/* Console configuration */
+#define CONFIG_SYS_CONSOLE_INFO_QUIET
+#define CONFIG_SYS_CONSOLE_IS_IN_ENV
+#define CONFIG_DEFAULT_CONSOLE		"console=ttySAC1,115200n8\0"
+
+#define CONFIG_SYS_MEM_TOP_HIDE	(1 << 20)	/* ram console */
+
+#define CONFIG_SYS_MONITOR_BASE	0x00000000
+
+/* Power Down Modes */
+#define S5P_CHECK_SLEEP			0x00000BAD
+#define S5P_CHECK_DIDLE			0xBAD00000
+#define S5P_CHECK_LPA			0xABAD0000
+
+#undef CONFIG_CMD_PING
+#define CONFIG_CMD_ELF
+#define CONFIG_CMD_DHCP
+#define CONFIG_CMD_EXT2
+#define CONFIG_CMD_FS_GENERIC
+#define CONFIG_CMD_BOOTZ
+#define CONFIG_SUPPORT_RAW_INITRD
+#undef CONFIG_CMD_NET
+#undef CONFIG_CMD_NFS
+
+/* MMC SPL */
+#define COPY_BL2_FNPTR_ADDR		0x02020030
+#define CONFIG_SPL_TEXT_BASE	0x02023400	/*0x02021410*/
+
+#define CONFIG_EXTRA_ENV_SETTINGS \
+	"loadaddr=0x40007000\0" \
+	"rdaddr=0x48000000\0" \
+	"kerneladdr=0x40007000\0" \
+	"ramdiskaddr=0x48000000\0" \
+	"console=ttySAC2,115200n8\0" \
+	"mmcdev=0\0" \
+	"bootenv=uEnv.txt\0" \
+	"dtb_addr=0x41000000\0" \
+	"dtb_name=exynos4412-itop-4412.dtb\0" \
+	"loadbootenv=load mmc ${mmcdev} ${loadaddr} ${bootenv}\0" \
+	"bootargs=console=ttySAC2,115200n8 earlyprintk\0" \
+	"importbootenv=echo Importing environment from mmc ...; " \
+	"env import -t $loadaddr $filesize\0" \
+    "loadbootscript=load mmc ${mmcdev} ${loadaddr} boot.scr\0" \
+    "bootscript=echo Running bootscript from mmc${mmcdev} ...; " \
+    "source ${loadaddr}\0"
+#define CONFIG_BOOTCOMMAND \
+	"if mmc rescan; then " \
+		"echo SD/MMC found on device ${mmcdev};" \
+		"if run loadbootenv; then " \
+			"echo Loaded environment from ${bootenv};" \
+			"run importbootenv;" \
+		"fi;" \
+		"if test -n $uenvcmd; then " \
+			"echo Running uenvcmd ...;" \
+			"run uenvcmd;" \
+		"fi;" \
+		"if run loadbootscript; then " \
+			"run bootscript; " \
+		"fi; " \
+	"fi;" \
+	"mmc read ${loadaddr} 0x1000 0x4000; mmc read ${dtb_addr} 0x800 0xa0; bootm ${loadaddr} - ${dtb_addr}" \
+	"load mmc ${mmcdev} ${loadaddr} uImage; load mmc ${mmcdev} ${dtb_addr} ${dtb_name}; bootm ${loadaddr} - ${dtb_addr}"
+
+#define CONFIG_IDENT_STRING		" for ITOP-4412"
+
+#define CONFIG_CLK_1000_400_200
+
+/* MIU (Memory Interleaving Unit) */
+#define CONFIG_MIU_2BIT_21_7_INTERLEAVED
+
+#define CONFIG_ENV_IS_IN_MMC
+#define CONFIG_SYS_MMC_ENV_DEV		0
+#define CONFIG_ENV_SIZE			(16 << 10)	/* 16 KB */
+#define RESERVE_BLOCK_SIZE		(512)
+#define BL1_SIZE			(16 << 10) /*16 K reserved for BL1*/
+#define CONFIG_ENV_OFFSET		(RESERVE_BLOCK_SIZE + BL1_SIZE)
+
+#define CONFIG_SPL_LDSCRIPT	"board/samsung/common/exynos-uboot-spl.lds"
+#define CONFIG_SPL_MAX_FOOTPRINT	(14 * 1024)
+
+#define CONFIG_SPL_STACK			0x02040000
+#define UBOOT_SIZE					(2 << 20)
+#define CONFIG_SYS_INIT_SP_ADDR		(CONFIG_SYS_TEXT_BASE+UBOOT_SIZE-0x1000)
+
+/* U-boot copy size (512KB) from boot Media to DRAM.*/
+#define COPY_BL2_SIZE		0x80000
+#define BL2_START_OFFSET	((CONFIG_ENV_OFFSET + CONFIG_ENV_SIZE)/512)
+#define BL2_SIZE_BLOC_COUNT	(COPY_BL2_SIZE/512)
+
+#endif	/* __CONFIG_H */
diff -urN u-boot-2015.04/include/lcd.h uboot_2015.04/include/lcd.h
--- u-boot-2015.04/include/lcd.h	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/include/lcd.h	2017-11-29 16:39:27.000000000 -0800
@@ -192,8 +192,15 @@
 #define CONSOLE_COLOR_WHITE	0x00ffffff	/* Must remain last / highest */
 #define NBYTES(bit_code)	(NBITS(bit_code) >> 3)
 #else /* 16bpp color definitions */
-#define CONSOLE_COLOR_BLACK	0x0000
-#define CONSOLE_COLOR_WHITE	0xffff		/* Must remain last / highest */
+#define CONSOLE_COLOR_RED		0x001f
+#define CONSOLE_COLOR_GREEN		0x07e0
+#define CONSOLE_COLOR_YELLOW	0x07ff
+#define CONSOLE_COLOR_BLUE		0xf800
+#define CONSOLE_COLOR_MAGENTA	0xf81f
+#define CONSOLE_COLOR_CYAN		0xffe0
+#define CONSOLE_COLOR_GREY		0xf010
+#define CONSOLE_COLOR_BLACK		0x0000
+#define CONSOLE_COLOR_WHITE		0xffff		/* Must remain last / highest */
 #endif /* color definitions */
 
 #ifndef PAGE_SIZE
diff -urN u-boot-2015.04/lib/fdtdec.c uboot_2015.04/lib/fdtdec.c
--- u-boot-2015.04/lib/fdtdec.c	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/lib/fdtdec.c	2017-11-29 16:39:32.000000000 -0800
@@ -401,6 +401,7 @@
 		debug("%s: warning: maxcount exceeded with alias '%s'\n",
 		       __func__, name);
 
+	printf("found %d nodes with compatibility...\n", count);
 	/* Now find all the aliases */
 	for (offset = fdt_first_property_offset(blob, alias_node);
 			offset > 0;
@@ -442,6 +443,7 @@
 			       compat_names[id]);
 			continue;
 		}
+		printf("found a alise node, put into list number: %d\n", number);
 
 		/*
 		 * Add this node to our list in the right place, and mark
@@ -461,9 +463,11 @@
 				num_found = number + 1;
 		}
 		nodes[found] = 0;
-	}
+	} /* end of find all the aliases */
 
-	/* Add any nodes not mentioned by an alias */
+	/* Add any nodes not mentioned by an alias
+	 * put nodes[] into node_list[]
+	 */
 	for (i = j = 0; i < maxcount; i++) {
 		if (!node_list[i]) {
 			for (; j < maxcount; j++)
diff -urN u-boot-2015.04/.mailmap uboot_2015.04/.mailmap
--- u-boot-2015.04/.mailmap	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/.mailmap	1969-12-31 16:00:00.000000000 -0800
@@ -1,27 +0,0 @@
-#
-# This list is used by git-shortlog to fix a few botched name translations
-# in the git archive, either because the author's full name was messed up
-# and/or not always written the same way, making contributions from the
-# same person appearing not to be so or badly displayed.
-#
-# This file can be modified by hand or updated by the following command:
-#  scripts/mailmapper > tmp; mv tmp .mailmap
-#
-
-Allen Martin <amartin@nvidia.com>
-Andreas Bießmann <andreas.devel@googlemail.com>
-Aneesh V <aneesh@ti.com>
-Dirk Behme <dirk.behme@googlemail.com>
-Fabio Estevam <fabio.estevam@freescale.com>
-Jagannadha Sutradharudu Teki <402jagan@gmail.com>
-Markus Klotzbuecher <mk@denx.de>
-Prabhakar Kushwaha <prabhakar@freescale.com>
-Rajeshwari Shinde <rajeshwari.s@samsung.com>
-Sandeep Paulraj <s-paulraj@ti.com>
-Shaohui Xie <Shaohui.Xie@freescale.com>
-Stefan Roese <stroese>
-Stefano Babic <sbabic@denx.de>
-TsiChung Liew <Tsi-Chung.Liew@freescale.com>
-Wolfgang Denk <wdenk>
-York Sun <yorksun@freescale.com>
-Łukasz Majewski <l.majewski@samsung.com>
diff -urN u-boot-2015.04/Makefile uboot_2015.04/Makefile
--- u-boot-2015.04/Makefile	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/Makefile	2017-11-29 16:39:26.000000000 -0800
@@ -241,6 +241,8 @@
 CROSS_COMPILE ?=
 endif
 
+CROSS_COMPILE := arm-none-linux-gnueabi-
+
 KCONFIG_CONFIG	?= .config
 export KCONFIG_CONFIG
 
@@ -557,7 +559,7 @@
 ifdef CONFIG_CC_OPTIMIZE_FOR_SIZE
 KBUILD_CFLAGS	+= -Os
 else
-KBUILD_CFLAGS	+= -O2
+KBUILD_CFLAGS	+= -O0
 endif
 
 ifdef BUILD_TAG
@@ -566,10 +568,10 @@
 
 KBUILD_CFLAGS += $(call cc-option,-fno-stack-protector)
 
-KBUILD_CFLAGS	+= -g
+#KBUILD_CFLAGS	+= -g
 # $(KBUILD_AFLAGS) sets -g, which causes gcc to pass a suitable -g<format>
 # option to the assembler.
-KBUILD_AFLAGS	+= -g
+#KBUILD_AFLAGS	+= -g
 
 # Report stack usage if supported
 ifeq ($(shell $(CONFIG_SHELL) $(srctree)/scripts/gcc-stack-usage.sh $(CC)),y)
@@ -589,7 +591,7 @@
 KBUILD_CFLAGS   += $(call cc-option,-Werror=date-time)
 
 ifneq ($(CONFIG_SYS_TEXT_BASE),)
-KBUILD_CPPFLAGS += -DCONFIG_SYS_TEXT_BASE=$(CONFIG_SYS_TEXT_BASE)
+#KBUILD_CPPFLAGS += -DCONFIG_SYS_TEXT_BASE=$(CONFIG_SYS_TEXT_BASE)
 endif
 
 export CONFIG_SYS_TEXT_BASE
diff -urN u-boot-2015.04/mkbl2.c uboot_2015.04/mkbl2.c
--- u-boot-2015.04/mkbl2.c	1969-12-31 16:00:00.000000000 -0800
+++ uboot_2015.04/mkbl2.c	2017-11-29 16:39:35.000000000 -0800
@@ -0,0 +1,95 @@
+/*
+ * Copyright (c) 2010 Samsung Electronics Co., Ltd.
+ *              http://www.samsung.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+
+int main (int argc, char *argv[])
+{
+	FILE		*fp;
+	unsigned char	src;
+	char		*Buf, *a;
+	int		BufLen;
+	int		nbytes, fileLen;
+	unsigned int	checksum = 0;
+	int		i;
+
+	if (argc != 4)
+	{
+		printf("Usage: mkbl1 <source file> <destination file> <size> \n");
+		return -1;
+	}
+
+	BufLen = atoi(argv[3]);
+	Buf = (char *)malloc(BufLen);
+	memset(Buf, 0x00, BufLen);
+
+	fp = fopen(argv[1], "rb");
+	if( fp == NULL)
+	{
+		printf("source file open error\n");
+		free(Buf);
+		return -1;
+	}
+
+	fseek(fp, 0L, SEEK_END);
+	fileLen = ftell(fp);
+	fseek(fp, 0L, SEEK_SET);
+
+	if ( BufLen > fileLen )
+	{
+		printf("Usage: unsupported size\n");
+		free(Buf);
+		fclose(fp);
+		return -1;
+	}
+
+	nbytes = fread(Buf, 1, BufLen, fp);
+
+	if ( nbytes != BufLen )
+	{
+		printf("source file read error\n");
+		free(Buf);
+		fclose(fp);
+		return -1;
+	}
+
+	fclose(fp);
+
+	for(i = 0;i < (14 * 1024) - 4;i++)
+	{
+		checksum += (unsigned char)(Buf[i]);
+	}
+	*(unsigned int*)(Buf+i) = checksum;
+
+	fp = fopen(argv[2], "wb");
+	if (fp == NULL)
+	{
+		printf("destination file open error\n");
+		free(Buf);
+		return -1;
+	}
+
+	a	= Buf;
+	nbytes	= fwrite( a, 1, BufLen, fp);
+
+	if ( nbytes != BufLen )
+	{
+		printf("destination file write error\n");
+		free(Buf);
+		fclose(fp);
+		return -1;
+	}
+
+	free(Buf);
+	fclose(fp);
+
+	return 0;
+}
diff -urN u-boot-2015.04/mkuboot uboot_2015.04/mkuboot
--- u-boot-2015.04/mkuboot	1969-12-31 16:00:00.000000000 -0800
+++ uboot_2015.04/mkuboot	2017-11-29 17:33:49.000000000 -0800
@@ -0,0 +1,20 @@
+
+#!/bin/bash
+
+#
+# This script will create a u-boot binary for movinand/mmc boot
+#
+
+chmod 777 sdfuse_q -R
+		
+echo "Fuse itop-4412 trustzone uboot file into SD card"
+cd ./sdfuse_q
+
+if [ -z $1 ]
+then
+	./sd_fusing_exynos4x12.sh /dev/sdb u-boot-iTOP-4412.bin
+else
+	./sd_fusing_exynos4x12.sh $1 u-boot-iTOP-4412.bin
+fi
+
+cd ..
Binary files u-boot-2015.04/pad00.bin and uboot_2015.04/pad00.bin differ
Binary files u-boot-2015.04/sdfuse_q/add_padding and uboot_2015.04/sdfuse_q/add_padding differ
diff -urN u-boot-2015.04/sdfuse_q/add_padding.c uboot_2015.04/sdfuse_q/add_padding.c
--- u-boot-2015.04/sdfuse_q/add_padding.c	1969-12-31 16:00:00.000000000 -0800
+++ uboot_2015.04/sdfuse_q/add_padding.c	2017-11-29 16:39:35.000000000 -0800
@@ -0,0 +1,71 @@
+/*
+ * Copyright (c) 2010 Samsung Electronics Co., Ltd.
+ *              http://www.samsung.com/
+ *   
+ * 20120315:  yang81.li@samsung.com for add trustzone image
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#define  PART_SIZE_UBOOT		(328 * 1024) 
+//#define PART_SIZE_TZSW		(160 * 1024)
+
+
+
+
+static void do_add_padding(char* uboot_file)
+{
+    FILE *fp_src_uboot = NULL;
+    char *fn_src_uboot = uboot_file;
+
+
+    unsigned char *src = NULL;
+    int fs = 0;
+
+    fp_src_uboot = fopen(fn_src_uboot, "ab+");
+    if (NULL == fp_src_uboot)
+    {
+        printf("can't open uboot file for read(%s)\n", fn_src_uboot);
+        return;
+    }
+    
+    fseek(fp_src_uboot, 0L, SEEK_END);
+    fs = ftell(fp_src_uboot);
+    printf("before padding uboot.bin file size= %dB\n", fs);
+
+   if (fs > PART_SIZE_UBOOT){
+      printf("error: too large uboot !!!");
+	return ;
+   }
+   src = (unsigned char *)calloc((size_t)(PART_SIZE_UBOOT-fs), 1);
+	
+   memset(src,0,(size_t)(PART_SIZE_UBOOT-fs));
+
+   if (!src){
+	      printf("memory alloc failed !!!");
+	return ;
+   }
+		
+    fs=fwrite(src, 1, (size_t)(PART_SIZE_UBOOT-fs), fp_src_uboot);
+
+   // fs = ftell(fp_src_uboot);
+    printf("%d B written \n", fs);
+	
+    free(src);
+	
+    fclose(fp_src_uboot);
+}
+
+
+int main(int argc, char *argv[])
+{
+
+    do_add_padding("u-boot.bin");
+	return 0;
+}
\ No newline at end of file
Binary files u-boot-2015.04/sdfuse_q/add_sign and uboot_2015.04/sdfuse_q/add_sign differ
diff -urN u-boot-2015.04/sdfuse_q/add_sign.c uboot_2015.04/sdfuse_q/add_sign.c
--- u-boot-2015.04/sdfuse_q/add_sign.c	1969-12-31 16:00:00.000000000 -0800
+++ uboot_2015.04/sdfuse_q/add_sign.c	2017-11-29 16:39:35.000000000 -0800
@@ -0,0 +1,117 @@
+/*
+ * Copyright (c) 2010 Samsung Electronics Co., Ltd.
+ *              http://www.samsung.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#define BL1_SIZE    (8 * 1024)
+#define BL2_SIZE    (14 * 1024)
+#define CS_SIZE     (4)
+#define CS_START    (BL2_SIZE - CS_SIZE)
+
+
+static void calc_bl2_chksum(unsigned long addr)
+{
+    int i;
+    unsigned long checksum;
+    unsigned long src;
+
+   // addr = addr + BL1_SIZE;
+
+    for(i = 0, checksum = 0;i < CS_START;i++)
+    {
+        checksum += *(unsigned char*)addr++;
+    }
+
+    *(unsigned long*)addr = checksum;
+}
+
+
+static void add_sign(char* src_file,char* dst_file, int symbol)
+{
+    	FILE *fp_src_uboot = NULL;
+    	FILE *fp_dst_uboot = NULL;
+	unsigned char      *ptmp1 = NULL;
+	unsigned char      *addr = NULL;
+	
+    	char *fn_src_uboot = src_file;
+    	char *fn_dst_uboot = dst_file;
+    	unsigned char *src = NULL;
+    	int fs = 0;
+    	int i = 0;
+    	fp_src_uboot = fopen(fn_src_uboot, "rb");
+    	if (NULL == fp_src_uboot)
+    	{
+    	    printf("can't open uboot file for read(%s)\n", fn_src_uboot);
+    	    return;
+    	}
+    	
+    	fp_dst_uboot = fopen(fn_dst_uboot, "wb");
+    	if (NULL == fp_src_uboot)
+    	{
+    	    printf("can't open uboot file for read(%s)\n", fn_src_uboot);
+    	    return;
+    	}
+    	
+    	fseek(fp_src_uboot, 0L, SEEK_END);
+    	fs = ftell(fp_src_uboot);
+    	printf("u-boot.bin file size= %dB\n", fs);
+    	rewind(fp_src_uboot);
+    	
+    	
+    	src = (unsigned char *)calloc((size_t)fs, 1);
+    	fread(src, 1, (size_t)fs, fp_src_uboot);
+    	
+    	ptmp1=src;
+    	ptmp1+=8;
+    	
+    	//printf("the symbol is = %x\n", symbol);
+	#if 0
+    	addr = (unsigned char*)symbol;
+    	for(i=0;i<4;i++)
+    	{
+    		*(ptmp1+i)=*(addr+i);	//*(unsigned char*)addr++;    
+    	}
+    	#else
+    	#if(symbol==1)//add the sign for 4212 uboot.bin 
+    	{
+    		*(ptmp1+0)=0x00;
+    		*(ptmp1+1)=0x00;
+    		*(ptmp1+2)=0x22;
+    		*(ptmp1+3)=0x43;
+    	}
+    	#else//add the sign for 4412 uboot.bin
+    	{
+    		*(ptmp1+0)=0x00;
+    		*(ptmp1+1)=0x20;
+    		*(ptmp1+2)=0x41;
+    		*(ptmp1+3)=0xE4;
+    	}
+    	#endif
+    	
+	#endif
+    	fwrite(src, 1, (size_t)fs, fp_dst_uboot);
+    	
+    	free(src);
+    	fclose(fp_src_uboot);
+    	fclose(fp_dst_uboot);
+    	
+}
+
+
+int main(int argc, char *argv[])
+{
+	//int *symbol = 0x12345678;
+	
+   	add_sign("u-boot.bin","u-boot-4212.bin",1);
+   	add_sign("u-boot.bin","u-boot-4412.bin",1);
+	return 0;
+}
+
Binary files u-boot-2015.04/sdfuse_q/chksum and uboot_2015.04/sdfuse_q/chksum differ
diff -urN u-boot-2015.04/sdfuse_q/chksum.c uboot_2015.04/sdfuse_q/chksum.c
--- u-boot-2015.04/sdfuse_q/chksum.c	1969-12-31 16:00:00.000000000 -0800
+++ uboot_2015.04/sdfuse_q/chksum.c	2017-11-29 16:39:35.000000000 -0800
@@ -0,0 +1,86 @@
+/*
+ * Copyright (c) 2010 Samsung Electronics Co., Ltd.
+ *              http://www.samsung.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#define BL1_SIZE    (8 * 1024)
+#define BL2_SIZE    (14 * 1024)
+#define CS_SIZE     (4)
+#define CS_START    (BL2_SIZE - CS_SIZE)
+
+
+static void calc_bl2_chksum(unsigned long addr)
+{
+    int i;
+    unsigned long checksum;
+    unsigned long src;
+
+   // addr = addr + BL1_SIZE;
+
+    for(i = 0, checksum = 0;i < CS_START;i++)
+    {
+        checksum += *(unsigned char*)addr++;
+    }
+
+    *(unsigned long*)addr = checksum;
+}
+
+
+static void do_chksum(char* src_file,char* dst_file)
+{
+    FILE *fp_src_uboot = NULL;
+    FILE *fp_dst_uboot = NULL;
+
+    char *fn_src_uboot = src_file;
+    char *fn_dst_uboot = dst_file;
+    unsigned char *src = NULL;
+    int fs = 0;
+
+    fp_src_uboot = fopen(fn_src_uboot, "rb");
+    if (NULL == fp_src_uboot)
+    {
+        printf("can't open uboot file for read(%s)\n", fn_src_uboot);
+        return;
+    }
+
+    fp_dst_uboot = fopen(fn_dst_uboot, "wb");
+    if (NULL == fp_src_uboot)
+    {
+        printf("can't open uboot file for read(%s)\n", fn_src_uboot);
+        return;
+    }
+
+    fseek(fp_src_uboot, 0L, SEEK_END);
+    fs = ftell(fp_src_uboot);
+    printf("bl2aa file size= %dB\n", fs);
+    rewind(fp_src_uboot);
+
+
+    src = (unsigned char *)calloc((size_t)fs, 1);
+    fread(src, 1, (size_t)fs, fp_src_uboot);
+
+    calc_bl2_chksum((unsigned long)src);
+
+    fwrite(src, 1, (size_t)fs, fp_dst_uboot);
+
+    free(src);
+    fclose(fp_src_uboot);
+    fclose(fp_dst_uboot);
+}
+
+
+int main(int argc, char *argv[])
+{
+
+    do_chksum("bl2aa","checksum_bl2_14k.bin");
+	return 0;
+}
+
diff -urN u-boot-2015.04/sdfuse_q/Makefile uboot_2015.04/sdfuse_q/Makefile
--- u-boot-2015.04/sdfuse_q/Makefile	1969-12-31 16:00:00.000000000 -0800
+++ uboot_2015.04/sdfuse_q/Makefile	2017-11-29 16:39:35.000000000 -0800
@@ -0,0 +1,45 @@
+.SUFFIXES : .c .o
+
+CC		= gcc
+ASM		=
+LINK		=
+LIBCC		= ar
+RM		= rm
+
+#----------------------------------------------------------------------------------------------
+INCPATH		=
+LIBPATH		= 
+OBJPATH		= .
+OUTPATH		= .
+SOURCEPATH	= .
+
+LDFLAGS		= -L$(LIBPATH) 
+#LFLAGS		= -lm
+ASFLAGS		=
+ARFLAGS		= -ruv
+CFLAGS		= -o
+
+LIBS =
+
+#---------------------------------------------------------------------------------------
+SOURCES = $(OBJECTS:.o=.c)
+
+all:
+	$(CC) $(CFLAGS)	chksum  chksum.c
+	$(CC) $(CFLAGS)	add_sign  add_sign.c
+	$(CC) $(CFLAGS)	add_padding  add_padding.c
+#---------------------------------------------------------------------------------------
+.c.o:
+		$(CC) $(CFLAGS) -c $< -o $@
+
+dep:
+		gccmakedep	$(SOURCES)
+
+#---------------------------------------------------------------------------------------
+clean:
+		$(RM) -rf chksum
+
+new:
+		$(MAKE)		clean
+		$(MAKE)
+
diff -urN u-boot-2015.04/sdfuse_q/sd_fusing_exynos4x12.sh uboot_2015.04/sdfuse_q/sd_fusing_exynos4x12.sh
--- u-boot-2015.04/sdfuse_q/sd_fusing_exynos4x12.sh	1969-12-31 16:00:00.000000000 -0800
+++ uboot_2015.04/sdfuse_q/sd_fusing_exynos4x12.sh	2017-11-29 16:39:35.000000000 -0800
@@ -0,0 +1,71 @@
+#!/bin/sh
+#
+# Copyright (C) 2010 Samsung Electronics Co., Ltd.
+#              http://www.samsung.com/
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License version 2 as
+# published by the Free Software Foundation.
+#
+####################################
+reader_type1="/dev/sd"
+reader_type2="/dev/mmcblk0"
+
+if [ -z $2 ]
+then
+    echo "usage: ./sd_fusing.sh <SD Reader's device file> <filename>"
+    exit 0
+fi
+
+param1=`echo "$1" | awk '{print substr($1,1,7)}'`
+
+if [ "$param1" = "$reader_type1" ]
+then 
+    partition1=$1"1"
+    partition2=$1"2"
+    partition3=$1"3"
+    partition4=$1"4"
+
+elif [ "$1" = "$reader_type2" ]
+then 
+    partition1=$1"p1"
+    partition2=$1"p2"
+    partition3=$1"p3"
+    partition4=$1"p4"
+
+else
+    echo "Unsupported SD reader"
+    exit 0
+fi
+
+if [ -b $1 ]
+then
+    echo "$1 reader is identified."
+else
+    echo "$1 is NOT identified."
+    exit 0
+fi
+
+####################################
+# format
+umount $partition1 2> /dev/null
+umount $partition2 2> /dev/null
+umount $partition3 2> /dev/null
+umount $partition4 2> /dev/null
+
+echo "$2 fusing..."
+dd iflag=dsync oflag=dsync if=../$2 of=$1 seek=1 && \
+	echo "$2 image has been fused successfully."
+
+#echo "zImage fusing..."
+#dd iflag=dsync oflag=dsync if=../../TC4_Kernel_3.0/arch/arm/boot/zImage of=$1 seek=1024 && \
+#	echo "zImage has been fused successfully."
+
+#echo "ramdisk-uboot.img fusing..."
+#dd iflag=dsync oflag=dsync if=../../TC4_GB_2.3.4/out/target/product/smdk4212/ramdisk-uboot.img of=$1 seek=9216 && \
+#	echo "ramdisk-uboot.img has been fused successfully."
+
+####################################
+#<Message Display>
+#echo "Eject SD card"
+
diff -urN u-boot-2015.04/snapshot.commit uboot_2015.04/snapshot.commit
--- u-boot-2015.04/snapshot.commit	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/snapshot.commit	1969-12-31 16:00:00.000000000 -0800
@@ -1 +0,0 @@
-f33cdaa4c3da4a8fd35aa2f9a3172f31cc887b35  Mon, 13 Apr 2015 10:53:03 -0400
diff -urN u-boot-2015.04/.travis.yml uboot_2015.04/.travis.yml
--- u-boot-2015.04/.travis.yml	2015-04-13 07:53:03.000000000 -0700
+++ uboot_2015.04/.travis.yml	1969-12-31 16:00:00.000000000 -0800
@@ -1,220 +0,0 @@
-# Copyright Roger Meier <r.meier@siemens.com>
-# SPDX-License-Identifier:	GPL-2.0+
-
-# build U-Boot on Travis CI - https://travis-ci.org/
-
-language: c
-
-cache:
- - apt
-
-install:
- # install U-Boot build dependencies
- - sudo apt-get install -qq cppcheck sloccount sparse bc libsdl-dev build-essential
- # install latest device tree compiler
- - git clone --depth=1 https://git.kernel.org/pub/scm/utils/dtc/dtc.git /tmp/dtc
- - make -j4 -C /tmp/dtc
- # prepare buildman environment
- - export BUILDMAN_ROOT="root:"
- - export BUILDMAN_MIPS="mips:"
- - export BUILDMAN_PPC="ppc:"
- - export BUILDMAN_ARM="arm:"
- - export BUILDMAN_SANDBOX="sandbox:"
- - echo -e "[toolchain]\n${BUILDMAN_ROOT} /\n" > ~/.buildman
- - echo -e "${BUILDMAN_MIPS} /opt/eldk-5.4/mips/sysroots/i686-eldk-linux/usr/bin/mips32-linux/\n" >> ~/.buildman
- - echo -e "${BUILDMAN_PPC} /opt/eldk-5.4/powerpc/sysroots/i686-eldk-linux/usr/bin/powerpc-linux/\n" >> ~/.buildman
- - echo -e "${BUILDMAN_ARM} /opt/eldk-5.4/armv5te/sysroots/i686-eldk-linux/usr/bin/armv5te-linux-gnueabi/\n" >> ~/.buildman
- - echo -e "${BUILDMAN_SANDBOX} /usr/bin/gcc\n" >> ~/.buildman
- - export BUILDMAN_ALIAS="x86:"
- - export BUILDMAN_ALIAS_ARM="arm:"
- - echo -e "\n\n[toolchain-alias]\n${BUILDMAN_ALIAS} i386\n" >> ~/.buildman
- - echo -e "${BUILDMAN_ALIAS_ARM} armv5te\n" >> ~/.buildman
- - cat ~/.buildman
-
-env:
-  global:
-    - PATH=/tmp/dtc:$PATH
-    - BUILD_DIR=build
-    - CROSS_COMPILE=""
-    - HOSTCC="cc"
-    - HOSTCXX="c++"
-    - TEST_CONFIG_CMD=""
-
-before_script:
-  # install toolchains based on INSTALL_TOOLCHAIN} variable
-  - if [[ "${INSTALL_TOOLCHAIN}" == *arm* ]]; then wget ftp://ftp.denx.de/pub/eldk/5.4/targets/armv5te/eldk-eglibc-i686-arm-toolchain-gmae-5.4.sh ; fi
-  - if [[ "${INSTALL_TOOLCHAIN}" == *arm* ]]; then sh eldk-eglibc-i686-arm-toolchain-gmae-5.4.sh -y ; fi
-  - if [[ "${INSTALL_TOOLCHAIN}" == *arm* ]]; then ls -al /opt/eldk-5.4/armv5te/sysroots/i686-eldk-linux/usr/bin/armv5te-linux-gnueabi ; fi
-  - if [[ "${INSTALL_TOOLCHAIN}" == *avr32* ]]; then ./tools/buildman/buildman --fetch-arch avr32 ; fi
-  - if [[ "${INSTALL_TOOLCHAIN}" == *i386* ]]; then ./tools/buildman/buildman sandbox --fetch-arch i386 ; fi
-  - if [[ "${INSTALL_TOOLCHAIN}" == *m68k* ]]; then ./tools/buildman/buildman --fetch-arch m68k ; fi
-  - if [[ "${INSTALL_TOOLCHAIN}" == *mips* ]]; then wget ftp://ftp.denx.de/pub/eldk/5.4/targets/mips/eldk-eglibc-i686-mips-toolchain-gmae-5.4.sh ; fi
-  - if [[ "${INSTALL_TOOLCHAIN}" == *mips* ]]; then sh eldk-eglibc-i686-mips-toolchain-gmae-5.4.sh -y ; fi
-  - if [[ "${INSTALL_TOOLCHAIN}" == *ppc* ]]; then wget ftp://ftp.denx.de/pub/eldk/5.4/targets/powerpc/eldk-eglibc-i686-powerpc-toolchain-gmae-5.4.sh ; fi
-  - if [[ "${INSTALL_TOOLCHAIN}" == *ppc* ]]; then sh eldk-eglibc-i686-powerpc-toolchain-gmae-5.4.sh -y ; fi
-
-script:
- # the execution sequence for each test
- - echo ${TEST_CONFIG_CMD}
- - ${TEST_CONFIG_CMD}
- - echo ${TEST_CMD}
- - ${TEST_CMD}
-
-matrix:
-  include:
-  # we need to build by vendor due to 50min time limit for builds
-  # each env setting here is a dedicated build
-    - env:
-        - TEST_CMD="./MAKEALL -a arm -v atmel"
-          INSTALL_TOOLCHAIN="arm"
-          CROSS_COMPILE="/opt/eldk-5.4/armv5te/sysroots/i686-eldk-linux/usr/bin/armv5te-linux-gnueabi/arm-linux-gnueabi-"
-    - env:
-        - TEST_CMD="./MAKEALL -a arm -v denx"
-          INSTALL_TOOLCHAIN="arm"
-          CROSS_COMPILE="/opt/eldk-5.4/armv5te/sysroots/i686-eldk-linux/usr/bin/armv5te-linux-gnueabi/arm-linux-gnueabi-"
-    - env:
-        - TEST_CMD="./MAKEALL -a arm -v freescale"
-          INSTALL_TOOLCHAIN="arm"
-          CROSS_COMPILE="/opt/eldk-5.4/armv5te/sysroots/i686-eldk-linux/usr/bin/armv5te-linux-gnueabi/arm-linux-gnueabi-"
-    - env:
-        - TEST_CMD="./MAKEALL -a arm -v siemens"
-          INSTALL_TOOLCHAIN="arm"
-          CROSS_COMPILE="/opt/eldk-5.4/armv5te/sysroots/i686-eldk-linux/usr/bin/armv5te-linux-gnueabi/arm-linux-gnueabi-"
-    - env:
-        - TEST_CMD="./MAKEALL -a arm -v ti"
-          INSTALL_TOOLCHAIN="arm"
-          CROSS_COMPILE="/opt/eldk-5.4/armv5te/sysroots/i686-eldk-linux/usr/bin/armv5te-linux-gnueabi/arm-linux-gnueabi-"
-    - env:
-        - TEST_CONFIG_CMD="make sandbox_defconfig"
-          TEST_CMD="make -j4"
-          HOSTCC  = "gcc"
-          HOSTCXX  = "g++"
-    - env:
-        - TEST_CONFIG_CMD="make sandbox_defconfig"
-          TEST_CMD="make -j4"
-          HOSTCC  = "clang"
-          HOSTCXX  = "clang++"
-    - env:
-        - TEST_CMD="./MAKEALL -a mips"
-          INSTALL_TOOLCHAIN="mips"
-          CROSS_COMPILE="/opt/eldk-5.4/mips/sysroots/i686-eldk-linux/usr/bin/mips32-linux/mips-linux-"
-    - env:
-        - TEST_CONFIG_CMD="tools/buildman/buildman --list-tool-chains"
-          TEST_CMD="tools/buildman/buildman --list-error-boards arm1136"
-          INSTALL_TOOLCHAIN="arm"
-    - env:
-        - TEST_CONFIG_CMD="tools/buildman/buildman --list-tool-chains"
-          TEST_CMD="tools/buildman/buildman --list-error-boards arm1176"
-          INSTALL_TOOLCHAIN="arm"
-    - env:
-        - TEST_CONFIG_CMD="tools/buildman/buildman --list-tool-chains"
-          TEST_CMD="tools/buildman/buildman --list-error-boards arm720t"
-          INSTALL_TOOLCHAIN="arm"
-    - env:
-        - TEST_CONFIG_CMD="tools/buildman/buildman --list-tool-chains"
-          TEST_CMD="tools/buildman/buildman --list-error-boards arm920t"
-          INSTALL_TOOLCHAIN="arm"
-    - env:
-        - TEST_CONFIG_CMD="tools/buildman/buildman --list-tool-chains"
-          TEST_CMD="tools/buildman/buildman --list-error-boards atmel -x avr32"
-          INSTALL_TOOLCHAIN="arm"
-    - env:
-        - TEST_CONFIG_CMD="tools/buildman/buildman --list-tool-chains"
-          TEST_CMD="tools/buildman/buildman --list-error-boards avr32"
-          INSTALL_TOOLCHAIN="avr32"
-    - env:
-        - TEST_CONFIG_CMD="tools/buildman/buildman --list-tool-chains"
-          TEST_CMD="tools/buildman/buildman --list-error-boards davinci"
-          INSTALL_TOOLCHAIN="arm"
-    - env:
-        - TEST_CONFIG_CMD="tools/buildman/buildman --list-tool-chains"
-          TEST_CMD="tools/buildman/buildman --list-error-boards denx"
-          INSTALL_TOOLCHAIN="arm"
-    - env:
-        - TEST_CONFIG_CMD="tools/buildman/buildman --list-tool-chains"
-          TEST_CMD="tools/buildman/buildman --list-error-boards freescale -x powerpc,m68k,aarch64"
-          INSTALL_TOOLCHAIN="arm"
-    - env:
-        - TEST_CONFIG_CMD="tools/buildman/buildman --list-tool-chains"
-          TEST_CMD="tools/buildman/buildman --list-error-boards freescale -x arm,m68k,aarch64"
-          INSTALL_TOOLCHAIN="ppc"
-    - env:
-        - TEST_CONFIG_CMD="tools/buildman/buildman --list-tool-chains"
-          TEST_CMD="tools/buildman/buildman --list-error-boards sandbox x86"
-          INSTALL_TOOLCHAIN="i386"
-    - env:
-        - TEST_CONFIG_CMD="tools/buildman/buildman --list-tool-chains"
-          TEST_CMD="tools/buildman/buildman --list-error-boards kirkwood"
-          INSTALL_TOOLCHAIN="arm"
-    - env:
-        - TEST_CONFIG_CMD="tools/buildman/buildman --list-tool-chains"
-          TEST_CMD="tools/buildman/buildman --list-error-boards m68k"
-          INSTALL_TOOLCHAIN="m68k"
-    - env:
-        - TEST_CONFIG_CMD="tools/buildman/buildman --list-tool-chains"
-          TEST_CMD="tools/buildman/buildman mips"
-          INSTALL_TOOLCHAIN="mips"
-    - env:
-        - TEST_CONFIG_CMD="tools/buildman/buildman --list-tool-chains"
-          TEST_CMD="tools/buildman/buildman mpc512x"
-          INSTALL_TOOLCHAIN="ppc"
-    - env:
-        - TEST_CONFIG_CMD="tools/buildman/buildman --list-tool-chains"
-          TEST_CMD="tools/buildman/buildman mpc5xx"
-          INSTALL_TOOLCHAIN="ppc"
-    - env:
-        - TEST_CONFIG_CMD="tools/buildman/buildman --list-tool-chains"
-          TEST_CMD="tools/buildman/buildman mpc5xxx"
-          INSTALL_TOOLCHAIN="ppc"
-    - env:
-        - TEST_CONFIG_CMD="tools/buildman/buildman --list-tool-chains"
-          TEST_CMD="tools/buildman/buildman mpc8260"
-          INSTALL_TOOLCHAIN="ppc"
-    - env:
-        - TEST_CONFIG_CMD="tools/buildman/buildman --list-tool-chains"
-          TEST_CMD="tools/buildman/buildman mpc83xx"
-          INSTALL_TOOLCHAIN="ppc"
-    - env:
-        - TEST_CONFIG_CMD="tools/buildman/buildman --list-tool-chains"
-          TEST_CMD="tools/buildman/buildman mpc85xx"
-          INSTALL_TOOLCHAIN="ppc"
-    - env:
-        - TEST_CONFIG_CMD="tools/buildman/buildman --list-tool-chains"
-          TEST_CMD="tools/buildman/buildman mpc86xx"
-          INSTALL_TOOLCHAIN="ppc"
-    - env:
-        - TEST_CONFIG_CMD="tools/buildman/buildman --list-tool-chains"
-          TEST_CMD="tools/buildman/buildman mpc8xx"
-          INSTALL_TOOLCHAIN="ppc"
-    - env:
-        - TEST_CONFIG_CMD="tools/buildman/buildman --list-tool-chains"
-          TEST_CMD="tools/buildman/buildman --list-error-boards siemens"
-          INSTALL_TOOLCHAIN="arm"
-    - env:
-        - TEST_CONFIG_CMD="tools/buildman/buildman --list-tool-chains"
-          TEST_CMD="tools/buildman/buildman --list-error-boards ti"
-          INSTALL_TOOLCHAIN="arm"
-
-    # QA jobs for code analytics
-    # static code analysis with cppcheck (we can add --enable=all later)
-    - env:
-        - TEST_CMD="cppcheck --force --quiet --inline-suppr ."
-    # search for TODO within source tree
-    - env:
-        - TEST_CMD="grep -r TODO ."
-    # search for FIXME within source tree
-    - env:
-        - TEST_CMD="grep -r FIXME ."
-    # search for HACK within source tree and ignore HACKKIT board
-    - env:
-        - TEST_CMD="grep -r HACK . | grep -v HACKKIT"
-      script:
-        - grep -r HACK . | grep -v HACKKIT
-    # some statistics about the code base
-    - env:
-        - TEST_CMD="sloccount ."
-
-notifications:
-  email: false
-
-# TODO make it perfect ;-r
